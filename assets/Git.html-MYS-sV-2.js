import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,f as c}from"./app-2Xbp2Heq.js";const o="/assets/744160702_48164-BufT15rR.png",a="/assets/image-20230401112732468-Zdsmq6tl.png",d={},l=c('<h2 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h2><p>分布式版本控制系统</p><p><strong>所有版本信息仓库全部同步到本地的每个用户</strong>，这样就可以<strong>在本地查看所有版本历史记录</strong>，可以离线在本地提交，只需在</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><h3 id="git与svn的区别" tabindex="-1"><a class="header-anchor" href="#git与svn的区别" aria-hidden="true">#</a> Git与SVN的区别</h3><p>SVN：集中式版本控制系统，<strong>版本库是集中存放在中央服务器的</strong>，而工作的时候，需要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。<strong>集中式版本控制系统是必须联网</strong>的。</p><p>Git：分布式版本控制系统，没有中央服务器</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><h4 id="三种概念" tabindex="-1"><a class="header-anchor" href="#三种概念" aria-hidden="true">#</a> 三种概念</h4><p>已提交(committed)、已修改(modified)、已暂存(staged)</p><ol><li>已提交表示数据已经安全的保存在本地数据库中。</li><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h4><p><code>git status</code></p><ul><li>显示工作目录和暂存区的状态，</li></ul><p><code>git log</code></p><ul><li>查看历史提交记录</li><li><code>git log --pretty=oneline</code>只输出简单的东西</li><li><img src="'+a+'" alt="image-20230401112732468" tabindex="0" loading="lazy"><figcaption>image-20230401112732468</figcaption></li></ul><p><code>git clone</code> 克隆远程仓库</p><p><code>git commit -m ‘xxxx’</code></p><h5 id="git-push" tabindex="-1"><a class="header-anchor" href="#git-push" aria-hidden="true">#</a> git push</h5><ul><li><code>git push origin</code>将当前分支推送到<code>origin</code>主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。</li><li><code>git push -u origin master</code>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code></li><li></li></ul><h4 id="git-pull-vs-git-fetch-vs-git-checkout" tabindex="-1"><a class="header-anchor" href="#git-pull-vs-git-fetch-vs-git-checkout" aria-hidden="true">#</a> git pull vs git fetch vs git checkout</h4><ul><li><code>git pull</code>：从远程仓库获取最新的提交，并<code>自动合并</code>到当前分支</li><li><code>git fetch</code>：从远程仓库获取最新的提交，<code>但不会自动合并</code>，需要手动选择合并的时机。</li><li><code>git checkout</code>：用于分支切换、还原文件或创建新分支 <ul><li>分支切换：使用 <code>git checkout &lt;branch&gt;</code> 可以切换到指定的分支。例如，<code>git checkout main</code> 将切换到名为 <code>main</code> 的分支。</li><li>文件还原：使用 <code>git checkout -- &lt;file&gt;</code> 可以还原指定文件到最后一次提交的状态。这将丢弃当前对文件的修改，并将其还原为最后一次提交时的内容。</li><li>创建新分支：使用 <code>git checkout -b &lt;branch&gt;</code> 可以创建一个新分支并切换到该分支。</li></ul></li></ul><p>git pull = git fetch + git merge</p><ul><li>git pull 把最新的代码拉下来，并且合并到当前</li><li>git fetch 把最新的代码拉下来</li></ul><p>git branch</p><ul><li>git checkout -b xxx 切换到一个新的分支</li><li></li></ul><p>git merge</p><p>git rebase</p><p>git cheery-pick</p><p>git rebase</p><p>git</p><h2 id="状态转换" tabindex="-1"><a class="header-anchor" href="#状态转换" aria-hidden="true">#</a> 状态转换</h2><p>1）Untracked files --&gt; Changes to be committed</p><p>使用：<code>git add 文件名</code> 或者 <code>git add .</code></p><p>含义：将工作区的某个文件、某些文件、或者是所有文件，所作出的修改（新建、删除也算的），添加至暂存区，此时文件就可以被git commit了。</p><p>2）Changes to be committed --&gt; Untracked files</p><p>使用：<code>git rm --cached 文件名</code></p><p>含义：将文件从暂存状态转换为未暂存状态</p><p>3）Changes to be committed --&gt; Changes not staged for commit</p><p>使用：当某个文件已经git add过了，此时如果再进行修改，使用git status查看文件状态的时候，就处于Changes not staged for commit，意思是修改的部分没有生成快照，不能提交。</p>',41),g=[l];function r(h,s){return e(),t("div",null,g)}const u=i(d,[["render",r],["__file","Git.html.vue"]]);export{u as default};
