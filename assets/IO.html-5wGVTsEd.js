import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as e}from"./app-_dQeDwys.js";const t={},p=e(`<h2 id="_1-java中有几种类型的流" tabindex="-1"><a class="header-anchor" href="#_1-java中有几种类型的流" aria-hidden="true">#</a> 1. Java中有几种类型的流？</h2><ul><li><p>字符流和字节流</p></li><li><figure><img src="https://img-blog.csdnimg.cn/20190418185002235.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3ODc1NTg1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure></li><li><p><strong>字节流继承<code>InputStream</code>和<code>OutPutStream</code></strong></p></li><li><p><strong>字符流继承<code>InputStreamReader</code>和<code>OutputStreamWriter</code></strong></p></li><li><p>总体架构图</p><ul><li><img src="https://img-blog.csdnimg.cn/20190418184716728.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3ODc1NTg1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></li></ul></li></ul><h2 id="_2-字节流和字符流哪个好-怎么选择" tabindex="-1"><a class="header-anchor" href="#_2-字节流和字符流哪个好-怎么选择" aria-hidden="true">#</a> 2.字节流和字符流哪个好？怎么选择？</h2><ul><li><p>绝大多数情况下使用字节流会更好，因为字节流是字符流的包装，而大多数时候 IO 操作都是直接操作磁盘文件，所以这些流在传输时都是以字节的方式进行的（图片等都是按字节存储的）</p></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注意看字符流构造方法需要传InputStream</span>
<span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        sd <span class="token operator">=</span> <span class="token class-name">StreamDecoder</span><span class="token punctuation">.</span><span class="token function">forInputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ## check lock object</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// The default encoding should always be available</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果对于操作需要通过 IO 在内存中频繁处理字符串的情况使用字符流会好些，因为字符流具备缓冲区，提高了性能。</p></li></ul><h2 id="_3-什么是缓冲区-有什么作用" tabindex="-1"><a class="header-anchor" href="#_3-什么是缓冲区-有什么作用" aria-hidden="true">#</a> 3. 什么是缓冲区？有什么作用？</h2><p>缓冲区就是一段特殊的内存区域，很多情况下当程序需要频繁地操作一个资源（如文件或数据库）则性能会很低，所以为了提升性能就可以将一部分数据暂时读写到缓存区，以后直接从此区域中读写数据即可，这样就显著提升了性。 对于 Java 字符流的操作都是在缓冲区操作的，所以如果我们想在字符流操作中主动将缓冲区刷新到文件则可以使用 flush() 方法操作。</p><ol start="5"><li>什么是Java序列化，如何实现Java序列化？ 序列化就是一种用来处理对象流的机制，将对象的内容进行流化。可以对流化后的对象进行读写操作，可以将流化后的对象传输于网络之间。序列化是为了解决在对象流读写操作时所引发的问题 序列化的实现：将需要被序列化的类实现Serialize接口，没有需要实现的方法，此接口只是为了标注对象可被序列化的，然后使用一个输出流（如：FileOutputStream）来构造一个ObjectOutputStream(对象流)对象，再使用ObjectOutputStream对象的write(Object obj)方法就可以将参数obj的对象写出</li></ol><h2 id="_4-java获取项目根路径和类加载路径" tabindex="-1"><a class="header-anchor" href="#_4-java获取项目根路径和类加载路径" aria-hidden="true">#</a> 4. Java获取项目根路径和类加载路径</h2>`,8),c=[p];function o(i,l){return n(),s("div",null,c)}const d=a(t,[["render",o],["__file","IO.html.vue"]]);export{d as default};
