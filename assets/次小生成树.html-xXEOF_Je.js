const e=JSON.parse(`{"key":"v-350908ad","path":"/algorithm/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.html","title":"次小生成树","lang":"zh-CN","frontmatter":{"description":"次小生成树 定义：给一个带权的图，把图的所有生成树俺权值从小到大排序，第二小的称为次小生成树。 分类 按照权值是否严格大于最小生成树又分为： 不严格次小生成树 严格次小生成树 方法一： 先求最小生成树，在枚举删去最小生成树中的边求解。时间复杂度为O(mlogm + nm) 不能求严格次小生成树。 方法二： 先求最小生成树，然后依次枚举非树边，然后将该边加入树中，同时从树中去掉一条边，使得最终的图仍是一颗生成树。则一定可以求出次小生成树。","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/algorithm/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:title","content":"次小生成树"}],["meta",{"property":"og:description","content":"次小生成树 定义：给一个带权的图，把图的所有生成树俺权值从小到大排序，第二小的称为次小生成树。 分类 按照权值是否严格大于最小生成树又分为： 不严格次小生成树 严格次小生成树 方法一： 先求最小生成树，在枚举删去最小生成树中的边求解。时间复杂度为O(mlogm + nm) 不能求严格次小生成树。 方法二： 先求最小生成树，然后依次枚举非树边，然后将该边加入树中，同时从树中去掉一条边，使得最终的图仍是一颗生成树。则一定可以求出次小生成树。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"次小生成树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"方法一：","slug":"方法一","link":"#方法一","children":[]},{"level":3,"title":"方法二：","slug":"方法二","link":"#方法二","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"algorithm/图/最小生成树/次小生成树.md","localizedDate":"2023年12月2日","excerpt":"<h1> 次小生成树</h1>\\n<blockquote>\\n<p>定义：给一个带权的图，把图的所有生成树俺权值从小到大排序，第二小的称为次小生成树。</p>\\n</blockquote>\\n<h3> 分类</h3>\\n<p>按照权值是否严格大于最小生成树又分为：</p>\\n<ul>\\n<li>不严格次小生成树</li>\\n<li>严格次小生成树</li>\\n</ul>\\n<h3> 方法一：</h3>\\n<p>先求最小生成树，在枚举删去最小生成树中的边求解。时间复杂度为O(mlogm + nm)</p>\\n<p>不能求严格次小生成树。</p>\\n<h3> 方法二：</h3>\\n<p>先求最小生成树，然后依次枚举非树边，然后将该边加入树中，同时从树中去掉一条边，使得最终的图仍是一颗生成树。则一定可以求出次小生成树。</p>","autoDesc":true}`);export{e as data};
