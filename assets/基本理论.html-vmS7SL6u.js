import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as i,f as l}from"./app-_dQeDwys.js";const r={},t=l('<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h3><p>将不同的应用分别部署在不同的服务器上，形成多个节点，每个节点可以形成集群，同时节点之间还可以保持通信以保证分布式集群的响应输出</p><h3 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务" aria-hidden="true">#</a> 分布式事务</h3><h3 id="cap-布鲁尔定理" tabindex="-1"><a class="header-anchor" href="#cap-布鲁尔定理" aria-hidden="true">#</a> CAP(<strong>布鲁尔定理</strong>)</h3><p>指出对于一个分布式系统来说，不可能同时满足以下三点：</p><blockquote><p>因此在进行分布式架构设计时，必须做出取舍。而对于分布式数据系统，<mark>分区容忍性是基本要</mark>求，否则就失去了价值。因此设计分布式数据系统，就是在一致性和可用性之间取一个平衡。对于大多数Web应用，其实并不需要强一致性，因此牺牲一致性而换取高可用性，是目前多数分布式数据库产品的方向。</p></blockquote><ul><li><p>Consistence(一致性)：所有节点访问的都是同一份最新的数据副本</p></li><li><p>Availability(可用性)：每次请求都能够获取正确的返回----不保证获取到的数据是最新的</p><ul><li>系统提供的服务必须一直处于可用状态，对每一个操作的请求必须在有限时间内返回结果。</li></ul></li><li><p>Tolerate of network Partition(分区容错性)：分布式系统在遇到网络分区故障时，仍然需要保证对外提供一致性和可用性的服务，除非整个网络都发生故障。</p><ul><li><blockquote><p>分布式系统在遇到网络分区故障时，仍然需要保证对外提供一致性和可用性的服务，除非整个网络都发生故障。</p></blockquote></li></ul></li></ul><h3 id="base" tabindex="-1"><a class="header-anchor" href="#base" aria-hidden="true">#</a> BASE</h3><ul><li>BA(basically Available)：基本可用性，分布式系统在出现不可预知故障的时候，允许损失部分可用性。</li><li>S(Soft State)：软状态也称为弱状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li><li>E(Eventual consistency)：最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性</li></ul><h3 id="两阶段提交" tabindex="-1"><a class="header-anchor" href="#两阶段提交" aria-hidden="true">#</a> 两阶段提交</h3><ul><li>在分布式事务老的实现方式中，一般使用<strong>两阶段提交</strong>，</li><li>在现在的电商领域中，绝大部分场景一般不会使用两阶段提交这样低效的方式来实现分布式事务，一般会使用支持BASE理论的方式来实现分布式事务来保证系统的性能和业务数据的最终一致。</li></ul><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h2><h3 id="为什么使用分布式锁" tabindex="-1"><a class="header-anchor" href="#为什么使用分布式锁" aria-hidden="true">#</a> 为什么使用分布式锁？</h3><ul><li>在单机应用中，如果多个线程需要访问共享资源，程序往往会借助<code>Synchronized</code>、线程安全的对象来进行处理。。</li><li>而在分布式系统中，由于分布式系统是一个多进程的环境，所以多个进程访问同一个共享资源的时候，</li></ul>',15),h=[t];function d(n,o){return e(),i("div",null,h)}const u=a(r,[["render",d],["__file","基本理论.html.vue"]]);export{u as default};
