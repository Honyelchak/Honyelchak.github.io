import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as s,f as n}from"./app-XffPLay1.js";const t={},o=n(`<h2 id="quartz多实例保证任务只执行一次" tabindex="-1"><a class="header-anchor" href="#quartz多实例保证任务只执行一次" aria-hidden="true">#</a> Quartz多实例保证任务只执行一次</h2><p>每当要进行与某种业务相关的数据库操作时，先去QRTZ_LOCKS表中查询操作相关的业务对象所需要的锁，在select语句之后加for update来实现。例如，TRIGGER_ACCESS表示对任务触发器相关的信息进行修改、删除操作时所需要获得的锁。这时，执行查询这个表数据的SQL形如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from <span class="token constant">QRTZ_LOCKS</span> t where t<span class="token punctuation">.</span>lock_name<span class="token operator">=</span>&#39;<span class="token constant">TRIGGER_ACCESS</span>&#39; <span class="token keyword">for</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当一个线程使用上述的SQL对表中的数据执行查询操作时，若查询结果中包含相关的行，数据库就对该行进行ROW LOCK；若此时，另外一个线程使用相同的SQL对表的数据进行查询，由于查询出的数据行已经被数据库锁住了，此时这个线程就只能等待，直到拥有该行锁的线程完成了相关的业务操作，执行了commit动作后，数据库才会释放了相关行的锁，这个线程才能继续执行。</p><p>通过这样的机制，在集群环境下，结合悲观锁的机制就可以防止一个线程对数据库数据的操作的结果被另外一个线程所覆盖，从而可以避免一些难以觉察的错误发生。当然，达到这种效果的前提是需要把Connection设置为手动提交，即autoCommit为false。</p>`,5),c=[o];function r(p,l){return e(),s("div",null,c)}const _=a(t,[["render",r],["__file","项目相关.html.vue"]]);export{_ as default};
