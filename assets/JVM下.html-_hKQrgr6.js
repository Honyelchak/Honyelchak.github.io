import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,a as n,b as a,e,f as t}from"./app-_dQeDwys.js";const c="/assets/image-20230304231300988-jYnvBu7N.png",r="/assets/image-20230304231556717-Jqv0jb4F.png",u="/assets/image-20230304231351211-xKZMKJIp.png",d={},k=t('<h1 id="_1-概述篇" tabindex="-1"><a class="header-anchor" href="#_1-概述篇" aria-hidden="true">#</a> 1. 概述篇</h1><h2 id="_1-1-大厂面试题" tabindex="-1"><a class="header-anchor" href="#_1-1-大厂面试题" aria-hidden="true">#</a> 1.1. 大厂面试题</h2><blockquote><p><mark>支付宝：</mark></p><p>支付宝三面：JVM 性能调优都做了什么？</p><p><mark>小米：</mark></p><p>有做过 JVM 内存优化吗？</p><p>从 SQL、JVM、架构、数据库四个方面讲讲优化思路</p><p><mark>蚂蚁金服：</mark></p><p>JVM 的编译优化</p><p>jvm 性能调优都做了什么</p><p>JVM 诊断调优工具用过哪些？</p><p>二面：jvm 怎样调优，堆内存、栈空间设置多少合适</p><p>三面：JVM 相关的分析工具使用过的有哪些？具体的性能调优步骤如何</p><p><mark>阿里：</mark></p><p>如何进行 JVM 调优？有哪些方法？</p><p>如何理解内存泄漏问题？有哪些情况会导致内存泄漏？如何解决？</p><p><mark>字节跳动：</mark></p><p>三面：JVM 如何调优、参数怎么调？</p><p><mark>拼多多：</mark></p><p>从 SQL、JVM、架构、数据库四个方面讲讲优化思路</p><p><mark>京东：</mark></p><p>JVM 诊断调优工具用过哪些？</p><p>每秒几十万并发的秒杀系统为什么会频繁发生 GC？</p><p>日均百万级交易系统如何优化 JVM？</p><p>线上生产系统 OOM 如何监控及定位与解决？</p><p>高并发系统如何基于 G1 垃圾回收器优化性能？</p></blockquote><h2 id="_1-2-背景说明" tabindex="-1"><a class="header-anchor" href="#_1-2-背景说明" aria-hidden="true">#</a> 1.2. 背景说明</h2><p><strong>生产环境中的问题</strong></p><ul><li>生产环境发生了内存溢出该如何处理？</li><li>生产环境应该给服务器分配多少内存合适？</li><li>如何对垃圾回收器的性能进行调优？</li><li>生产环境 CPU 负载飙高该如何处理？</li><li>生产环境应该给应用分配多少线程合适？</li><li>不加 log，如何确定请求是否执行了某一行代码？</li><li>不加 log，如何实时查看某个方法的入参与返回值？</li></ul><p><strong>为什么要调优</strong></p><ul><li>防止出现 OOM，进行JVM规划和预调优</li><li>解决程序运行中各种 OOM</li><li>通过减少 Full GC 出现的频率，解决运行慢、卡顿的问题。</li></ul><p><strong>调优的大方向</strong></p><ul><li>合理的编写代码</li><li>充分并合理的使用硬件资源</li><li>合理的进行JVM调优</li></ul><p><strong>不同阶段的考虑</strong></p><ul><li>上线前</li><li>项目运行阶段</li><li>线上出现 OOM</li></ul><h2 id="_1-3-调优概述" tabindex="-1"><a class="header-anchor" href="#_1-3-调优概述" aria-hidden="true">#</a> 1.3. 调优概述</h2><p><strong>监控的依据</strong></p><ul><li>运行日志</li><li>异常堆栈</li><li>GC 日志</li><li>线程快照</li><li>堆转储快照</li></ul><p><strong>调优的大方向</strong></p><ul><li>合理地编写代码</li><li>充分并合理的使用硬件资源</li><li>合理地进行 JVM 调优</li></ul><h2 id="_1-4-性能优化的步骤" tabindex="-1"><a class="header-anchor" href="#_1-4-性能优化的步骤" aria-hidden="true">#</a> 1.4. 性能优化的步骤</h2><p><strong>第 1 步：性能监控</strong></p><ul><li>GC 频繁</li><li>cpu load 过高</li><li>OOM</li><li>内存泄露</li><li>死锁</li><li>程序响应时间较长</li></ul><p><strong>第 2 步：性能分析</strong></p><ul><li>打印 GC 日志，通过 GCviewer 或者 http://gceasy.io 来分析异常信息</li><li>灵活运用命令行工具、jstack、jmap、jinfo 等</li><li>dump 出堆文件，使用内存分析工具分析文件(jconsole、jvisualvm、jprofiler、MAT)</li><li>使用阿里 Arthas、jconsole、JVisualVM 来实时查看 JVM 状态</li><li>jstack 查看堆栈信息</li></ul><p><strong>第 3 步：性能调优</strong></p><ul><li>适当增加内存，根据业务背景选择垃圾回收器</li><li>优化代码，控制内存使用</li><li>增加机器，分散节点压力</li><li>合理设置线程池线程数量</li><li>使用中间件提高程序效率，比如缓存、消息队列等</li><li>其他……</li></ul><h2 id="_1-5-性能评价-测试指标" tabindex="-1"><a class="header-anchor" href="#_1-5-性能评价-测试指标" aria-hidden="true">#</a> 1.5. 性能评价/测试指标</h2><p><strong>停顿时间（或响应时间）</strong></p><p>提交请求和返回该请求的响应之间使用的时间，一般比较关注平均响应时间。常用操作的响应时间列表：</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">响应时间</th></tr></thead><tbody><tr><td style="text-align:left;">打开一个站点</td><td style="text-align:left;">几秒</td></tr><tr><td style="text-align:left;">数据库查询一条记录（有索引）</td><td style="text-align:left;">十几毫秒</td></tr><tr><td style="text-align:left;">机械磁盘一次寻址定位</td><td style="text-align:left;">4 毫秒</td></tr><tr><td style="text-align:left;">从机械磁盘顺序读取 1M 数据</td><td style="text-align:left;">2 毫秒</td></tr><tr><td style="text-align:left;">从 SSD 磁盘顺序读取 1M 数据</td><td style="text-align:left;">0.3 毫秒</td></tr><tr><td style="text-align:left;">从远程分布式换成 Redis 读取一个数据</td><td style="text-align:left;">0.5 毫秒</td></tr><tr><td style="text-align:left;">从内存读取 1M 数据</td><td style="text-align:left;">十几微妙</td></tr><tr><td style="text-align:left;">Java 程序本地方法调用</td><td style="text-align:left;">几微妙</td></tr><tr><td style="text-align:left;">网络传输 2Kb 数据</td><td style="text-align:left;">1 微妙</td></tr></tbody></table><p>在垃圾回收环节中：</p><ul><li>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。</li><li>-XX:MaxGCPauseMillis</li></ul><p><strong>吞吐量</strong></p><ul><li>对单位时间内完成的工作量（请求）的量度</li><li>在 GC 中：运行用户代码的事件占总运行时间的比例（总运行时间：程序的运行时间+内存回收的时间）</li><li>吞吐量为 1-1/(1+n)，其中-XX::GCTimeRatio=n</li></ul><p><strong>并发数</strong></p><ul><li>同一时刻，对服务器有实际交互的请求数</li></ul><p><strong>内存占用</strong></p><ul><li>Java 堆区所占的内存大小</li></ul><p><strong>相互间的关系</strong></p><p>以高速公路通行状况为例</p><ul><li>吞吐量：每天通过高速公路收费站的车辆的数据</li><li>并发数：高速公路上正在行驶的车辆的数目</li><li>响应时间：车速</li></ul><hr><h1 id="_2-jvm-监控及诊断工具-命令行篇" tabindex="-1"><a class="header-anchor" href="#_2-jvm-监控及诊断工具-命令行篇" aria-hidden="true">#</a> 2. JVM 监控及诊断工具-命令行篇</h1><h2 id="_2-1-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-概述" aria-hidden="true">#</a> 2.1. 概述</h2><p>性能诊断是软件工程师在日常工作中需要经常面对和解决的问题，在用户体验至上的今天，解决好应用的性能问题能带来非常大的收益。</p><p>Java 作为最流行的编程语言之一，其应用性能诊断一直受到业界广泛关注。可能造成 Java 应用出现性能问题的因素非常多，例如线程控制、磁盘读写、数据库访问、网络 I/O、垃圾收集等。想要定位这些问题，一款优秀的性能诊断工具必不可少。</p><p>体会 1：使用数据说明问题，使用知识分析问题，使用工具处理问题。</p><p>体会 2：无监控、不调优！</p><p><strong>简单命令行工具</strong></p><p>在我们刚接触 java 学习的时候，大家肯定最先了解的两个命令就是 javac，java，那么除此之外，还有没有其他的命令可以供我们使用呢？</p><p>我们进入到安装 jdk 的 bin 目录，发现还有一系列辅助工具。这些辅助工具用来获取目标 JVM 不同方面、不同层次的信息，帮助开发人员很好地解决 Java 应用程序的一些疑难杂症。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/5b7c5d239e4da192ba65edb0800055c5.png" alt="image-20210504195803526" tabindex="0" loading="lazy"><figcaption>image-20210504195803526</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/fa3c5e41cbf999d261bcf32851731565.png" alt="image-20210504195836342" tabindex="0" loading="lazy"><figcaption>image-20210504195836342</figcaption></figure>',51),m={href:"http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/jdk.jcmd/share/classes/sun/tools",target:"_blank",rel:"noopener noreferrer"},v=t('<h2 id="_2-2-jps-查看正在运行的-java-进程" tabindex="-1"><a class="header-anchor" href="#_2-2-jps-查看正在运行的-java-进程" aria-hidden="true">#</a> 2.2. jps：查看正在运行的 Java 进程</h2><p>jps(Java Process Status)：显示指定系统内所有的 HotSpot 虚拟机进程（查看虚拟机进程信息），可用于查询正在运行的虚拟机进程。</p><p>说明：对于本地虚拟机进程来说，进程的本地虚拟机 ID 与操作系统的进程 ID 是一致的，是唯一的。</p><p>基本使用语法为：jps [options] [hostid]</p><p>我们还可以通过追加参数，来打印额外的信息。</p><p><strong>options 参数</strong></p><ul><li>-q：仅仅显示 LVMID（local virtual machine id），即本地虚拟机唯一 id。不显示主类的名称等</li><li>-l：输出应用程序主类的全类名 或 如果进程执行的是 jar 包，则输出 jar 完整路径</li><li>-m：输出虚拟机进程启动时传递给主类 main()的参数</li><li>-v：列出虚拟机进程启动时的 JVM 参数。比如：-Xms20m -Xmx50m 是启动程序指定的 jvm 参数。</li></ul><p>说明：以上参数可以综合使用。</p><p>补充：如果某 Java 进程关闭了默认开启的 UsePerfData 参数（即使用参数-XX：-UsePerfData），那么 jps 命令（以及下面介绍的 jstat）将无法探知该 Java 进程。</p><p><strong>hostid 参数</strong></p><p>RMI 注册表中注册的主机名。如果想要远程监控主机上的 java 程序，需要安装 jstatd。</p><p>对于具有更严格的安全实践的网络场所而言，可能使用一个自定义的策略文件来显示对特定的可信主机或网络的访问，尽管这种技术容易受到 IP 地址欺诈攻击。</p><p>如果安全问题无法使用一个定制的策略文件来处理，那么最安全的操作是不运行 jstatd 服务器，而是在本地使用 jstat 和 jps 工具。</p><h2 id="_2-3-jstat-查看-jvm-统计信息" tabindex="-1"><a class="header-anchor" href="#_2-3-jstat-查看-jvm-统计信息" aria-hidden="true">#</a> 2.3. jstat：查看 JVM 统计信息</h2><p>jstat（JVM Statistics Monitoring Tool）：用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。在没有 GUI 图形界面，只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首选工具。常用于检测垃圾回收问题以及内存泄漏问题。</p>',15),g={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>基本使用语法为：jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</p><p>查看命令相关参数：jstat-h 或 jstat-help</p><p>其中 vmid 是进程 id 号，也就是 jps 之后看到的前面的号码，如下：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/83dddc874824b88d7fd03dab2b3889f1.png" alt="image-20210504201703222" tabindex="0" loading="lazy"><figcaption>image-20210504201703222</figcaption></figure><p><strong>option 参数</strong></p><p>选项 option 可以由以下值构成。</p><p><mark>类装载相关的：</mark></p><ul><li>-class：显示 ClassLoader 的相关信息：类的装载、卸载数量、总空间、类装载所消耗的时间等</li></ul><p><mark>垃圾回收相关的：</mark></p><ul><li>-gc：显示与 GC 相关的堆信息。包括 Eden 区、两个 Survivor 区、老年代、永久代等的容量、已用空间、GC 时间合计等信息。</li><li>-gccapacity：显示内容与-gc 基本相同，但输出主要关注 Java 堆各个区域使用到的最大、最小空间。</li><li>-gcutil：显示内容与-gc 基本相同，但输出主要关注已使用空间占总空间的百分比。</li><li>-gccause：与-gcutil 功能一样，但是会额外输出导致最后一次或当前正在发生的 GC 产生的原因。</li><li>-gcnew：显示新生代 GC 状况</li><li>-gcnewcapacity：显示内容与-gcnew 基本相同，输出主要关注使用到的最大、最小空间</li><li>-geold：显示老年代 GC 状况</li><li>-gcoldcapacity：显示内容与-gcold 基本相同，输出主要关注使用到的最大、最小空间</li><li>-gcpermcapacity：显示永久代使用到的最大、最小空间。</li></ul><p><mark>JIT 相关的：</mark></p><ul><li><p>-compiler：显示 JIT 编译器编译过的方法、耗时等信息</p></li><li><p>-printcompilation：输出已经被 JIT 编译的方法</p></li></ul><p><strong>jstat -class</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/9f2cea8b0a9b1bc47c10281b5c140cc4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -compiler</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/4e11a07ce9b8ff2f73ba5585e11e1da3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -printcompilation</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2a2553eef35293d28ef095feee3bb3b7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gc</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/6ea2aa6665c49b4bd35d46152dd2f1aa.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gccapacity</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/be1dbc9fb1100c4ab76fdf802171c000.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gcutil</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/527f347102e0f48036f4e643103a735f.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gccause</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2e5d220a3ceb094b3d6aee8b46867942.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gcnew</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/766a9d8c98c1add9ff60f001fcbe552b.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gcnewcapacity</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/d26356900de541c149df9c00852245a1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gcold</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/64f18adec84996fec58edf7052440610.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -gcoldcapacity</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/52bf3b50ba4a48247742caa0aa30be7e.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -t</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/61a5c6b9c421ba9ec38db1f132ef4161.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>jstat -t -h</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/73a294c043f770940daa6a501c1e8d2c.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><table><thead><tr><th style="text-align:left;">表头</th><th style="text-align:left;">含义（字节）</th></tr></thead><tbody><tr><td style="text-align:left;">EC</td><td style="text-align:left;">Eden 区的大小</td></tr><tr><td style="text-align:left;">EU</td><td style="text-align:left;">Eden 区已使用的大小</td></tr><tr><td style="text-align:left;">S0C</td><td style="text-align:left;">幸存者 0 区的大小</td></tr><tr><td style="text-align:left;">S1C</td><td style="text-align:left;">幸存者 1 区的大小</td></tr><tr><td style="text-align:left;">S0U</td><td style="text-align:left;">幸存者 0 区已使用的大小</td></tr><tr><td style="text-align:left;">S1U</td><td style="text-align:left;">幸存者 1 区已使用的大小</td></tr><tr><td style="text-align:left;">MC</td><td style="text-align:left;">元空间的大小</td></tr><tr><td style="text-align:left;">MU</td><td style="text-align:left;">元空间已使用的大小</td></tr><tr><td style="text-align:left;">OC</td><td style="text-align:left;">老年代的大小</td></tr><tr><td style="text-align:left;">OU</td><td style="text-align:left;">老年代已使用的大小</td></tr><tr><td style="text-align:left;">CCSC</td><td style="text-align:left;">压缩类空间的大小</td></tr><tr><td style="text-align:left;">CCSU</td><td style="text-align:left;">压缩类空间已使用的大小</td></tr><tr><td style="text-align:left;">YGC</td><td style="text-align:left;">从应用程序启动到采样时 young gc 的次数</td></tr><tr><td style="text-align:left;">YGCT</td><td style="text-align:left;">从应用程序启动到采样时 young gc 消耗时间（秒）</td></tr><tr><td style="text-align:left;">FGC</td><td style="text-align:left;">从应用程序启动到采样时 full gc 的次数</td></tr><tr><td style="text-align:left;">FGCT</td><td style="text-align:left;">从应用程序启动到采样时的 full gc 的消耗时间（秒）</td></tr><tr><td style="text-align:left;">GCT</td><td style="text-align:left;">从应用程序启动到采样时 gc 的总时间</td></tr></tbody></table><p><strong>interval 参数：</strong> 用于指定输出统计数据的周期，单位为毫秒。即：查询间隔</p><p><strong>count 参数：</strong> 用于指定查询的总次数</p><p><strong>-t 参数：</strong> 可以在输出信息前加上一个 Timestamp 列，显示程序的运行时间。单位：秒</p><p><strong>-h 参数：</strong> 可以在周期性数据输出时，输出多少行数据后输出一个表头信息</p><p><strong>补充：</strong> jstat 还可以用来判断是否出现内存泄漏。</p><p>第 1 步：在长时间运行的 Java 程序中，我们可以运行 jstat 命令连续获取多行性能数据，并取这几行数据中 OU 列（即已占用的老年代内存）的最小值。</p><p>第 2 步：然后，我们每隔一段较长的时间重复一次上述操作，来获得多组 OU 最小值。如果这些值呈上涨趋势，则说明该 Java 程序的老年代内存已使用量在不断上涨，这意味着无法回收的对象在不断增加，因此很有可能存在内存泄漏。</p><h2 id="_2-4-jinfo-实时查看和修改-jvm-配置参数" tabindex="-1"><a class="header-anchor" href="#_2-4-jinfo-实时查看和修改-jvm-配置参数" aria-hidden="true">#</a> 2.4. jinfo：实时查看和修改 JVM 配置参数</h2><p>jinfo(Configuration Info for Java)：查看虚拟机配置参数信息，也可用于调整虚拟机的配置参数。在很多情况卡，Java 应用程序不会指定所有的 Java 虚拟机参数。而此时，开发人员可能不知道某一个具体的 Java 虚拟机参数的默认值。在这种情况下，可能需要通过查找文档获取某个参数的默认值。这个查找过程可能是非常艰难的。但有了 jinfo 工具，开发人员可以很方便地找到 Java 虚拟机参数的当前值。</p><p>基本使用语法为：jinfo [options] pid</p><p>说明：java 进程 ID 必须要加上</p><table><thead><tr><th>选项</th><th>选项说明</th></tr></thead><tbody><tr><td>no option</td><td>输出全部的参数和系统属性</td></tr><tr><td>-flag name</td><td>输出对应名称的参数</td></tr><tr><td>-flag [+-]name</td><td>开启或者关闭对应名称的参数 只有被标记为 manageable 的参数才可以被动态修改</td></tr><tr><td>-flag name=value</td><td>设定对应名称的参数</td></tr><tr><td>-flags</td><td>输出全部的参数</td></tr><tr><td>-sysprops</td><td>输出系统属性</td></tr></tbody></table><p><strong>jinfo -sysprops</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">&gt;</span> <span class="token value attr-value">jinfo -sysprops</span>
<span class="token key attr-name">jboss.modules.system.pkgs</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.intellij.rt</span>
<span class="token key attr-name">java.vendor</span> <span class="token punctuation">=</span> <span class="token value attr-value">Oracle Corporation</span>
<span class="token key attr-name">sun.java.launcher</span> <span class="token punctuation">=</span> <span class="token value attr-value">SUN_STANDARD</span>
<span class="token key attr-name">sun.management.compiler</span> <span class="token punctuation">=</span> <span class="token value attr-value">HotSpot 64-Bit Tiered Compilers</span>
<span class="token key attr-name">catalina.useNaming</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">os.name</span> <span class="token punctuation">=</span> <span class="token value attr-value">Windows 10</span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jinfo -flags</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flags</span> <span class="token number">25592</span>
Non-default VM flags: <span class="token parameter variable">-XX:CICompilerCount</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">-XX:InitialHeapSize</span><span class="token operator">=</span><span class="token number">333447168</span> <span class="token parameter variable">-XX:MaxHeapSize</span><span class="token operator">=</span><span class="token number">5324668928</span> <span class="token parameter variable">-XX:MaxNewSize</span><span class="token operator">=</span><span class="token number">1774714880</span> <span class="token parameter variable">-XX:MinHeapDeltaBytes</span><span class="token operator">=</span><span class="token number">524288</span> <span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span><span class="token number">111149056</span> <span class="token parameter variable">-XX:OldSize</span><span class="token operator">=</span><span class="token number">222298112</span> <span class="token parameter variable">-XX:+UseCompressedClassPointers</span> <span class="token parameter variable">-XX:+UseCompressedOops</span> <span class="token parameter variable">-XX:+UseFastUnorderedTimeStamps</span> <span class="token parameter variable">-XX:-UseLargePagesIndividualAllocation</span> <span class="token parameter variable">-XX:+UseParallelGC</span>
Command line:  <span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,address<span class="token operator">=</span><span class="token number">127.0</span>.0.1:8040,suspend<span class="token operator">=</span>y,server<span class="token operator">=</span>n <span class="token parameter variable">-Drebel.base</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Vector<span class="token punctuation">\\</span>.jrebel <span class="token parameter variable">-Drebel.env.ide.plugin.version</span><span class="token operator">=</span><span class="token number">2021.1</span>.2 <span class="token parameter variable">-Drebel.env.ide.version</span><span class="token operator">=</span><span class="token number">2020.3</span>.3 <span class="token parameter variable">-Drebel.env.ide.product</span><span class="token operator">=</span>IU <span class="token parameter variable">-Drebel.env.ide</span><span class="token operator">=</span>intellij <span class="token parameter variable">-Drebel.notification.url</span><span class="token operator">=</span>http://localhost:7976 -agentpath:C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Vector<span class="token punctuation">\\</span>AppData<span class="token punctuation">\\</span>Roaming<span class="token punctuation">\\</span>JetBrains<span class="token punctuation">\\</span>IntelliJIdea2020.3<span class="token punctuation">\\</span>plugins<span class="token punctuation">\\</span>jr-ide-idea<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>jrebel6<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>jrebel64.dll <span class="token parameter variable">-Dmaven.home</span><span class="token operator">=</span>D:<span class="token punctuation">\\</span>eclipse<span class="token punctuation">\\</span>env<span class="token punctuation">\\</span>maven <span class="token parameter variable">-Didea.modules.paths.file</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Vector<span class="token punctuation">\\</span>AppData<span class="token punctuation">\\</span>Local<span class="token punctuation">\\</span>JetBrains<span class="token punctuation">\\</span>IntelliJIdea2020.3<span class="token punctuation">\\</span>Maven<span class="token punctuation">\\</span>idea-projects-state-596682c7.properties <span class="token parameter variable">-Dclassworlds.conf</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>Vector<span class="token punctuation">\\</span>AppData<span class="token punctuation">\\</span>Local<span class="token punctuation">\\</span>Temp<span class="token punctuation">\\</span>idea-6755-mvn.conf <span class="token parameter variable">-Dmaven.ext.class.path</span><span class="token operator">=</span>D:<span class="token punctuation">\\</span>IDEA<span class="token punctuation">\\</span>plugins<span class="token punctuation">\\</span>maven<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>maven-event-listener.jar -javaagent:D:<span class="token punctuation">\\</span>IDEA<span class="token punctuation">\\</span>plugins<span class="token punctuation">\\</span>java<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>rt<span class="token punctuation">\\</span>debugger-agent.jar <span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>UTF-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jinfo -flag</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> UseParallelGC <span class="token number">25592</span>
<span class="token parameter variable">-XX:+UseParallelGC</span>

<span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> UseG1GC <span class="token number">25592</span>
<span class="token parameter variable">-XX:-UseG1GC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jinfo -flag name</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> UseParallelGC <span class="token number">25592</span>
<span class="token parameter variable">-XX:+UseParallelGC</span>

<span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> UseG1GC <span class="token number">25592</span>
<span class="token parameter variable">-XX:-UseG1GC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jinfo -flag [+-]name</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> +PrintGCDetails <span class="token number">25592</span>
<span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> PrintGCDetails <span class="token number">25592</span>
<span class="token parameter variable">-XX:+PrintGCDetails</span>

<span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> <span class="token parameter variable">-PrintGCDetails</span> <span class="token number">25592</span>
<span class="token operator">&gt;</span> jinfo <span class="token parameter variable">-flag</span> PrintGCDetails <span class="token number">25592</span>
<span class="token parameter variable">-XX:-PrintGCDetails</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拓展：</p><ul><li><p>java -XX:+PrintFlagsInitial 查看所有 JVM 参数启动的初始值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Global flags<span class="token punctuation">]</span>
     intx ActiveProcessorCount                      <span class="token operator">=</span> <span class="token parameter variable">-1</span>                                  <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
    uintx AdaptiveSizeDecrementScaleFactor          <span class="token operator">=</span> <span class="token number">4</span>                                   <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
    uintx AdaptiveSizeMajorGCDecayTimeScale         <span class="token operator">=</span> <span class="token number">10</span>                                  <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
    uintx AdaptiveSizePausePolicy                   <span class="token operator">=</span> <span class="token number">0</span>                                   <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>java -XX:+PrintFlagsFinal 查看所有 JVM 参数的最终值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Global flags<span class="token punctuation">]</span>
     intx ActiveProcessorCount                      <span class="token operator">=</span> <span class="token parameter variable">-1</span>                                  <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
<span class="token punctuation">..</span>.
     intx CICompilerCount                          :<span class="token operator">=</span> <span class="token number">4</span>                                   <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
    uintx InitialHeapSize                          :<span class="token operator">=</span> <span class="token number">333447168</span>                           <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
    uintx MaxHeapSize                              :<span class="token operator">=</span> <span class="token number">1029701632</span>                          <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
    uintx MaxNewSize                               :<span class="token operator">=</span> <span class="token number">1774714880</span>                          <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>java -XX:+PrintCommandLineFlags 查看哪些已经被用户或者 JVM 设置过的详细的 XX 参数的名称和值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:InitialHeapSize</span><span class="token operator">=</span><span class="token number">332790016</span> <span class="token parameter variable">-XX:MaxHeapSize</span><span class="token operator">=</span><span class="token number">5324640256</span> <span class="token parameter variable">-XX:+PrintCommandLineFlags</span> <span class="token parameter variable">-XX:+UseCompressedClassPointers</span> <span class="token parameter variable">-XX:+UseCompressedOops</span> <span class="token parameter variable">-XX:-UseLargePagesIndividualAllocation</span> <span class="token parameter variable">-XX:+UseParallelGC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_2-5-jmap-导出内存映像文件-内存使用情况" tabindex="-1"><a class="header-anchor" href="#_2-5-jmap-导出内存映像文件-内存使用情况" aria-hidden="true">#</a> 2.5. jmap：导出内存映像文件&amp;内存使用情况</h2><p>jmap（JVM Memory Map）：作用一方面是获取 dump 文件（堆转储快照文件，二进制文件），它还可以获取目标 Java 进程的内存相关信息，包括 Java 堆各区域的使用情况、堆中对象的统计信息、类加载信息等。开发人员可以在控制台中输入命令“jmap -help”查阅 jmap 工具的具体使用方式和一些标准选项配置。</p>`,65),h={href:"https://docs.oracle.com/en/java/javase/11/tools/jmap.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>基本使用语法为：</p><ul><li>jmap [option] &lt;pid&gt;</li><li>jmap [option] &lt;executable &lt;core&gt;</li><li>jmap [option] [server_id@] &lt;remote server IP or hostname&gt;</li></ul><table><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">-dump</td><td style="text-align:left;">生成 dump 文件（Java 堆转储快照），-dump:live 只保存堆中的存活对象</td></tr><tr><td style="text-align:left;">-heap</td><td style="text-align:left;">输出整个堆空间的详细信息，包括 GC 的使用、堆配置信息，以及内存的使用信息等</td></tr><tr><td style="text-align:left;">-histo</td><td style="text-align:left;">输出堆空间中对象的统计信息，包括类、实例数量和合计容量，-histo:live 只统计堆中的存活对象</td></tr><tr><td style="text-align:left;">-J &lt;flag&gt;</td><td style="text-align:left;">传递参数给 jmap 启动的 jvm</td></tr><tr><td style="text-align:left;">-finalizerinfo</td><td style="text-align:left;">显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法的对象，仅 linux/solaris 平台有效</td></tr><tr><td style="text-align:left;">-permstat</td><td style="text-align:left;">以 ClassLoader 为统计口径输出永久代的内存状态信息，仅 linux/solaris 平台有效</td></tr><tr><td style="text-align:left;">-F</td><td style="text-align:left;">当虚拟机进程对-dump 选项没有任何响应时，强制执行生成 dump 文件，仅 linux/solaris 平台有效</td></tr></tbody></table><p>说明：这些参数和 linux 下输入显示的命令多少会有不同，包括也受 jdk 版本的影响。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span><span class="token operator">&lt;</span>filename.hprof<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;&gt;</span> jmap -dump:live,format<span class="token operator">=</span>b,file<span class="token operator">=</span><span class="token operator">&lt;</span>filename.hprof<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 jmap 将访问堆中的所有对象，为了保证在此过程中不被应用线程干扰，jmap 需要借助安全点机制，让所有线程停留在不改变堆中数据的状态。也就是说，由 jmap 导出的堆快照必定是安全点位置的。这可能导致基于该堆快照的分析结果存在偏差。</p><p>举个例子，假设在编译生成的机器码中，某些对象的生命周期在两个安全点之间，那么:live 选项将无法探知到这些对象。</p><p>另外，如果某个线程长时间无法跑到安全点，jmap 将一直等下去。与前面讲的 jstat 则不同，垃圾回收器会主动将 jstat 所需要的摘要数据保存至固定位置之中，而 jstat 只需直接读取即可。</p><h2 id="_2-6-jhat-jdk-自带堆分析工具" tabindex="-1"><a class="header-anchor" href="#_2-6-jhat-jdk-自带堆分析工具" aria-hidden="true">#</a> 2.6. jhat：JDK 自带堆分析工具</h2><p>jhat(JVM Heap Analysis Tool)：Sun JDK 提供的 jhat 命令与 jmap 命令搭配使用，用于分析 jmap 生成的 heap dump 文件（堆转储快照）。jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 文件的分析结果后，用户可以在浏览器中查看分析结果（分析虚拟机转储快照信息）。</p><p>使用了 jhat 命令，就启动了一个 http 服务，端口是 7000，即 http://localhost:7000/，就可以在浏览器里分析。</p><p>说明：jhat 命令在 JDK9、JDK10 中已经被删除，官方建议用 VisualVM 代替。</p><p>基本适用语法：jhat &lt;option&gt; &lt;dumpfile&gt;</p><table><thead><tr><th style="text-align:left;">option 参数</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">-stack false ｜ true</td><td style="text-align:left;">关闭｜打开对象分配调用栈跟踪</td></tr><tr><td style="text-align:left;">-refs false ｜ true</td><td style="text-align:left;">关闭｜打开对象引用跟踪</td></tr><tr><td style="text-align:left;">-port port-number</td><td style="text-align:left;">设置 jhat HTTP Server 的端口号，默认 7000</td></tr><tr><td style="text-align:left;">-exclude exclude-file</td><td style="text-align:left;">执行对象查询时需要排除的数据成员</td></tr><tr><td style="text-align:left;">-baseline exclude-file</td><td style="text-align:left;">指定一个基准堆转储</td></tr><tr><td style="text-align:left;">-debug int</td><td style="text-align:left;">设置 debug 级别</td></tr><tr><td style="text-align:left;">-version</td><td style="text-align:left;">启动后显示版本信息就退出</td></tr><tr><td style="text-align:left;">-J &lt;flag&gt;</td><td style="text-align:left;">传入启动参数，比如-J-Xmx512m</td></tr></tbody></table><h2 id="_2-7-jstack-打印-jvm-中线程快照" tabindex="-1"><a class="header-anchor" href="#_2-7-jstack-打印-jvm-中线程快照" aria-hidden="true">#</a> 2.7. jstack：打印 JVM 中线程快照</h2><p>jstack（JVM Stack Trace）：用于生成虚拟机指定进程当前时刻的线程快照（虚拟机堆栈跟踪）。线程快照就是当前虚拟机内指定进程的每一条线程正在执行的方法堆栈的集合。</p><p>生成线程快照的作用：可用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等问题。这些都是导致线程长时间停顿的常见原因。当线程出现停顿时，就可以用 jstack 显示各个线程调用的堆栈情况。</p>`,17),y={href:"https://docs.oracle.com/en/java/javase/11/tools/jstack.html",target:"_blank",rel:"noopener noreferrer"},x=t('<p>在 thread dump 中，要留意下面几种状态</p><ul><li><mark>死锁，Deadlock（重点关注）</mark></li><li><mark>等待资源，Waiting on condition（重点关注）</mark></li><li><mark>等待获取监视器，Waiting on monitor entry（重点关注）</mark></li><li><mark>阻塞，Blocked（重点关注）</mark></li><li>执行中，Runnable</li><li>暂停，Suspended</li><li>对象等待中，Object.wait() 或 TIMED＿WAITING</li><li>停止，Parked</li></ul><table><thead><tr><th style="text-align:left;">option 参数</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">-F</td><td style="text-align:left;">当正常输出的请求不被响应时，强制输出线程堆栈</td></tr><tr><td style="text-align:left;">-l</td><td style="text-align:left;">除堆栈外，显示关于锁的附加信息</td></tr><tr><td style="text-align:left;">-m</td><td style="text-align:left;">如果调用本地方法的话，可以显示 C/C++的堆栈</td></tr></tbody></table><h2 id="_2-8-jcmd-多功能命令行" tabindex="-1"><a class="header-anchor" href="#_2-8-jcmd-多功能命令行" aria-hidden="true">#</a> 2.8. jcmd：多功能命令行</h2><p>在 JDK 1.7 以后，新增了一个命令行工具 jcmd。它是一个多功能的工具，可以用来实现前面除了 jstat 之外所有命令的功能。比如：用它来导出堆、内存使用、查看 Java 进程、导出线程信息、执行 GC、JVM 运行时间等。</p>',5),j={href:"https://docs.oracle.com/en/java/javase/11/tools/jcmd.html",target:"_blank",rel:"noopener noreferrer"},M=t('<p>jcmd 拥有 jmap 的大部分功能，并且在 Oracle 的官方网站上也推荐使用 jcmd 命令代 jmap 命令</p><p>**jcmd -l：**列出所有的 JVM 进程</p><p>**jcmd 进程号 help：**针对指定的进程，列出支持的所有具体命令</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/f3507ac3e24d40625f6c3d54c25c743b.png" alt="image-20210504213044819" tabindex="0" loading="lazy"><figcaption>image-20210504213044819</figcaption></figure><p>**jcmd 进程号 具体命令：**显示指定进程的指令命令的数据</p><ul><li>Thread.print 可以替换 jstack 指令</li><li>GC.class_histogram 可以替换 jmap 中的-histo 操作</li><li>GC.heap_dump 可以替换 jmap 中的-dump 操作</li><li>GC.run 可以查看 GC 的执行情况</li><li>VM.uptime 可以查看程序的总执行时间，可以替换 jstat 指令中的-t 操作</li><li>VM.system_properties 可以替换 jinfo -sysprops 进程 id</li><li>VM.flags 可以获取 JVM 的配置参数信息</li></ul><h2 id="_2-9-jstatd-远程主机信息收集" tabindex="-1"><a class="header-anchor" href="#_2-9-jstatd-远程主机信息收集" aria-hidden="true">#</a> 2.9. jstatd：远程主机信息收集</h2><p>之前的指令只涉及到监控本机的 Java 应用程序，而在这些工具中，一些监控工具也支持对远程计算机的监控（如 jps、jstat）。为了启用远程监控，则需要配合使用 jstatd 工具。命令 jstatd 是一个 RMI 服务端程序，它的作用相当于代理服务器，建立本地计算机与远程监控工具的通信。jstatd 服务器将本机的 Java 应用程序信息传递到远程计算机。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2225de448c4af005aa0f72e84bba5e57.png" alt="image-20210504213301077" tabindex="0" loading="lazy"><figcaption>image-20210504213301077</figcaption></figure><hr><h1 id="_3-jvm-监控及诊断工具-gui-篇" tabindex="-1"><a class="header-anchor" href="#_3-jvm-监控及诊断工具-gui-篇" aria-hidden="true">#</a> 3. JVM 监控及诊断工具-GUI 篇</h1><h2 id="_3-1-工具概述" tabindex="-1"><a class="header-anchor" href="#_3-1-工具概述" aria-hidden="true">#</a> 3.1. 工具概述</h2><p>使用上一章命令行工具或组合能帮您获取目标 Java 应用性能相关的基础信息，但它们存在下列局限：</p><ul><li>1．无法获取方法级别的分析数据，如方法间的调用关系、各方法的调用次数和调用时间等（这对定位应用性能瓶颈至关重要）。</li><li>2．要求用户登录到目标 Java 应用所在的宿主机上，使用起来不是很方便。</li><li>3．分析数据通过终端输出，结果展示不够直观。</li></ul><p>为此，JDK 提供了一些内存泄漏的分析工具，如 jconsole，jvisualvm 等，用于辅助开发人员定位问题，但是这些工具很多时候并不足以满足快速定位的需求。所以这里我们介绍的工具相对多一些、丰富一些。</p><p><strong>JDK 自带的工具</strong></p><ul><li><p>jconsole：JDK 自带的可视化监控工具。查看 Java 应用程序的运行概况、监控堆信息、永久区（或元空间）使用情况、类加载情况等</p></li><li><p>Visual VM：Visual VM 是一个工具，它提供了一个可视界面，用于查看 Java 虚拟机上运行的基于 Java 技术的应用程序的详细信息。</p></li><li><p>JMC：Java Mission Control，内置 Java Flight Recorder。能够以极低的性能开销收集 Java 虚拟机的性能数据。</p></li></ul><p><strong>第三方工具</strong></p><ul><li><p>MAT：MAT（Memory Analyzer Tool）是基于 Eclipse 的内存分析工具，是一个快速、功能丰富的 Java heap 分析工具，它可以帮助我们查找内存泄漏和减少内存消耗</p></li><li><p>JProfiler：商业软件，需要付费。功能强大。</p></li></ul><h2 id="_3-2-jconsole" tabindex="-1"><a class="header-anchor" href="#_3-2-jconsole" aria-hidden="true">#</a> 3.2. JConsole</h2><p>jconsole：从 Java5 开始，在 JDK 中自带的 java 监控和管理控制台。用于对 JVM 中内存、线程和类等的监控，是一个基于 JMX（java management extensions）的 GUI 性能监控工具。</p>',21),C={href:"https://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html",target:"_blank",rel:"noopener noreferrer"},X=t('<figure><img src="https://img-blog.csdnimg.cn/img_convert/2a3da9e0684da25f3603859309a31002.png" alt="image-20210505141631635" tabindex="0" loading="lazy"><figcaption>image-20210505141631635</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/01d1c91e8a41137321af9334a383eeda.png" alt="image-20210505141726143" tabindex="0" loading="lazy"><figcaption>image-20210505141726143</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/fd74276fd1dd7e4542994d1da5768bff.png" alt="image-20210505141924211" tabindex="0" loading="lazy"><figcaption>image-20210505141924211</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/c590dbcfb21edbf73f9b7a4d4e342cb7.png" alt="image-20210505141950000" tabindex="0" loading="lazy"><figcaption>image-20210505141950000</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/0394d3dec7f075f88d1321565e4b0c40.png" alt="image-20210505142050157" tabindex="0" loading="lazy"><figcaption>image-20210505142050157</figcaption></figure><h2 id="_3-3-visual-vm" tabindex="-1"><a class="header-anchor" href="#_3-3-visual-vm" aria-hidden="true">#</a> 3.3. Visual VM</h2><p>Visual VM 是一个功能强大的多合一故障诊断和性能监控的可视化工具。它集成了多个 JDK 命令行工具，使用 Visual VM 可用于显示虚拟机进程及进程的配置和环境信息（jps，jinfo），监视应用程序的 CPU、GC、堆、方法区及线程的信息（jstat、jstack）等，甚至代替 JConsole。在 JDK 6 Update 7 以后，Visual VM 便作为 JDK 的一部分发布（VisualVM 在 JDK／bin 目录下）即：它完全免费。</p><p><strong>主要功能：</strong></p><ul><li>1.生成/读取堆内存/线程快照</li><li>2.查看 JVM 参数和系统属性</li><li>3.查看运行中的虚拟机进程</li><li>4.程序资源的实时监控</li><li>5.JMX 代理连接、远程环境监控、CPU 分析和内存分析</li></ul>',9),w={href:"https://visualvm.github.io/index.html",target:"_blank",rel:"noopener noreferrer"},_=t('<figure><img src="https://img-blog.csdnimg.cn/img_convert/5778843e25883aed6ee8591e7f57465a.png" alt="image-20210505143844282" tabindex="0" loading="lazy"><figcaption>image-20210505143844282</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/750e766290dd3ce1c31bece436870f96.png" alt="image-20210505144716064" tabindex="0" loading="lazy"><figcaption>image-20210505144716064</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/43a8b0745532825ab4a262a953aa5ffd.png" alt="image-20210505144805307" tabindex="0" loading="lazy"><figcaption>image-20210505144805307</figcaption></figure><h2 id="_3-4-eclipse-mat" tabindex="-1"><a class="header-anchor" href="#_3-4-eclipse-mat" aria-hidden="true">#</a> 3.4. Eclipse MAT</h2><p>MAT（Memory Analyzer Tool）工具是一款功能强大的 Java 堆内存分析器。可以用于查找内存泄漏以及查看内存消耗情况。MAT 是基于 Eclipse 开发的，不仅可以单独使用，还可以作为插件的形式嵌入在 Eclipse 中使用。是一款免费的性能分析工具，使用起来非常方便。</p><p>MAT 可以分析 heap dump 文件。在进行内存分析时，只要获得了反映当前设备内存映像的 hprof 文件，通过 MAT 打开就可以直观地看到当前的内存信息。一般说来，这些内存信息包含：</p><ul><li>所有的对象信息，包括对象实例、成员变量、存储于栈中的基本类型值和存储于堆中的其他对象的引用值。</li><li>所有的类信息，包括 classloader、类名称、父类、静态变量等</li><li>GCRoot 到所有的这些对象的引用路径</li><li>线程信息，包括线程的调用栈及此线程的线程局部变量（TLS）</li></ul><p>MAT 不是一个万能工具，它并不能处理所有类型的堆存储文件。但是比较主流的厂家和格式，例如 Sun，HP，SAP 所采用的 HPROF 二进制堆存储文件，以及 IBM 的 PHD 堆存储文件等都能被很好的解析。</p><p>最吸引人的还是能够快速为开发人员生成内存泄漏报表，方便定位问题和分析问题。虽然 MAT 有如此强大的功能，但是内存分析也没有简单到一键完成的程度，很多内存问题还是需要我们从 MAT 展现给我们的信息当中通过经验和直觉来判断才能发现。</p>',9),S={href:"https://www.eclipse.org/mat/downloads.php",target:"_blank",rel:"noopener noreferrer"},J=t('<figure><img src="https://img-blog.csdnimg.cn/img_convert/23d0ea8c73c4e7fb57f47fba7ee39f3f.png" alt="image-20210505145708567" tabindex="0" loading="lazy"><figcaption>image-20210505145708567</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/e5dad78d08ba1aee3a9583c33d83c53f.png" alt="image-20210505145826442" tabindex="0" loading="lazy"><figcaption>image-20210505145826442</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/b25b5cb539c1d5622f4855dffb1fd21e.png" alt="image-20210505145945951" tabindex="0" loading="lazy"><figcaption>image-20210505145945951</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/0e41893c02f420e50d36c59acf3021b6.png" alt="image-20210505150039376" tabindex="0" loading="lazy"><figcaption>image-20210505150039376</figcaption></figure><h2 id="_3-5-jprofiler" tabindex="-1"><a class="header-anchor" href="#_3-5-jprofiler" aria-hidden="true">#</a> 3.5. JProfiler</h2><p>在运行 Java 的时候有时候想测试运行时占用内存情况，这时候就需要使用测试工具查看了。在 eclipse 里面有 Eclipse Memory Analyzer tool（MAT）插件可以测试，而在 IDEA 中也有这么一个插件，就是 JProfiler。JProfiler 是由 ej-technologies 公司开发的一款 Java 应用性能诊断工具。功能强大，但是收费。</p><p><strong>特点：</strong></p><ul><li>使用方便、界面操作友好（简单且强大）</li><li>对被分析的应用影响小（提供模板）</li><li>CPU，Thread，Memory 分析功能尤其强大</li><li>支持对 jdbc，noSql，jsp，servlet，socket 等进行分析</li><li>支持多种模式（离线，在线）的分析</li><li>支持监控本地、远程的 JVM</li><li>跨平台，拥有多种操作系统的安装版本</li></ul><p><strong>主要功能：</strong></p><ul><li>1-方法调用：对方法调用的分析可以帮助您了解应用程序正在做什么，并找到提高其性能的方法</li><li>2-内存分配：通过分析堆上对象、引用链和垃圾收集能帮您修复内存泄露问题，优化内存使用</li><li>3-线程和锁：JProfiler 提供多种针对线程和锁的分析视图助您发现多线程问题</li><li>4-高级子系统：许多性能问题都发生在更高的语义级别上。例如，对于 JDBC 调用，您可能希望找出执行最慢的 SQL 语句。JProfiler 支持对这些子系统进行集成分析</li></ul>',10),G={href:"https://www.ej-technologies.com/products/jprofiler/overview.html",target:"_blank",rel:"noopener noreferrer"},q=t('<p><strong>数据采集方式：</strong></p><p>JProfier 数据采集方式分为两种：Sampling（样本采集）和 Instrumentation（重构模式）</p><p><strong>Instrumentation</strong>：这是 JProfiler 全功能模式。在 class 加载之前，JProfier 把相关功能代码写入到需要分析的 class 的 bytecode 中，对正在运行的 jvm 有一定影响。</p><ul><li>优点：功能强大。在此设置中，调用堆栈信息是准确的。</li><li>缺点：若要分析的 class 较多，则对应用的性能影响较大，CPU 开销可能很高（取决于 Filter 的控制）。因此使用此模式一般配合 Filter 使用，只对特定的类或包进行分析</li></ul><p><strong>Sampling</strong>：类似于样本统计，每隔一定时间（5ms）将每个线程栈中方法栈中的信息统计出来。</p><ul><li>优点：对 CPU 的开销非常低，对应用影响小（即使你不配置任何 Filter）</li><li>缺点：一些数据／特性不能提供（例如：方法的调用次数、执行时间）</li></ul><p>注：JProfiler 本身没有指出数据的采集类型，这里的采集类型是针对方法调用的采集类型。因为 JProfiler 的绝大多数核心功能都依赖方法调用采集的数据，所以可以直接认为是 JProfiler 的数据采集类型。</p><p><strong>遥感监测 Telemetries</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/b385d959623a0684d1a40700f4bc1243.png" alt="image-20210505164521410" tabindex="0" loading="lazy"><figcaption>image-20210505164521410</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/aa57ab4a3183801e003546c177ab64ee.png" alt="image-20210505164907312" tabindex="0" loading="lazy"><figcaption>image-20210505164907312</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/75200c0d6aeaaade33422d40bd64beb3.png" alt="image-20210505164815324" tabindex="0" loading="lazy"><figcaption>image-20210505164815324</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/6342c78f10e0c8d96243ae69c280c742.png" alt="image-20210505164945192" tabindex="0" loading="lazy"><figcaption>image-20210505164945192</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/eda04270592f6cf5cc53f6300f9f084a.png" alt="image-20210505165010529" tabindex="0" loading="lazy"><figcaption>image-20210505165010529</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/944971c96b35f20aa4073a39ee8f678e.png" alt="image-20210505165128212" tabindex="0" loading="lazy"><figcaption>image-20210505165128212</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/983f44592d93befafdb1818ea9fb7603.png" alt="image-20210505165249919" tabindex="0" loading="lazy"><figcaption>image-20210505165249919</figcaption></figure><p><strong>内存视图 Live Memory</strong></p><p>Live memory 内存剖析：class／class instance 的相关信息。例如对象的个数，大小，对象创建的方法执行栈，对象创建的热点。</p><ul><li><strong>所有对象 All Objects</strong>：显示所有加载的类的列表和在堆上分配的实例数。只有 Java 1.5（JVMTI）才会显示此视图。</li><li><strong>记录对象 Record Objects</strong>：查看特定时间段对象的分配，并记录分配的调用堆栈。</li><li><strong>分配访问树 Allocation Call Tree</strong>：显示一棵请求树或者方法、类、包或对已选择类有带注释的分配信息的 J2EE 组件。</li><li><strong>分配热点 Allocation Hot Spots</strong>：显示一个列表，包括方法、类、包或分配已选类的 J2EE 组件。你可以标注当前值并且显示差异值。对于每个热点都可以显示它的跟踪记录树。</li><li><strong>类追踪器 Class Tracker</strong>：类跟踪视图可以包含任意数量的图表，显示选定的类和包的实例与时间。</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/49b08570bc68a4ccb1b76c610001160e.png" alt="image-20210505164554298" tabindex="0" loading="lazy"><figcaption>image-20210505164554298</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/12e4a0779da98da28310602aa727fe77.png" alt="image-20210505165519790" tabindex="0" loading="lazy"><figcaption>image-20210505165519790</figcaption></figure><p><strong>堆遍历 heap walker</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/ffb0632996afc5ab68554c918c6ba5c5.png" alt="image-20210505165710620" tabindex="0" loading="lazy"><figcaption>image-20210505165710620</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/9328465f8078d485d713866676fedddd.png" alt="image-20210505165823201" tabindex="0" loading="lazy"><figcaption>image-20210505165823201</figcaption></figure><p><strong>cpu 视图 cpu views</strong></p><p>JProfiler 提供不同的方法来记录访问树以优化性能和细节。线程或者线程组以及线程状况可以被所有的视图选择。所有的视图都可以聚集到方法、类、包或 J2EE 组件等不同层上。</p><ul><li><strong>访问树 Call Tree</strong>：显示一个积累的自顶向下的树，树中包含所有在 JVM 中已记录的访问队列。JDBC，JMS 和 JNDI 服务请求都被注释在请求树中。请求树可以根据 Servlet 和 JSP 对 URL 的不同需要进行拆分。</li><li><strong>热点 Hot Spots</strong>：显示消耗时间最多的方法的列表。对每个热点都能够显示回溯树。该热点可以按照方法请求，JDBC，JMS 和 JNDI 服务请求以及按照 URL 请求来进行计算。</li><li><strong>访问图 Call Graph</strong>：显示一个从已选方法、类、包或 J2EE 组件开始的访问队列的图。</li><li><strong>方法统计 Method Statistis</strong>：显示一段时间内记录的方法的调用时间细节。</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/2d40f4905776b879b96ea26323b5437e.png" alt="image-20210505170055722" tabindex="0" loading="lazy"><figcaption>image-20210505170055722</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/054ba6962384453984936f4dc2fe5f64.png" alt="image-20210505170141278" tabindex="0" loading="lazy"><figcaption>image-20210505170141278</figcaption></figure><p><strong>线程视图 threads</strong></p><p>JProfiler 通过对线程历史的监控判断其运行状态，并监控是否有线程阻塞产生，还能将一个线程所管理的方法以树状形式呈现。对线程剖析。</p><ul><li><strong>线程历史 Thread History</strong>：显示一个与线程活动和线程状态在一起的活动时间表。</li><li><strong>线程监控 Thread Monitor</strong>：显示一个列表，包括所有的活动线程以及它们目前的活动状况。</li><li><strong>线程转储 Thread Dumps</strong>：显示所有线程的堆栈跟踪。</li></ul><p>线程分析主要关心三个方面：</p><ul><li>1．web 容器的线程最大数。比如：Tomcat 的线程容量应该略大于最大并发数。</li><li>2．线程阻塞</li><li>3．线程死锁</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/18074c3907f5b0b197cd88802897a758.png" alt="image-20210505170739972" tabindex="0" loading="lazy"><figcaption>image-20210505170739972</figcaption></figure><p><strong>监控和锁 Monitors ＆Locks</strong></p><p>所有线程持有锁的情况以及锁的信息。观察 JVM 的内部线程并查看状态：</p><ul><li><strong>死锁探测图表 Current Locking Graph</strong>：显示 JVM 中的当前死锁图表。</li><li><strong>目前使用的监测器 Current Monitors</strong>：显示目前使用的监测器并且包括它们的关联线程。</li><li><strong>锁定历史图表 Locking History Graph</strong>：显示记录在 JVM 中的锁定历史。</li><li><strong>历史检测记录 Monitor History</strong>：显示重大的等待事件和阻塞事件的历史记录。</li><li><strong>监控器使用统计 Monitor Usage Statistics</strong>：显示分组监测，线程和监测类的统计监测数据</li></ul><h2 id="_3-6-arthas" tabindex="-1"><a class="header-anchor" href="#_3-6-arthas" aria-hidden="true">#</a> 3.6. Arthas</h2><p>上述工具都必须在服务端项目进程中配置相关的监控参数，然后工具通过远程连接到项目进程，获取相关的数据。这样就会带来一些不便，比如线上环境的网络是隔离的，本地的监控工具根本连不上线上环境。并且类似于 Jprofiler 这样的商业工具，是需要付费的。</p><p>那么有没有一款工具不需要远程连接，也不需要配置监控参数，同时也提供了丰富的性能监控数据呢？</p><p>阿里巴巴开源的性能分析神器 Arthas 应运而生。</p><p>Arthas 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪 Java 代码；实时监控 JVM 状态。Arthas 支持 JDK 6 ＋，支持 Linux／Mac／Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。当你遇到以下类似问题而束手无策时，Arthas 可以帮助你解决：</p><ul><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到 JVM 的实时运行状态？</li><li>怎么快速定位应用的热点，生成火焰图？</li></ul>',43),P={href:"https://arthas.aliyun.com/doc/quick-start.html",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>安装方式：如果速度较慢，可以尝试国内的码云 Gitee 下载。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://io/arthas/arthas-boot.jar
<span class="token function">wget</span> https://arthas/gitee/io/arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Arthas 只是一个 java 程序，所以可以直接用 java -jar 运行。</p><p>除了在命令行查看外，Arthas 目前还支持 Web Console。在成功启动连接进程之后就已经自动启动,可以直接访问 http://127.0.0.1:8563/ 访问，页面上的操作模式和控制台完全一样。</p><p><strong>基础指令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>quit/exit 退出当前 Arthas客户端，其他 Arthas喜户端不受影响
stop/shutdown 关闭 Arthas服务端，所有 Arthas客户端全部退出
<span class="token builtin class-name">help</span> 查看命令帮助信息
<span class="token function">cat</span> 打印文件内容，和linux里的cat命令类似
<span class="token builtin class-name">echo</span> 打印参数，和linux里的echo命令类似
<span class="token function">grep</span> 匹配查找，和linux里的gep命令类似
<span class="token function">tee</span> 复制标隹输入到标准输出和指定的文件，和linux里的tee命令类似
<span class="token builtin class-name">pwd</span> 返回当前的工作目录，和linux命令类似
cls 清空当前屏幕区域
session 查看当前会话的信息
reset 重置增强类，将被 Arthas增强过的类全部还原, Arthas服务端关闭时会重置所有增强过的类
version 输出当前目标Java进程所加载的 Arthas版本号
<span class="token function">history</span> 打印命令历史
keymap Arthas快捷键列表及自定义快捷键
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jvm 相关</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>dashboard 当前系统的实时数据面板
thread 查看当前JVM的线程堆栈信息
jvm 查看当前JVM的信息
sysprop 查看和修改JVM的系统属性
sysem 查看JVM的环境变量
vmoption 查看和修改JVM里诊断相关的option
perfcounter 查看当前JVM的 Perf Counter信息
logger 查看和修改logger
getstatic 查看类的静态属性
ognl 执行ognl表达式
mbean 查看 Mbean的信息
heapdump dump <span class="token function">java</span> heap，类似jmap命令的 heap dump功能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>class/classloader 相关</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sc 查看JVM已加载的类信息
	<span class="token parameter variable">-d</span> 输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的Classloader等详细信息。如果一个类被多个Classloader所加载，则会出现多次
	<span class="token parameter variable">-E</span> 开启正则表达式匹配，默认为通配符匹配
	<span class="token parameter variable">-f</span> 输出当前类的成员变量信息（需要配合参数-d一起使用）
	<span class="token parameter variable">-X</span> 指定输出静态变量时属性的遍历深度，默认为0，即直接使用toString输出
sm 查看已加载类的方法信息
	<span class="token parameter variable">-d</span> 展示每个方法的详细信息
	<span class="token parameter variable">-E</span> 开启正则表达式匹配,默认为通配符匹配
jad 反编译指定已加载类的源码
<span class="token function">mc</span> 内存编译器，内存编译.java文件为.class文件
retransform 加载外部的.class文件, retransform到JVM里
redefine 加载外部的.class文件，redefine到JVM里
dump dump已加载类的byte code到特定目录
classloader 查看classloader的继承树，urts，类加载信息，使用classloader去getResource
	<span class="token parameter variable">-t</span> 查看classloader的继承树
	<span class="token parameter variable">-l</span> 按类加载实例查看统计信息
	<span class="token parameter variable">-c</span> 用classloader对应的hashcode来查看对应的 Jar urls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>monitor/watch/trace 相关</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>monitor 方法执行监控，调用次数、执行时间、失败率
	-c 统计周期，默认值为120秒
watch 方法执行观测，能观察到的范围为：返回值、抛出异常、入参，通过编写groovy表达式进行对应变量的查看
	-b 在方法调用之前观察(默认关闭)
	-e 在方法异常之后观察(默认关闭)
	-s 在方法返回之后观察(默认关闭)
	-f 在方法结束之后(正常返回和异常返回)观察(默认开启)
	-x 指定输岀结果的属性遍历深度,默认为0
trace 方法内部调用路径,并输出方法路径上的每个节点上耗时
	-n 执行次数限制
stack 输出当前方法被调用的调用路径
tt 方法执行数据的时空隧道,记录下指定方法每次调用的入参和返回信息,并能对这些不同的时间下调用进行观测
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">jobs</span> 列出所有job
<span class="token function">kill</span> 强制终止任务
<span class="token function">fg</span> 将暂停的任务拉到前台执行
<span class="token function">bg</span> 将暂停的任务放到后台执行
<span class="token function">grep</span> 搜索满足条件的结果
plaintext 将命令的结果去除ANSI颜色
<span class="token function">wc</span> 按行统计输出结果
options 查看或设置Arthas全局开关
profiler 使用async-profiler对应用采样，生成火焰图
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-7-java-misssion-control" tabindex="-1"><a class="header-anchor" href="#_3-7-java-misssion-control" aria-hidden="true">#</a> 3.7. Java Misssion Control</h2><p>在 Oracle 收购 Sun 之前，Oracle 的 JRockit 虚拟机提供了一款叫做 JRockit Mission Control 的虚拟机诊断工具。</p><p>在 Oracle 收购 sun 之后，Oracle 公司同时拥有了 Hotspot 和 JRockit 两款虚拟机。根据 Oracle 对于 Java 的战略，在今后的发展中，会将 JRokit 的优秀特性移植到 Hotspot 上。其中一个重要的改进就是在 Sun 的 JDK 中加入了 JRockit 的支持。</p><p>在 Oracle JDK 7u40 之后，Mission Control 这款工具己经绑定在 Oracle JDK 中发布。</p><p>自 Java11 开始，本节介绍的 JFR 己经开源。但在之前的 Java 版本，JFR 属于 Commercial Feature 通过 Java 虚拟机参数-XX:+UnlockCommercialFeatures 开启。</p><p>Java Mission Control（简称 JMC) ， Java 官方提供的性能强劲的工具，是一个用于对 Java 应用程序进行管理、监视、概要分析和故障排除的工具套件。它包含一个 GUI 客户端以及众多用来收集 Java 虚拟机性能数据的插件如 JMX Console（能够访问用来存放虚拟机齐个于系统运行数据的 MXBeans）以及虚拟机内置的高效 profiling 工具 Java Flight Recorder（JFR）。</p><p>JMC 的另一个优点就是：采用取样，而不是传统的代码植入技术，对应用性能的影响非常非常小，完全可以开着 JMC 来做压测（唯一影响可能是 full gc 多了）。</p>`,21),V={href:"https://github.com/JDKMissionControl/jmc",target:"_blank",rel:"noopener noreferrer"},D=t('<figure><img src="https://img-blog.csdnimg.cn/img_convert/042f2d109ebcf51894f822706963e399.png" alt="image-20210505184358041" tabindex="0" loading="lazy"><figcaption>image-20210505184358041</figcaption></figure><p><strong>Java Flight Recorder</strong></p><p>Java Flight Recorder 是 JMC 的其中一个组件，能够以极低的性能开销收集 Java 虚拟机的性能数据。与其他工具相比，JFR 的性能开销很小，在默认配置下平均低于 1%。JFR 能够直接访问虚拟机内的敌据并且不会影响虚拟机的优化。因此它非常适用于生产环境下满负荷运行的 Java 程序。</p><p>Java Flight Recorder 和 JDK Mission Control 共同创建了一个完整的工具链。JDK Mission Control 可对 Java Flight Recorder 连续收集低水平和详细的运行时信息进行高效、详细的分析。</p><p>当启用时 JFR 将记录运行过程中发生的一系列事件。其中包括 Java 层面的事件如线程事件、锁事件，以及 Java 虚拟机内部的事件，如新建对象，垃圾回收和即时编译事件。按照发生时机以及持续时间来划分，JFR 的事件共有四种类型，它们分别为以下四种：</p><ul><li><p>瞬时事件（Instant Event) ，用户关心的是它们发生与否，例如异常、线程启动事件。</p></li><li><p>持续事件(Duration Event) ，用户关心的是它们的持续时间，例如垃圾回收事件。</p></li><li><p>计时事件(Timed Event) ，是时长超出指定阈值的持续事件。</p></li><li><p>取样事件（Sample Event)，是周期性取样的事件。</p></li></ul><p>取样事件的其中一个常见例子便是方法抽样（Method Sampling），即每隔一段时问统计各个线程的栈轨迹。如果在这些抽样取得的栈轨迹中存在一个反复出现的方法，那么我们可以推测该方法是热点方法</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/d96c890e6187bcfa8d4a558be64354e6.png" alt="image-20210505185941373" tabindex="0" loading="lazy"><figcaption>image-20210505185941373</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/dbaae7f62c614ef03aebb267b4249650.png" alt="image-20210505185954567" tabindex="0" loading="lazy"><figcaption>image-20210505185954567</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/a0bc985fd0274fc17c9dc2e8e205a8a2.png" alt="image-20210505190009274" tabindex="0" loading="lazy"><figcaption>image-20210505190009274</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/fe38780df6ccf1c3f3206baaa089ff1a.png" alt="image-20210505190023099" tabindex="0" loading="lazy"><figcaption>image-20210505190023099</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/0e8ab54b4fdc5cd2f4d7e1cda87dfe52.png" alt="image-20210505190037354" tabindex="0" loading="lazy"><figcaption>image-20210505190037354</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/ef07d257c25f15fe7d6bfdbe6ee0f087.png" alt="image-20210505190052561" tabindex="0" loading="lazy"><figcaption>image-20210505190052561</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/3f65159c21e0c6996588c90c7c5ca8e6.png" alt="image-20210505190106004" tabindex="0" loading="lazy"><figcaption>image-20210505190106004</figcaption></figure><h2 id="_3-8-其他工具" tabindex="-1"><a class="header-anchor" href="#_3-8-其他工具" aria-hidden="true">#</a> 3.8. 其他工具</h2><p><strong>Flame Graphs（火焰图）</strong></p><p>在追求极致性能的场景下，了解你的程序运行过程中 cpu 在干什么很重要，火焰图就是一种非常直观的展示 CPU 在程序整个生命周期过程中时间分配的工具。火焰图对于现代的程序员不应该陌生，这个工具可以非常直观的显示出调用找中的 CPU 消耗瓶颈。</p>',17),A={href:"http://new.brendangregg.com/flamegraphs.html",target:"_blank",rel:"noopener noreferrer"},E=t('<figure><img src="https://img-blog.csdnimg.cn/img_convert/c2692cea072a29b00b420933892ae9f9.png" alt="image-20210505190823214" tabindex="0" loading="lazy"><figcaption>image-20210505190823214</figcaption></figure><p>火焰图，简单通过 x 轴横条宽度来度量时间指标，y 轴代表线程栈的层次。</p><p><strong>Tprofiler</strong></p><p>案例： 使用 JDK 自身提供的工具进行 JVM 调优可以将下 TPS 由 2.5 提升到 20（提升了 7 倍），并准确 定位系统瓶颈。</p><p>系统瓶颈有：应用里释态对象不是太多、有大量的业务线程在频繁创建一些生命周期很长的临时对象，代码里有问题。</p><p>那么，如何在海量业务代码里边准确定位这些性能代码？这里使用阿里开源工具 Tprofiler 来定位 这些性能代码，成功解决掉了 GC 过于频繁的性能瓶预，并最终在上次优化的基础上将 TPS 再提升了 4 倍，即提升到 100。</p><ul><li>Tprofiler 配置部署、远程操作、 日志阅谈都不太复杂，操作还是很简单的。但是其却是能够 起到一针见血、立竿见影的效果，帮我们解决了 GC 过于频繁的性能瓶预。</li><li>Tprofiler 最重要的特性就是能够统汁出你指定时间段内 JVM 的 top method 这些 top method 极有可能就是造成你 JVM 性能瓶颈的元凶。这是其他大多数 JVM 调优工具所不具备的，包括 JRockit Mission Control。JRokit 首席开发者 Marcus Hirt 在其私人博客《 Lom Overhead Method Profiling cith Java Mission Control》下的评论中曾明确指出 JRMC 井不支持 TOP 方法的统计。</li></ul>',7),z={href:"http://github.com/alibaba/Tprofiler",target:"_blank",rel:"noopener noreferrer"},O=t('<p><strong>Btrace</strong></p><p>常见的动态追踪工具有 BTrace、HouseHD（该项目己经停止开发）、Greys-Anatomy（国人开发 个人开发者）、Byteman（JBoss 出品），注意 Java 运行时追踪工具井不限干这几种，但是这几个是相对比较常用的。</p><p>BTrace 是 SUN Kenai 云计算开发平台下的一个开源项目，旨在为 java 提供安全可靠的动态跟踪分析工具。先看一卜日 Trace 的官方定义：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/8df058bdfb18387a90cd5dd87a2a2f04.png" alt="image-20210505192042974" tabindex="0" loading="lazy"><figcaption>image-20210505192042974</figcaption></figure><p>大概意思是一个 Java 平台的安全的动态追踪工具，可以用来动态地追踪一个运行的 Java 程序。BTrace 动态调整目标应用程序的类以注入跟踪代码（“字节码跟踪“）。</p><p><strong>YourKit</strong></p><p><strong>JProbe</strong></p><p><strong>Spring Insight</strong></p><h2 id="_3-9-apache-jmeter-压测工具" tabindex="-1"><a class="header-anchor" href="#_3-9-apache-jmeter-压测工具" aria-hidden="true">#</a> 3.9 Apache JMeter(压测工具)</h2><hr><h1 id="_4-jvm-运行时参数" tabindex="-1"><a class="header-anchor" href="#_4-jvm-运行时参数" aria-hidden="true">#</a> 4. JVM 运行时参数</h1><h2 id="_4-1-jvm-参数选项" tabindex="-1"><a class="header-anchor" href="#_4-1-jvm-参数选项" aria-hidden="true">#</a> 4.1. JVM 参数选项</h2>',12),U={href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<h3 id="_4-1-1-类型一-标准参数选项" tabindex="-1"><a class="header-anchor" href="#_4-1-1-类型一-标准参数选项" aria-hidden="true">#</a> 4.1.1. 类型一：标准参数选项</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">java</span> <span class="token parameter variable">-help</span>
用法: <span class="token function">java</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> class <span class="token punctuation">[</span>args<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
           <span class="token punctuation">(</span>执行类<span class="token punctuation">)</span>
   或  <span class="token function">java</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token parameter variable">-jar</span> jarfile <span class="token punctuation">[</span>args<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
           <span class="token punctuation">(</span>执行 jar 文件<span class="token punctuation">)</span>
其中选项包括:
    <span class="token parameter variable">-d32</span>          使用 <span class="token number">32</span> 位数据模型 <span class="token punctuation">(</span>如果可用<span class="token punctuation">)</span>
    <span class="token parameter variable">-d64</span>          使用 <span class="token number">64</span> 位数据模型 <span class="token punctuation">(</span>如果可用<span class="token punctuation">)</span>
    <span class="token parameter variable">-server</span>       选择 <span class="token string">&quot;server&quot;</span> VM
                  默认 VM 是 server.

    <span class="token parameter variable">-cp</span> <span class="token operator">&lt;</span>目录和 zip/jar 文件的类搜索路径<span class="token operator">&gt;</span>
    <span class="token parameter variable">-classpath</span> <span class="token operator">&lt;</span>目录和 zip/jar 文件的类搜索路径<span class="token operator">&gt;</span>
                  用 <span class="token punctuation">;</span> 分隔的目录, JAR 档案
                  和 ZIP 档案列表, 用于搜索类文件。
    -D<span class="token operator">&lt;</span>名称<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>值<span class="token operator">&gt;</span>
                  设置系统属性
    -verbose:<span class="token punctuation">[</span>class<span class="token operator">|</span>gc<span class="token operator">|</span>jni<span class="token punctuation">]</span>
                  启用详细输出
    <span class="token parameter variable">-version</span>      输出产品版本并退出
    -version:<span class="token operator">&lt;</span>值<span class="token operator">&gt;</span>
                  警告: 此功能已过时, 将在
                  未来发行版中删除。
                  需要指定的版本才能运行
    <span class="token parameter variable">-showversion</span>  输出产品版本并继续
    -jre-restrict-search <span class="token operator">|</span> -no-jre-restrict-search
                  警告: 此功能已过时, 将在
                  未来发行版中删除。
                  在版本搜索中包括/排除用户专用 JRE
    -? <span class="token parameter variable">-help</span>      输出此帮助消息
    <span class="token parameter variable">-X</span>            输出非标准选项的帮助
    -ea<span class="token punctuation">[</span>:<span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token operator">|</span>:<span class="token operator">&lt;</span>classname<span class="token operator">&gt;</span><span class="token punctuation">]</span>
    -enableassertions<span class="token punctuation">[</span>:<span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token operator">|</span>:<span class="token operator">&lt;</span>classname<span class="token operator">&gt;</span><span class="token punctuation">]</span>
                  按指定的粒度启用断言
    -da<span class="token punctuation">[</span>:<span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token operator">|</span>:<span class="token operator">&lt;</span>classname<span class="token operator">&gt;</span><span class="token punctuation">]</span>
    -disableassertions<span class="token punctuation">[</span>:<span class="token operator">&lt;</span>packagename<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token operator">|</span>:<span class="token operator">&lt;</span>classname<span class="token operator">&gt;</span><span class="token punctuation">]</span>
                  禁用具有指定粒度的断言
    <span class="token parameter variable">-esa</span> <span class="token operator">|</span> <span class="token parameter variable">-enablesystemassertions</span>
                  启用系统断言
    <span class="token parameter variable">-dsa</span> <span class="token operator">|</span> <span class="token parameter variable">-disablesystemassertions</span>
                  禁用系统断言
    -agentlib:<span class="token operator">&lt;</span>libname<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>选项<span class="token operator">&gt;</span><span class="token punctuation">]</span>
                  加载本机代理库 <span class="token operator">&lt;</span>libname<span class="token operator">&gt;</span>, 例如 <span class="token parameter variable">-agentlib:hprof</span>
                  另请参阅 <span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>help 和 <span class="token parameter variable">-agentlib:hprof</span><span class="token operator">=</span>help
    -agentpath:<span class="token operator">&lt;</span>pathname<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>选项<span class="token operator">&gt;</span><span class="token punctuation">]</span>
                  按完整路径名加载本机代理库
    -javaagent:<span class="token operator">&lt;</span>jarpath<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>选项<span class="token operator">&gt;</span><span class="token punctuation">]</span>
                  加载 Java 编程语言代理, 请参阅 java.lang.instrument
    -splash:<span class="token operator">&lt;</span>imagepath<span class="token operator">&gt;</span>
                  使用指定的图像显示启动屏幕
有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Server 模式和 Client 模式</strong></p><p>Hotspot JVM 有两种模式，分别是 server 和 client，分别通过-server 和-client 模式设置</p><ul><li>32 位系统上，默认使用 Client 类型的 JVM。要想使用 Server 模式，机器配置至少有 2 个以上的 CPU 和 2G 以上的物理内存。client 模式适用于对内存要求较小的桌面应用程序，默认使用 Serial 串行垃圾收集器</li><li>64 位系统上，只支持 server 模式的 JVM，适用于需要大内存的应用程序，默认使用并行垃圾收集器</li></ul>`,5),H={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>如何知道系统默认使用的是那种模式呢？</p><p>通过 java -version 命令：可以看到 Server VM 字样，代表当前系统使用是 Server 模式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">java</span> <span class="token parameter variable">-version</span>
<span class="token function">java</span> version <span class="token string">&quot;1.8.0_201&quot;</span>
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_201-b09<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.201</span>-b09, mixed mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-2-类型二-x-参数选项" tabindex="-1"><a class="header-anchor" href="#_4-1-2-类型二-x-参数选项" aria-hidden="true">#</a> 4.1.2. 类型二：-X 参数选项</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token function">java</span> <span class="token parameter variable">-X</span>
    <span class="token parameter variable">-Xmixed</span>           混合模式执行 <span class="token punctuation">(</span>默认<span class="token punctuation">)</span>
    <span class="token parameter variable">-Xint</span>             仅解释模式执行
    -Xbootclasspath:<span class="token operator">&lt;</span>用 <span class="token punctuation">;</span> 分隔的目录和 zip/jar 文件<span class="token operator">&gt;</span>
                      设置搜索路径以引导类和资源
    -Xbootclasspath/a:<span class="token operator">&lt;</span>用 <span class="token punctuation">;</span> 分隔的目录和 zip/jar 文件<span class="token operator">&gt;</span>
                      附加在引导类路径末尾
    -Xbootclasspath/p:<span class="token operator">&lt;</span>用 <span class="token punctuation">;</span> 分隔的目录和 zip/jar 文件<span class="token operator">&gt;</span>
                      置于引导类路径之前
    <span class="token parameter variable">-Xdiag</span>            显示附加诊断消息
    <span class="token parameter variable">-Xnoclassgc</span>       禁用类垃圾收集
    <span class="token parameter variable">-Xincgc</span>           启用增量垃圾收集
    -Xloggc:<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>    将 GC 状态记录在文件中 <span class="token punctuation">(</span>带时间戳<span class="token punctuation">)</span>
    <span class="token parameter variable">-Xbatch</span>           禁用后台编译
    -Xms<span class="token operator">&lt;</span>size<span class="token operator">&gt;</span>        设置初始 Java 堆大小
    -Xmx<span class="token operator">&lt;</span>size<span class="token operator">&gt;</span>        设置最大 Java 堆大小
    -Xss<span class="token operator">&lt;</span>size<span class="token operator">&gt;</span>        设置 Java 线程堆栈大小
    <span class="token parameter variable">-Xprof</span>            输出 cpu 配置文件数据
    <span class="token parameter variable">-Xfuture</span>          启用最严格的检查, 预期将来的默认值
    <span class="token parameter variable">-Xrs</span>              减少 Java/VM 对操作系统信号的使用 <span class="token punctuation">(</span>请参阅文档<span class="token punctuation">)</span>
    <span class="token parameter variable">-Xcheck:jni</span>       对 JNI 函数执行其他检查
    <span class="token parameter variable">-Xshare:off</span>       不尝试使用共享类数据
    <span class="token parameter variable">-Xshare:auto</span>      在可能的情况下使用共享类数据 <span class="token punctuation">(</span>默认<span class="token punctuation">)</span>
    <span class="token parameter variable">-Xshare:on</span>        要求使用共享类数据, 否则将失败。
    <span class="token parameter variable">-XshowSettings</span>    显示所有设置并继续
    <span class="token parameter variable">-XshowSettings:all</span>
                      显示所有设置并继续
    <span class="token parameter variable">-XshowSettings:vm</span> 显示所有与 vm 相关的设置并继续
    <span class="token parameter variable">-XshowSettings:properties</span>
                      显示所有属性设置并继续
    <span class="token parameter variable">-XshowSettings:locale</span>
                      显示所有与区域设置相关的设置并继续

<span class="token parameter variable">-X</span> 选项是非标准选项, 如有更改, 恕不另行通知。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何知道 JVM 默认使用的是混合模式呢？</p><p>同样地，通过 java -version 命令：可以看到 mixed mode 字样，代表当前系统使用的是混合模式</p><h3 id="_4-1-3-类型三-xx-参数选项" tabindex="-1"><a class="header-anchor" href="#_4-1-3-类型三-xx-参数选项" aria-hidden="true">#</a> 4.1.3. 类型三：-XX 参数选项</h3><p><strong>Boolean 类型格式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-XX:+<span class="token operator">&lt;</span>option<span class="token operator">&gt;</span>  启用option属性
-XX:-<span class="token operator">&lt;</span>option<span class="token operator">&gt;</span>  禁用option属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>非 Boolean 类型格式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-XX:<span class="token operator">&lt;</span>option<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>  设置option数值，可以带单位如k/K/m/M/g/G
-XX:<span class="token operator">&lt;</span>option<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>  设置option字符值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-添加-jvm-参数选项" tabindex="-1"><a class="header-anchor" href="#_4-2-添加-jvm-参数选项" aria-hidden="true">#</a> 4.2. 添加 JVM 参数选项</h2><p>eclipse 和 idea 中配置不必多说，在 Run Configurations 中 VM Options 中配置即可，大同小异</p><p><strong>运行 jar 包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-Xms100m</span> <span class="token parameter variable">-Xmx100m</span> <span class="token parameter variable">-XX:+PrintGCDetails</span> <span class="token parameter variable">-XX:+PrintGCDateStamps</span> <span class="token parameter variable">-XX:+PrintGCTimeStamps</span> <span class="token parameter variable">-jar</span> demo.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Tomcat 运行 war 包</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># linux下catalina.sh添加</span>
<span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms512M -Xmx1024M&quot;</span>
<span class="token comment"># windows下catalina.bat添加</span>
<span class="token builtin class-name">set</span> <span class="token string">&quot;JAVA_OPTS=-Xms512M -Xmx1024M&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>程序运行中</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置Boolean类型参数</span>
jinfo <span class="token parameter variable">-flag</span> <span class="token punctuation">[</span>+<span class="token operator">|</span>-<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span>
<span class="token comment"># 设置非Boolean类型参数</span>
jinfo <span class="token parameter variable">-flag</span> <span class="token operator">&lt;</span>name<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-常用的-jvm-参数选项" tabindex="-1"><a class="header-anchor" href="#_4-3-常用的-jvm-参数选项" aria-hidden="true">#</a> 4.3. 常用的 JVM 参数选项</h2><h3 id="_4-3-1-打印设置的-xx-选项及值" tabindex="-1"><a class="header-anchor" href="#_4-3-1-打印设置的-xx-选项及值" aria-hidden="true">#</a> 4.3.1. 打印设置的 XX 选项及值</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+PrintCommandLineFlags</span> 程序运行时JVM默认设置或用户手动设置的XX选项
<span class="token parameter variable">-XX:+PrintFlagsInitial</span> 打印所有XX选项的默认值
<span class="token parameter variable">-XX:+PrintFlagsFinal</span> 打印所有XX选项的实际值
<span class="token parameter variable">-XX:+PrintVMOptions</span> 打印JVM的参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-2-堆、栈、方法区等内存大小设置" tabindex="-1"><a class="header-anchor" href="#_4-3-2-堆、栈、方法区等内存大小设置" aria-hidden="true">#</a> 4.3.2. 堆、栈、方法区等内存大小设置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 栈</span>
<span class="token parameter variable">-Xss128k</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token parameter variable">-XX:ThreadStackSize</span><span class="token operator">=</span>128k 设置线程栈的大小为128K

<span class="token comment"># 堆</span>
<span class="token parameter variable">-Xms2048m</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token parameter variable">-XX:InitialHeapSize</span><span class="token operator">=</span>2048m 设置JVM初始堆内存为2048M
<span class="token parameter variable">-Xmx2048m</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token parameter variable">-XX:MaxHeapSize</span><span class="token operator">=</span>2048m 设置JVM最大堆内存为2048M
<span class="token parameter variable">-Xmn2g</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span>2g <span class="token parameter variable">-XX:MaxNewSize</span><span class="token operator">=</span>2g 设置年轻代大小为2G
<span class="token parameter variable">-XX:SurvivorRatio</span><span class="token operator">=</span><span class="token number">8</span> 设置Eden区与Survivor区的比值，默认为8
<span class="token parameter variable">-XX:NewRatio</span><span class="token operator">=</span><span class="token number">2</span> 设置老年代与年轻代的比例，默认为2
<span class="token parameter variable">-XX:+UseAdaptiveSizePolicy</span> 设置大小比例自适应，默认开启
<span class="token parameter variable">-XX:PretenureSizeThreadshold</span><span class="token operator">=</span><span class="token number">1024</span> 设置让大于此阈值的对象直接分配在老年代，只对Serial、ParNew收集器有效
<span class="token parameter variable">-XX:MaxTenuringThreshold</span><span class="token operator">=</span><span class="token number">15</span> 设置新生代晋升老年代的年龄限制，默认为15
<span class="token parameter variable">-XX:TargetSurvivorRatio</span> 设置MinorGC结束后Survivor区占用空间的期望比例

<span class="token comment"># 方法区</span>
<span class="token parameter variable">-XX:MetaspaceSize</span> / <span class="token parameter variable">-XX:PermSize</span><span class="token operator">=</span>256m 设置元空间/永久代初始值为256M
<span class="token parameter variable">-XX:MaxMetaspaceSize</span> / <span class="token parameter variable">-XX:MaxPermSize</span><span class="token operator">=</span>256m 设置元空间/永久代最大值为256M
<span class="token parameter variable">-XX:+UseCompressedOops</span> 使用压缩对象
<span class="token parameter variable">-XX:+UseCompressedClassPointers</span> 使用压缩类指针
<span class="token parameter variable">-XX:CompressedClassSpaceSize</span> 设置Klass Metaspace的大小，默认1G

<span class="token comment"># 直接内存</span>
<span class="token parameter variable">-XX:MaxDirectMemorySize</span> 指定DirectMemory容量，默认等于Java堆最大值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-3-outofmemory-相关的选项" tabindex="-1"><a class="header-anchor" href="#_4-3-3-outofmemory-相关的选项" aria-hidden="true">#</a> 4.3.3. OutOfMemory 相关的选项</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+HeapDumpOnOutMemoryError</span> 内存出现OOM时生成Heap转储文件，两者互斥
<span class="token parameter variable">-XX:+HeapDumpBeforeFullGC</span> 出现FullGC时生成Heap转储文件，两者互斥
<span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> 指定heap转储文件的存储路径，默认当前目录
<span class="token parameter variable">-XX:OnOutOfMemoryError</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span> 指定可行性程序或脚本的路径，当发生OOM时执行脚本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-4-垃圾收集器相关选项" tabindex="-1"><a class="header-anchor" href="#_4-3-4-垃圾收集器相关选项" aria-hidden="true">#</a> 4.3.4. 垃圾收集器相关选项</h3><p>首先需了解垃圾收集器之间的搭配使用关系</p><ul><li>红色虚线表示在 jdk8 时被 Deprecate，jdk9 时被删除</li><li>绿色虚线表示在 jdk14 时被 Deprecate</li><li>绿色虚框表示在 jdk9 时被 Deprecate，jdk14 时被删除</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/46dec5b346fcc5b147491481787ea8ec.png" alt="image-20210506182458663" tabindex="0" loading="lazy"><figcaption>image-20210506182458663</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Serial回收器</span>
<span class="token parameter variable">-XX:+UseSerialGC</span>  年轻代使用Serial GC， 老年代使用Serial Old GC
<span class="token comment"># ParNew回收器</span>
<span class="token parameter variable">-XX:+UseParNewGC</span>  年轻代使用ParNew GC
<span class="token parameter variable">-XX:ParallelGCThreads</span>  设置年轻代并行收集器的线程数。
	一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>$$ ParallelGCThreads = \\begin{cases} CPU_Count &amp; \\text (CPU_Count &lt;= 8) \\ 3 + (5 * CPU＿Count / 8) &amp; \\text (CPU_Count &gt; 8) \\end{cases} $$</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Parallel回收器</span>
<span class="token parameter variable">-XX:+UseParallelGC</span>  年轻代使用 Parallel Scavenge GC，互相激活
<span class="token parameter variable">-XX:+UseParallelOldGC</span>  老年代使用 Parallel Old GC，互相激活
<span class="token parameter variable">-XX:ParallelGCThreads</span>
<span class="token parameter variable">-XX:MaxGCPauseMillis</span>  设置垃圾收集器最大停顿时间（即STW的时间），单位是毫秒。
	为了尽可能地把停顿时间控制在MaxGCPauseMills以内，收集器在工作时会调整Java堆大小或者其他一些参数。
	对于用户来讲，停顿时间越短体验越好；但是服务器端注重高并发，整体的吞吐量。
	所以服务器端适合Parallel，进行控制。该参数使用需谨慎。
<span class="token parameter variable">-XX:GCTimeRatio</span>  垃圾收集时间占总时间的比例（1 / <span class="token punctuation">(</span>N＋1<span class="token punctuation">)</span>），用于衡量吞吐量的大小
	取值范围（0,100），默认值99，也就是垃圾回收时间不超过1％。
	与前一个-XX：MaxGCPauseMillis参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。
<span class="token parameter variable">-XX:+UseAdaptiveSizePolicy</span>  设置Parallel Scavenge收集器具有自适应调节策略。
	在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。
	在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMills），让虚拟机自己完成调优工作。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># CMS回收器</span>
<span class="token parameter variable">-XX:+UseConcMarkSweepGC</span>  年轻代使用CMS GC。
	开启该参数后会自动将-XX：＋UseParNewGC打开。即：ParNew（Young区）+ CMS（Old区）+ Serial Old的组合
<span class="token parameter variable">-XX:CMSInitiatingOccupanyFraction</span>  设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。JDK5及以前版本的默认值为68，DK6及以上版本默认值为92％。
	如果内存增长缓慢，则可以设置一个稍大的值，大的阈值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。
	反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。
	因此通过该选项便可以有效降低Fu1l GC的执行次数。
<span class="token parameter variable">-XX:+UseCMSInitiatingOccupancyOnly</span>  是否动态可调，使CMS一直按CMSInitiatingOccupancyFraction设定的值启动
<span class="token parameter variable">-XX:+UseCMSCompactAtFullCollection</span>  用于指定在执行完Full GC后对内存空间进行压缩整理
	以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。
<span class="token parameter variable">-XX:CMSFullGCsBeforeCompaction</span>  设置在执行多少次Full GC后对内存空间进行压缩整理。
<span class="token parameter variable">-XX:ParallelCMSThreads</span>  设置CMS的线程数量。
	CMS 默认启动的线程数是<span class="token punctuation">(</span>ParallelGCThreads＋3<span class="token punctuation">)</span>/4，ParallelGCThreads 是年轻代并行收集器的线程数。
	当CPU 资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。
<span class="token parameter variable">-XX:ConcGCThreads</span>  设置并发垃圾收集的线程数，默认该值是基于ParallelGCThreads计算出来的
<span class="token parameter variable">-XX:+CMSScavengeBeforeRemark</span>  强制hotspot在cms remark阶段之前做一次minor gc，用于提高remark阶段的速度
<span class="token parameter variable">-XX:+CMSClassUnloadingEnable</span>  如果有的话，启用回收Perm 区（JDK8之前）
<span class="token parameter variable">-XX:+CMSParallelInitialEnabled</span>  用于开启CMS initial-mark阶段采用多线程的方式进行标记
	用于提高标记速度，在Java8开始已经默认开启
<span class="token parameter variable">-XX:+CMSParallelRemarkEnabled</span>  用户开启CMS remark阶段采用多线程的方式进行重新标记，默认开启
<span class="token parameter variable">-XX:+ExplicitGCInvokesConcurrent</span>
<span class="token parameter variable">-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses</span>
	这两个参数用户指定hotspot虚拟在执行System.gc<span class="token punctuation">(</span><span class="token punctuation">)</span>时使用CMS周期
<span class="token parameter variable">-XX:+CMSPrecleaningEnabled</span>  指定CMS是否需要进行Pre cleaning阶段
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># G1回收器</span>
<span class="token parameter variable">-XX:+UseG1GC</span> 手动指定使用G1收集器执行内存回收任务。
<span class="token parameter variable">-XX:G1HeapRegionSize</span> 设置每个Region的大小。
	值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。
<span class="token parameter variable">-XX:MaxGCPauseMillis</span>  设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms
<span class="token parameter variable">-XX:ParallelGCThread</span>  设置STW时GC线程数的值。最多设置为8
<span class="token parameter variable">-XX:ConcGCThreads</span>  设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1/4左右。
<span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span> 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。
<span class="token parameter variable">-XX:G1NewSizePercent</span>  新生代占用整个堆内存的最小百分比（默认5％）
<span class="token parameter variable">-XX:G1MaxNewSizePercent</span>  新生代占用整个堆内存的最大百分比（默认60％）
<span class="token parameter variable">-XX:G1ReservePercent</span><span class="token operator">=</span><span class="token number">10</span>  保留内存区域，防止 to space（Survivor中的to区）溢出
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么选择垃圾回收器？</p><ul><li>优先让 JVM 自适应，调整堆的大小</li><li>串行收集器：内存小于 100M；单核、单机程序，并且没有停顿时间的要求</li><li>并行收集器：多 CPU、高吞吐量、允许停顿时间超过 1 秒</li><li>并发收集器：多 CPU、追求低停顿时间、快速响应（比如延迟不能超过 1 秒，如互联网应用）</li><li>官方推荐 G1，性能高。现在互联网的项目，基本都是使用 G1</li></ul><p>特别说明：</p><ul><li>没有最好的收集器，更没有万能的收集器</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ul><h3 id="_4-3-5-gc-日志相关选项" tabindex="-1"><a class="header-anchor" href="#_4-3-5-gc-日志相关选项" aria-hidden="true">#</a> 4.3.5. GC 日志相关选项</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+PrintGC</span> <span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token parameter variable">-verbose:gc</span>  打印简要日志信息
<span class="token parameter variable">-XX:+PrintGCDetails</span>            打印详细日志信息
<span class="token parameter variable">-XX:+PrintGCTimeStamps</span>  打印程序启动到GC发生的时间，搭配-XX:+PrintGCDetails使用
<span class="token parameter variable">-XX:+PrintGCDateStamps</span>  打印GC发生时的时间戳，搭配-XX:+PrintGCDetails使用
<span class="token parameter variable">-XX:+PrintHeapAtGC</span>  打印GC前后的堆信息，如下图
-Xloggc:<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> 输出GC导指定路径下的文件中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/9f323dd9b55235ed0a33e6a0af8adbca.png" alt="image-20210506195156935" tabindex="0" loading="lazy"><figcaption>image-20210506195156935</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+TraceClassLoading</span>  监控类的加载
<span class="token parameter variable">-XX:+PrintGCApplicationStoppedTime</span>  打印GC时线程的停顿时间
<span class="token parameter variable">-XX:+PrintGCApplicationConcurrentTime</span>  打印垃圾收集之前应用未中断的执行时间
<span class="token parameter variable">-XX:+PrintReferenceGC</span> 打印回收了多少种不同引用类型的引用
<span class="token parameter variable">-XX:+PrintTenuringDistribution</span>  打印JVM在每次MinorGC后当前使用的Survivor中对象的年龄分布
<span class="token parameter variable">-XX:+UseGCLogFileRotation</span> 启用GC日志文件的自动转储
<span class="token parameter variable">-XX:NumberOfGCLogFiles</span><span class="token operator">=</span><span class="token number">1</span>  设置GC日志文件的循环数目
<span class="token parameter variable">-XX:GCLogFileSize</span><span class="token operator">=</span>1M  设置GC日志文件的大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-6-其他参数" tabindex="-1"><a class="header-anchor" href="#_4-3-6-其他参数" aria-hidden="true">#</a> 4.3.6. 其他参数</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-XX:+DisableExplicitGC</span>  禁用hotspot执行System.gc<span class="token punctuation">(</span><span class="token punctuation">)</span>，默认禁用
<span class="token parameter variable">-XX:ReservedCodeCacheSize</span><span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">[</span>g<span class="token operator">|</span>m<span class="token operator">|</span>k<span class="token punctuation">]</span>、-XX:InitialCodeCacheSize<span class="token operator">=</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">[</span>g<span class="token operator">|</span>m<span class="token operator">|</span>k<span class="token punctuation">]</span>  指定代码缓存的大小
<span class="token parameter variable">-XX:+UseCodeCacheFlushing</span>  放弃一些被编译的代码，避免代码缓存被占满时JVM切换到interpreted-only的情况
<span class="token parameter variable">-XX:+DoEscapeAnalysis</span>  开启逃逸分析
<span class="token parameter variable">-XX:+UseBiasedLocking</span>  开启偏向锁
<span class="token parameter variable">-XX:+UseLargePages</span>  开启使用大页面
<span class="token parameter variable">-XX:+PrintTLAB</span>  打印TLAB的使用情况
<span class="token parameter variable">-XX:TLABSize</span>  设置TLAB大小
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-通过-java-代码获取-jvm-参数" tabindex="-1"><a class="header-anchor" href="#_4-4-通过-java-代码获取-jvm-参数" aria-hidden="true">#</a> 4.4. 通过 Java 代码获取 JVM 参数</h2><p>Java 提供了 java.lang.management 包用于监视和管理 Java 虚拟机和 Java 运行时中的其他组件，它允许本地或远程监控和管理运行的 Java 虚拟机。其中 ManagementFactory 类较为常用，另外 Runtime 类可获取内存、CPU 核数等相关的数据。通过使用这些 api，可以监控应用服务器的堆内存使用情况，设置一些阈值进行报警等处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryMonitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MemoryMXBean</span> memorymbean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getMemoryMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MemoryUsage</span> usage <span class="token operator">=</span> memorymbean<span class="token punctuation">.</span><span class="token function">getHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;INIT HEAP: &quot;</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MAX HEAP: &quot;</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;USE HEAP: &quot;</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nFull Information:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Heap Memory Usage: &quot;</span> <span class="token operator">+</span> memorymbean<span class="token punctuation">.</span><span class="token function">getHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Non-Heap Memory Usage: &quot;</span> <span class="token operator">+</span> memorymbean<span class="token punctuation">.</span><span class="token function">getNonHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======================通过java来获取相关系统状态============================ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前堆内存大小totalMemory &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前堆内存大小</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;空闲堆内存大小freeMemory &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 空闲堆内存大小</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最大可用总堆内存maxMemory &quot;</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最大可用总堆内存大小</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryMonitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MemoryMXBean</span> memorymbean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getMemoryMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MemoryUsage</span> usage <span class="token operator">=</span> memorymbean<span class="token punctuation">.</span><span class="token function">getHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;INIT HEAP: &quot;</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MAX HEAP: &quot;</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;USE HEAP: &quot;</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nFull Information:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Heap Memory Usage: &quot;</span> <span class="token operator">+</span> memorymbean<span class="token punctuation">.</span><span class="token function">getHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Non-Heap Memory Usage: &quot;</span> <span class="token operator">+</span> memorymbean<span class="token punctuation">.</span><span class="token function">getNonHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=======================通过java来获取相关系统状态============================ &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前堆内存大小totalMemory &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前堆内存大小</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;空闲堆内存大小freeMemory &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 空闲堆内存大小</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最大可用总堆内存maxMemory &quot;</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最大可用总堆内存大小</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-分析-gc-日志" tabindex="-1"><a class="header-anchor" href="#_5-分析-gc-日志" aria-hidden="true">#</a> 5. 分析 GC 日志</h1><h2 id="_5-1-gc-分类" tabindex="-1"><a class="header-anchor" href="#_5-1-gc-分类" aria-hidden="true">#</a> 5.1. GC 分类</h2><p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p><ul><li><p>部分收集（Partial GC）：不是完整收集整个 Java 堆的垃圾收集。其中又分为：</p><ul><li>新生代收集（Minor GC / Young GC）：只是新生代（Eden / S0, S1）的垃圾收集</li><li>老年代收集（Major GC / Old GC）：只是老年代的垃圾收集。目前，只有 CMS GC 会有单独收集老年代的行为。<mark>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。</mark></li></ul></li><li><p>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有 G1 GC 会有这种行为</p></li><li><p>整堆收集（Full GC）：收集整个 java 堆和方法区的垃圾收集。</p></li></ul><h2 id="_5-2-gc-日志分类" tabindex="-1"><a class="header-anchor" href="#_5-2-gc-日志分类" aria-hidden="true">#</a> 5.2. GC 日志分类</h2><p><strong>MinorGC</strong></p><p>MinorGC（或 young GC 或 YGC）日志：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">31744</span>K<span class="token operator">-&gt;</span><span class="token number">2192</span>K <span class="token punctuation">(</span><span class="token number">36864</span>K<span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token number">31744</span>K<span class="token operator">-&gt;</span><span class="token number">2200</span>K <span class="token punctuation">(</span><span class="token number">121856</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0139308</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.05</span> sys<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/df81757685ca21a927d9335273f561c5.png" alt="image-20210506202126562" tabindex="0" loading="lazy"><figcaption>image-20210506202126562</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/b9a7575380bcdb91b54c0556557d8ad9.png" alt="image-20210506202156090" tabindex="0" loading="lazy"><figcaption>image-20210506202156090</figcaption></figure><p><strong>FullGC</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">5104</span>K<span class="token operator">-&gt;</span><span class="token number">0</span>K <span class="token punctuation">(</span><span class="token number">132096</span>K<span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Par01dGen</span><span class="token operator">:</span> <span class="token number">416</span>K<span class="token operator">-&gt;</span><span class="token number">5453</span>K <span class="token punctuation">(</span><span class="token number">50176</span>K<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token number">5520</span>K<span class="token operator">-&gt;</span><span class="token number">5453</span>K <span class="token punctuation">(</span><span class="token number">182272</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name">Metaspace</span><span class="token operator">:</span> <span class="token number">20637</span>K<span class="token operator">-&gt;</span><span class="token number">20637</span>K <span class="token punctuation">(</span><span class="token number">1067008</span>K<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0245883</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.06</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.02</span> secs<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/0dcb239f0928bc374ac1b376b4189295.png" alt="image-20210506202330868" tabindex="0" loading="lazy"><figcaption>image-20210506202330868</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/7817f28a52c836d5ed08a4b992823f64.png" alt="image-20210506202349072" tabindex="0" loading="lazy"><figcaption>image-20210506202349072</figcaption></figure><h2 id="_5-3-gc-日志结构剖析" tabindex="-1"><a class="header-anchor" href="#_5-3-gc-日志结构剖析" aria-hidden="true">#</a> 5.3. GC 日志结构剖析</h2><p><strong>透过日志看垃圾收集器</strong></p><ul><li><p>Serial 收集器：新生代显示 &quot;[DefNew&quot;，即 Default New Generation</p></li><li><p>ParNew 收集器：新生代显示 &quot;[ParNew&quot;，即 Parallel New Generation</p></li><li><p>Parallel Scavenge 收集器：新生代显示&quot;[PSYoungGen&quot;，JDK1.7 使用的即 PSYoungGen</p></li><li><p>Parallel Old 收集器：老年代显示&quot;[ParoldGen&quot;</p></li><li><p>G1 收集器：显示”garbage-first heap“</p></li></ul><p><strong>透过日志看 GC 原因</strong></p><ul><li>Allocation Failure：表明本次引起 GC 的原因是因为新生代中没有足够的区域存放需要分配的数据</li><li>Metadata GCThreshold：Metaspace 区不够用了</li><li>FErgonomics：JVM 自适应调整导致的 GC</li><li>System：调用了 System.gc()方法</li></ul><p><strong>透过日志看 GC 前后情况</strong></p><p>通过图示，我们可以发现 GC 日志格式的规律一般都是：GC 前内存占用-＞ GC 后内存占用（该区域内存总大小）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">5986</span>K<span class="token operator">-&gt;</span><span class="token number">696</span>K <span class="token punctuation">(</span><span class="token number">8704</span>K<span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token number">5986</span>K<span class="token operator">-&gt;</span><span class="token number">704</span>K <span class="token punctuation">(</span><span class="token number">9216</span>K<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>中括号内：GC 回收前年轻代堆大小，回收后大小，（年轻代堆总大小）</p></li><li><p>括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p></li></ul><p><mark>注意</mark>：Minor GC 堆内存总容量 = 9/10 年轻代 + 老年代。原因是 Survivor 区只计算 from 部分，而 JVM 默认年轻代中 Eden 区和 Survivor 区的比例关系，Eden:S0:S1=8:1:1。</p><p><strong>透过日志看 GC 时间</strong></p><p>GC 日志中有三个时间：user，sys 和 real</p><ul><li>user：进程执行用户态代码（核心之外）所使用的时间。这是执行此进程所使用的实际 CPU 时间，其他进程和此进程阻塞的时间并不包括在内。在垃圾收集的情况下，表示 GC 线程执行所使用的 CPU 总时间。</li><li>sys：进程在内核态消耗的 CPU 时间，即在内核执行系统调用或等待系统事件所使用的 CPU 时间</li><li>real：程序从开始到结束所用的时钟时间。这个时间包括其他进程使用的时间片和进程阻塞的时间（比如等待 I/O 完成）。对于并行 gc，这个数字应该接近（用户时间＋系统时间）除以垃圾收集器使用的线程数。</li></ul><p>由于多核的原因，一般的 GC 事件中，real time 是小于 sys time ＋ user time 的，因为一般是多个线程并发的去做 GC，所以 real time 是要小于 sys ＋ user time 的。如果 real ＞ sys ＋ user 的话，则你的应用可能存在下列问题：IO 负载非常重或 CPU 不够用。</p><h2 id="_5-4-gc-日志分析工具" tabindex="-1"><a class="header-anchor" href="#_5-4-gc-日志分析工具" aria-hidden="true">#</a> 5.4. GC 日志分析工具</h2><p><strong>GCEasy</strong></p><p>GCEasy 是一款在线的 GC 日志分析器，可以通过 GC 日志分析进行内存泄露检测、GC 暂停原因分析、JVM 配置建议优化等功能，大多数功能是免费的。</p>`,81),F={href:"https://gceasy.io/",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,[n("strong",null,"GCViewer")],-1),K=n("p",null,"GCViewer 是一款离线的 GC 日志分析器，用于可视化 Java VM 选项 -verbose:gc 和 .NET 生成的数据 -Xloggc:<file>。还可以计算与垃圾回收相关的性能指标（吞吐量、累积的暂停、最长的暂停等）。当通过更改世代大小或设置初始堆大小来调整特定应用程序的垃圾回收时，此功能非常有用。",-1),B={href:"https://github.com/chewiebug/GCViewer",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/chewiebug/GCViewer/wiki/Changelog",target:"_blank",rel:"noopener noreferrer"},W=t(`<p><strong>GChisto</strong></p><ul><li>官网上没有下载的地方，需要自己从 SVN 上拉下来编译</li><li>不过这个工具似乎没怎么维护了，存在不少 bug</li></ul><p><strong>HPjmeter</strong></p><ul><li>工具很强大，但是只能打开由以下参数生成的 GC log，-verbose:gc -Xloggc:gc.log。添加其他参数生成的 gc.log 无法打开</li><li>HPjmeter 集成了以前的 HPjtune 功能，可以分析在 HP 机器上产生的垃圾回收日志文件</li></ul><h1 id="_6-调优案例" tabindex="-1"><a class="header-anchor" href="#_6-调优案例" aria-hidden="true">#</a> 6.调优案例</h1><h2 id="_6-1-oom案例" tabindex="-1"><a class="header-anchor" href="#_6-1-oom案例" aria-hidden="true">#</a> 6.1 OOM案例</h2><h3 id="堆溢出" tabindex="-1"><a class="header-anchor" href="#堆溢出" aria-hidden="true">#</a> 堆溢出</h3><p><strong>报错信息：</strong><code>java.lang.OutOfMemoryError：Java heap space</code></p><p><strong>案例模拟：</strong></p><p>建立一个SpringBoot项目，之后在某一个请求方法中，添加一个死循环，循环中不断的创建对象，并添加到集合当中。</p><p><strong>JVM参数配置：</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>初始-Xms30M-Xmx30M，改进之后调为200M
    

-XX:+PrintGCDetails -XX:MetaspaceSize=64m
-XX:+HeapDumpOnOutofMemoryError  -XX:HeapDumpPath=heap/heapdump.hprof
-XX:+PrintGCDateStamps -Xms200M -Xmx200M -Xloggc:log/gc-oomHeap.lo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>dump文件(堆转储文件)的生成方式</p><ol><li>手动 <ol><li><code>jmap -dump:format=b, file=&lt;filename.hpronf&gt; &lt;pid&gt;</code></li><li><code>jmap -dump:live,format=b, file=&lt;filename.hpronf&gt; &lt;pid&gt;</code></li></ol></li><li>自动 <ol><li><code>-XX:+HeapDumpOnOutOfMemoryError</code></li><li><code>-XX:HeapDumpPath=....</code></li></ol></li></ol></blockquote><p><strong>原因：</strong></p><ol><li>代码中可能存在大对象分配</li><li>可能存在内存泄漏，导致在多次GC之后，还是无法找到一块足够大的内存容纳当前对象。</li></ol><p><strong>解决方法：</strong></p><ol><li><p>检查是否存在大对象的分配，最有可能的是大数组分配</p></li><li><p>通过jmap命令，把堆命令dump下来，使用MAT等工具分析一下，检查是否存在内存泄露的问题。</p></li><li><p>如果没有找到明显的内存泄漏，使用-Xms加大堆的存储。</p></li><li><p>还有一点容易被忽略，检查是否有大量的自定义的<code>Finalizable</code>对象，也有可能是框架内部提供的，考虑其存在的必要性。</p><blockquote><p><code>Finalizable</code> 对象本身已经不可达了，但是还没有回收。</p></blockquote></li></ol><h3 id="元空间溢出" tabindex="-1"><a class="header-anchor" href="#元空间溢出" aria-hidden="true">#</a> 元空间溢出</h3><ul><li>方法区（MethodArea）与Java堆一样，是各个线程共享的内存域，它用于存储已被虚拟机加载的类信息、常量、即时编译器编译后的代码等数据。然ava虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</li><li>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。垃圾收集行为在这个区域是比较少出现的，<strong>其内存回收目标主要是针对常量池的回收和对类型的卸载</strong>。当方法区无法满足内存分配需求时，将抛出outofMemoryError异常。</li></ul><p><strong>报错信息：</strong><code>java.lang.OutOfMemoryError：MetaSpace</code></p><p><strong>案例模拟：</strong></p><p>建立一个SpringBoot项目，之后在某一个请求方法中，添加一个死循环，循环中通过Cglib不断的动态创建类。并设置<code>enchance.setUseCache(false)</code></p><p><strong>JVM参数配置：</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>-XX:+PrintGCDetails -XX:MetaspaceSize=6Om -XX:MaxMetaspaceSize=60m
-Xss512K -XX:+HeapDumponoutofMemoryError
-XX:HeapDumpPath=heap/heapdumpMeta.hprof  -XX:SurvivorRatio=8
-XX:+TraceClassLoading(类加载)  -XX:+TraceClassUnloading(类卸载)  -XX:+PrintGCDateStamps
-Xms60M -Xmx60M -Xloggc:log/gc-oomMeta.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因：</strong></p><ol><li>运行期间生成了大量的代理类，导致方法区被撑爆，无法卸载。</li><li>应用长时间运行，没有重启。</li><li>元空间内存设置过小。</li></ol><p><strong>解决方法：</strong></p><ol><li>检查永久代空间或者元空间设置的过小。</li><li>检查代码中是否存在大量的反射操作。</li><li>dump之后通过mat检查是否存在大量由于反射生成的代理类。</li></ol><p><code>enhancer.setusecache(false)</code>(选择true的话，使用和更新一类具有相同属性生成的类的静态缓存，而不出现同一个类文件还继续被动态加载并视为不同的类，这个其实跟类的equals（）和hashCode（）有关，它们是与cglib内部的classcache的key相关的。</p><h3 id="gc-overhead-limit-exceeded" tabindex="-1"><a class="header-anchor" href="#gc-overhead-limit-exceeded" aria-hidden="true">#</a> GC overhead limit exceeded</h3><p><strong>报错信息：</strong><code>java.lang.OutOfMemoryError：GC overhead limit exceeded</code></p><p><strong>案例模拟：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        test2();</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;************i: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                str <span class="token operator">+=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;************i: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test1</code>和<code>test2</code>方法运行之后报的错不一样。</p><p><code>test1</code>会出现<code>GC overhead limit exceeded</code></p><p><code>test2</code>会出现<code>heap</code></p><p><strong>JVM参数配置：</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>-XX:+PrintGcDetails -XX:+HeapDumponoutofMemoryError
-XX:HeapDumpPath=heap/dumpExceeded.hprof
-XX:+PrintGcDatestamps -Xms10M -Xmx10M
-Xloggc:log/gc-oomExceeded.lcg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因：</strong></p><blockquote><p>这个是JDK6新加的错误类型，一般都是堆太小导致的。Sun官方对此的定义：**超过98%的时间用来做GC，**并且回收了不到2%的堆内存时会抛出此异常，<strong>本质是一个预判性的异常</strong>，抛出异常时系统没有真正的内存溢出。</p></blockquote><p><code>test1</code>每次都无法回收，<code>test2</code>每次都可以回收.</p><p><strong>解决方法：</strong></p><p>1：检查项目中是否有大量的死循环或有使用大内存的代码，优化代码。 2，添加参数<code>-XX：-UseGcOverheadLimit</code>禁用这个检查，其实这个参数解决不了内存问题，只是把错误的信息延后，最终出现<code>java.lang.outofMemoryError：Java heapspace</code>。 3，dump内存，检查是否存在内存泄漏，如果没有，加大内存。</p><h3 id="线程溢出" tabindex="-1"><a class="header-anchor" href="#线程溢出" aria-hidden="true">#</a> 线程溢出</h3><p><strong>报错信息：</strong><code>java.lang.OutOfMemoryError：unable to create new native Thread</code></p><p><strong>案例模拟：</strong></p><ol><li>在win下疯狂的创建线程，导致电脑直接关机。</li><li>在linux下其实电脑也挂了 <ol><li><code>java -Xss1024 test.class </code>，输出了15000+多次之后，出现了<code>unable to create new native Thread</code>。</li><li><code>java -Xss512 test.class </code>，输出了15000+多次之后，出现了<code>unable to create new native Thread</code>。</li></ol></li></ol><p><strong>JVM参数配置：</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>-XX:+PrintGcDetails -XX:+HeapDumponoutofMemoryError
-XX:HeapDumpPath=heap/dumpExceeded.hprof
-XX:+PrintGcDatestamps -Xms10M -Xmx10M
-Xloggc:log/gc-oomExceeded.lcg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因：</strong></p><ul><li>JDK5.0之后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K</li><li>正常情况下，在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在300~5000左右。</li><li>能创建的线程数的具体计算公式如下： <code>(MaxProcessMemory - JVMMemory - ReservedosMemory) / (ThreadstackSize) = Number of threads</code><ul><li><code>MaxProcessMemory</code> 指的是进程可寻址的最大空间</li><li><code>JVMMemory </code> JVM内存(主要指堆空间)</li><li>ReservedosMemory 保留的操作系统内存(除了Java进程之外操作系统已使用的空间)</li><li>Threadstacksize 线程栈的大小</li></ul></li><li>在Java语言里，当你创建一个线程的时候，虚拟机会在JvM内存创建一个Thread对象同时创建一个操作系统线程，而这个系统线程的内存用的不是JVMMemory，而是系统中剩下的内存(MaxProcessMemory - JvMMemory - ReservedosMemory)。由公式得出结论：你给了VM内存越多，那么你能创建的线程越少，越容易发生。</li></ul><p><strong>解决方法：</strong></p><figure><img src="`+c+'" alt="image-20230304231300988" tabindex="0" loading="lazy"><figcaption>image-20230304231300988</figcaption></figure><figure><img src="'+r+'" alt="image-20230304231556717" tabindex="0" loading="lazy"><figcaption>image-20230304231556717</figcaption></figure><p>线程总数也受到系统空闲内存和操作系统的限制：检查是否该系统下有此限制：</p><ol><li>系统最大pid值，在大型系统里可适当调大<code>/proc/sys/kernel/pid_max</code></li><li>系统允许的最大线程数<code>proc/sys/kernel/threads-max</code><ol><li>可以修改</li></ol></li><li>系统限制某用户下最多可以运行多少进程或线程<code>maxuserprocess (ulimit -u)</code></li><li><code>./proc/sys/vm/max_map_count</code> maxmapcount文件包含限制一个进程可以拥有的VMA（虚拟内存区域）的数量。虚拟内存区域是一个连续的虚拟地址空间区域。在进程的生命周期中，每当程序尝试在内存中映射文件，链接到共享内存段，或者分配堆空间的时候，这些区域将被创建。调优这个值将限制进程可拥有VMA的数量。限制一个进程拥有VMA的总数可能导致应用程序出错，因为当进程达到了VMA上线但又只能释放少量的内存给其他的内核进程使用时，操作系统会抛出内存不足的错误。如果你的操作系统在NORMAL区域仅占用少量的内存，那么调低这个值可以帮助释放内存给内核用。</li></ol><figure><img src="'+u+`" alt="image-20230304231351211" tabindex="0" loading="lazy"><figcaption>image-20230304231351211</figcaption></figure><h2 id="_6-2-性能调优案例" tabindex="-1"><a class="header-anchor" href="#_6-2-性能调优案例" aria-hidden="true">#</a> 6.2 性能调优案例</h2><h3 id="jit优化" tabindex="-1"><a class="header-anchor" href="#jit优化" aria-hidden="true">#</a> JIT优化</h3><h4 id="堆-是分配对象的唯一选择吗" tabindex="-1"><a class="header-anchor" href="#堆-是分配对象的唯一选择吗" aria-hidden="true">#</a> 堆，是分配对象的唯一选择吗？</h4><p>在《深入理解Java虚拟机中》关于Java堆内存有这样一段描述：</p><blockquote><p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，<strong>栈上分配、标量替换优化技术将会导致一些微妙的变化</strong>，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（EscapeAnalysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。 此外，前面提到的基于OpenJDK深度定制的TaoBaoVM，其中创新的GCIH（GCinvisibleheap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且Gc不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p></blockquote><p>逃逸分析小结：逃逸分析并不成熟</p><ul><li>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1，6才有实现，而月这项技术到 如今也并不是十分成熟的。</li><li>其根本原因就是无法保证非逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析 可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分 析的，这其实也是一个相对耗时的过程。</li><li>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分 析的过程就白白浪费掉了。</li><li>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。 注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理 论上是可行的，但是取决于JVM设计者的选择。</li><li>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓 存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，让tern字 欲串缓存和静态变量并不是被转移到元数据区，而是接在堆上分配，所以这点同样欲 合前面一点的结论：对象实例都是分配在堆上。</li></ul><h4 id="编译的开销" tabindex="-1"><a class="header-anchor" href="#编译的开销" aria-hidden="true">#</a> 编译的开销</h4><p><strong>编译的时间开销：</strong> 解释器的执行，抽象的看是这样的：</p><ul><li><p><code>输入的代码-&gt;「解释器解释执行1-&gt;执行结果</code> JIT编译然后再执行的话，抽象的看则是：</p></li><li><p><code>输入的代码-&gt;「编译器编译1-&gt;编译后的代码-&gt;「执行1-&gt;执行结果</code> 注意：</p></li></ul><blockquote><p>说JIT比解释快，其实说的是“执行编译后的代码”比“解释器解释执行”要快，并不是说“编译”这个动作比“解释”这个动作快。JIT编译再怎么快，至少也比解释执行一次略慢些，而要得到最后的执行结果还得再经过一个“执行编译后的代码”的过程。所以，对“只执行一次”的代码而言，解释执行其实总是比JIT编译执行要快。怎么算是只执行一次的代码呢？粗略说，下面条件同时满足时就是严格的只执行一次。</p><ul><li>只被调用一次，例如类的构造器（classinitializer())</li><li>没有循环，对只执行一次的代码做JIT编译再执行，可以说是得不偿失。</li><li>对只执行少量次数的代码，JIT编译带来的执行速度的提升也未必能抵消掉最初编译带来的开销。</li></ul><p>只有对频繁执行的代码(热点代码)，JIT编译才能保证有正面的收益。</p></blockquote><p><strong>编译的空间开销：</strong></p><p>对一股的Java方法而言，编译后代码的大小相对于字节码的大小，膨胀比达到10+是很正常的。同上面说的时间开销一样，这里的空间开销也是，只有对执行锁繁的代码才值得编译，**如果把所有代码都编译则会显著增加代码所占空间，导致代码爆炸。**这也就解释了为什么有些JVM会选择不总是做JIT编译，而是选择用解释器+JIT编译器的混合执行引擎。</p><h4 id="即时编译对代码的优化" tabindex="-1"><a class="header-anchor" href="#即时编译对代码的优化" aria-hidden="true">#</a> 即时编译对代码的优化</h4><ul><li><p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p></li><li><p>逃逸分析（EscapeAnalysis）是目前Java虚拟机中比较前沿的优化技术。这是一种可以有效减少］ava程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</p></li><li><p>通过逃逸分析，JavaHotspot编译器能够分析出一个新的对象的引用的使用范围，从而决定是否要将这个对象分配到堆上。</p></li><li><p>逃逸分析的基本行为就是分析对象动态作用域：</p><ul><li><p>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</p></li><li><p>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">my_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>
    <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//usev</span>
    <span class="token comment">//.</span>
    v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h1 id="补充-浅堆深堆与内存泄露" tabindex="-1"><a class="header-anchor" href="#补充-浅堆深堆与内存泄露" aria-hidden="true">#</a> 补充：浅堆深堆与内存泄露</h1><h2 id="_1-浅堆-shallow-heap" tabindex="-1"><a class="header-anchor" href="#_1-浅堆-shallow-heap" aria-hidden="true">#</a> 1. 浅堆（Shallow Heap）</h2><p>浅堆是指一个对象所消耗的内存。在 32 位系统中，一个对象引用会占据 4 个字节，一个 int 类型会占据 4 个字节，long 型变量会占据 8 个字节，每个对象头需要占用 8 个字节。根据堆快照格式不同，对象的大小可能会同 8 字节进行对齐。</p><p>以 String 为例：2 个 int 值共占 8 字节，对象引用占用 4 字节，对象头 8 字节，合计 20 字节，向 8 字节对齐，故占 24 字节。（jdk7 中）</p><table><thead><tr><th>int</th><th>hash32</th><th>0</th></tr></thead><tbody><tr><td><strong>int</strong></td><td><strong>hash</strong></td><td><strong>0</strong></td></tr><tr><td><strong>ref</strong></td><td><strong>value</strong></td><td><strong>C:\\Users\\Administrat</strong></td></tr></tbody></table><p>这 24 字节为 String 对象的浅堆大小。它与 String 的 value 实际取值无关，无论字符串长度如何，浅堆大小始终是 24 字节。</p><h2 id="_2-保留集-retained-set" tabindex="-1"><a class="header-anchor" href="#_2-保留集-retained-set" aria-hidden="true">#</a> 2. 保留集（Retained Set）</h2><p>对象 A 的保留集指当对象 A 被垃圾回收后，可以被释放的所有的对象集合（包括对象 A 本身），即对象 A 的保留集可以被认为是只能通过对象 A 被直接或间接访问到的所有对象的集合。通俗地说，就是指仅被对象 A 所持有的对象的集合。</p><h2 id="_3-深堆-retained-heap" tabindex="-1"><a class="header-anchor" href="#_3-深堆-retained-heap" aria-hidden="true">#</a> 3. 深堆（Retained Heap）</h2><p>深堆是指对象的保留集中所有的对象的浅堆大小之和。</p><p>注意：浅堆指对象本身占用的内存，不包括其内部引用对象的大小。一个对象的深堆指只能通过该对象访问到的（直接或间接）所有对象的浅堆之和，即对象被回收后，可以释放的真实空间。</p><h2 id="_4-对象的实际大小" tabindex="-1"><a class="header-anchor" href="#_4-对象的实际大小" aria-hidden="true">#</a> 4. 对象的实际大小</h2><p>这里，对象的实际大小定义为一个对象所能触及的所有对象的浅堆大小之和，也就是通常意义上我们说的对象大小。与深堆相比，似乎这个在日常开发中更为直观和被人接受，但实际上，这个概念和垃圾回收无关。</p><p>下图显示了一个简单的对象引用关系图，对象 A 引用了 C 和 D，对象 B 引用了 C 和 E。那么对象 A 的浅堆大小只是 A 本身，不含 C 和 D，而 A 的实际大小为 A、C、D 三者之和。而 A 的深堆大小为 A 与 D 之和，由于对象 C 还可以通过对象 B 访问到，因此不在对象 A 的深堆范围内。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/ecc35ddfcfd13200bbc881333d38ac93.png" alt="image-20210505151123427" tabindex="0" loading="lazy"><figcaption>image-20210505151123427</figcaption></figure><h2 id="_5-支配树-dominator-tree" tabindex="-1"><a class="header-anchor" href="#_5-支配树-dominator-tree" aria-hidden="true">#</a> 5. 支配树（Dominator Tree）</h2><p>支配树的概念源自图论。MAT 提供了一个称为支配树（Dominator Tree）的对象图。支配树体现了对象实例间的支配关系。在对象引用图中，所有指向对象 B 的路径都经过对象 A，则认为对象 A 支配对象 B。如果对象 A 是离对象 B 最近的一个支配对象，则认为对象 A 为对象 B 的直接支配者。支配树是基于对象间的引用图所建立的，它有以下基本性质：</p><ul><li>对象 A 的子树（所有被对象 A 支配的对象集合）表示对象 A 的保留集（retained set），即深堆。</li><li>如果对象 A 支配对象 B，那么对象 A 的直接支配者也支配对象 B。</li><li>支配树的边与对象引用图的边不直接对应。</li></ul><p>如下图所示：左图表示对象引用图，右图表示左图所对应的支配树。对象 A 和 B 由根对象直接支配，由于在到对象 C 的路径中，可以经过 A，也可以经过 B，因此对象 C 的直接支配者也是根对象。对象 F 与对象 D 相互引用，因为到对象 F 的所有路径必然经过对象 D，因此，对象 D 是对象 F 的直接支配者。而到对象 D 的所有路径中，必然经过对象 C，即使是从对象 F 到对象 D 的引用，从根节点出发，也是经过对象 C 的，所以，对象 D 的直接支配者为对象 C。同理，对象 E 支配对象 G。到达对象 H 的可以通过对象 D，也可以通过对象 E，因此对象 D 和 E 都不能支配对象 H，而经过对象 C 既可以到达 D 也可以到达 E，因此对象 C 为对象 H 的直接支配者。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/4aea560be1feff266c7cb79c6a3a27ec.png" alt="image-20210505151951136" tabindex="0" loading="lazy"><figcaption>image-20210505151951136</figcaption></figure><h2 id="_6-内存泄漏-memory-leak" tabindex="-1"><a class="header-anchor" href="#_6-内存泄漏-memory-leak" aria-hidden="true">#</a> 6. 内存泄漏（memory leak）</h2><p>可达性分析算法来判断对象是否是不再使用的对象，本质都是判断一个对象是否还被引用。那么对于这种情况下，由于代码的实现不同就会出现很多种内存泄漏问题（让 JVM 误以为此对象还在引用中，无法回收，造成内存泄漏）。</p><p>＞ 是否还被使用？是</p><p>＞ 是否还被需要？否</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/d5715ef16f3d967f6a79c82909877c15.png" alt="image-20210505152542224" tabindex="0" loading="lazy"><figcaption>image-20210505152542224</figcaption></figure><p>严格来说，只有对象不会再被程序用到了，但是 GC 又不能回收他们的情况，才叫内存泄漏。但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致 00M，也可以叫做宽泛意义上的“内存泄漏”。</p><p>如下图，当 Y 生命周期结束的时候，X 依然引用着 Y，这时候，垃圾回收期是不会回收对象 Y 的；如果对象 X 还引用着生命周期比较短的 A、B、C，对象 A 又引用着对象 a、b、c，这样就可能造成大量无用的对象不能被回收，进而占据了内存资源，造成内存泄漏，直到内存溢出。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/98ee5c3507d1b8b73f4e12789728c56c.png" alt="image-20210505152704141" tabindex="0" loading="lazy"><figcaption>image-20210505152704141</figcaption></figure><p>申请了内存用完了不释放，比如一共有 1024M 的内存，分配了 512M 的内存一直不回收，那么可以用的内存只有 512M 了，仿佛泄露掉了一部分；通俗一点讲的话，内存泄漏就是【占着茅坑不拉 shi】</p><h2 id="_7-内存溢出-out-of-memory" tabindex="-1"><a class="header-anchor" href="#_7-内存溢出-out-of-memory" aria-hidden="true">#</a> 7. 内存溢出（out of memory）</h2><p>申请内存时，没有足够的内存可以使用；通俗一点儿讲，一个厕所就三个坑，有两个站着茅坑不走的（内存泄漏），剩下最后一个坑，厕所表示接待压力很大，这时候一下子来了两个人，坑位（内存）就不够了，内存泄漏变成内存溢出了。可见，内存泄漏和内存溢出的关系：内存泄漏的增多，最终会导致内存溢出。</p><p><mark>泄漏的分类</mark></p><ul><li>经常发生：发生内存泄露的代码会被多次执行，每次执行，泄露一块内存；</li><li>偶然发生：在某些特定情况下才会发生</li><li>一次性：发生内存泄露的方法只会执行一次；</li><li>隐式泄漏：一直占着内存不释放，直到执行结束；严格的说这个不算内存泄漏，因为最终释放掉了，但是如果执行时间特别长，也可能会导致内存耗尽。</li></ul><h2 id="_8-java-中内存泄露的-8-种情况" tabindex="-1"><a class="header-anchor" href="#_8-java-中内存泄露的-8-种情况" aria-hidden="true">#</a> 8. Java 中内存泄露的 8 种情况</h2><h3 id="_8-1-静态集合类" tabindex="-1"><a class="header-anchor" href="#_8-1-静态集合类" aria-hidden="true">#</a> 8.1. 静态集合类</h3><p>静态集合类，如 HashMap、LinkedList 等等。如果这些容器为静态的，那么它们的生命周期与 JVM 程序一致，则容器中的对象在程序结束之前将不能被释放，从而造成内存泄漏。简单而言，长生命周期的对象持有短生命周期对象的引用，尽管短生命周期的对象不再使用，但是因为长生命周期对象持有它的引用而导致不能被回收。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryLeak</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oomTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Object</span> obj＝<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-单例模式" tabindex="-1"><a class="header-anchor" href="#_8-2-单例模式" aria-hidden="true">#</a> 8.2. 单例模式</h3><p>单例模式，和静态集合导致内存泄露的原因类似，因为单例的静态特性，它的生命周期和 JVM 的生命周期一样长，所以如果单例对象如果持有外部对象的引用，那么这个外部对象也不会被回收，那么就会造成内存泄漏。</p><h3 id="_8-3-内部类持有外部类" tabindex="-1"><a class="header-anchor" href="#_8-3-内部类持有外部类" aria-hidden="true">#</a> 8.3. 内部类持有外部类</h3><p>内部类持有外部类，如果一个外部类的实例对象的方法返回了一个内部类的实例对象。这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持有外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄漏。</p><h3 id="_8-4-各种连接-如数据库连接、网络连接和-io-连接等" tabindex="-1"><a class="header-anchor" href="#_8-4-各种连接-如数据库连接、网络连接和-io-连接等" aria-hidden="true">#</a> 8.4. 各种连接，如数据库连接、网络连接和 IO 连接等</h3><p>在对数据库进行操作的过程中，首先需要建立与数据库的连接，当不再使用时，需要调用 close 方法来释放与数据库的连接。只有连接被关闭后，垃圾回收器才会回收对应的对象。否则，如果在访问数据库的过程中，对 Connection、Statement 或 ResultSet 不显性地关闭，将会造成大量的对象无法被回收，从而引起内存泄漏。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span><span class="token punctuation">{</span>
        <span class="token class-name">Connection</span> conn <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn <span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span>（<span class="token class-name">Exception</span> e）<span class="token punctuation">{</span><span class="token comment">//异常日志</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1．关闭结果集 Statement</span>
        <span class="token comment">// 2．关闭声明的对象 ResultSet</span>
        <span class="token comment">// 3．关闭连接 Connection</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5-变量不合理的作用域" tabindex="-1"><a class="header-anchor" href="#_8-5-变量不合理的作用域" aria-hidden="true">#</a> 8.5. 变量不合理的作用域</h3><p>变量不合理的作用域。一般而言，一个变量的定义的作用范围大于其使用范围，很有可能会造成内存泄漏。另一方面，如果没有及时地把对象设置为 null，很有可能导致内存泄漏的发生。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsingRandom</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">readFromNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从网络中接受数据保存到msg中</span>
        <span class="token function">saveDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把msg保存到数据库中</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面这个伪代码，通过 readFromNet 方法把接受的消息保存在变量 msg 中，然后调用 saveDB 方法把 msg 的内容保存到数据库中，此时 msg 已经就没用了，由于 msg 的生命周期与对象的生命周期相同，此时 msg 还不能回收，因此造成了内存泄漏。实际上这个 msg 变量可以放在 receiveMsg 方法内部，当方法使用完，那么 msg 的生命周期也就结束，此时就可以回收了。还有一种方法，在使用完 msg 后，把 msg 设置为 null，这样垃圾回收器也会回收 msg 的内存空间。</p><h3 id="_8-6-改变哈希值" tabindex="-1"><a class="header-anchor" href="#_8-6-改变哈希值" aria-hidden="true">#</a> 8.6. 改变哈希值</h3><p>改变哈希值，当一个对象被存储进 HashSet 集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了。</p><p>否则，对象修改后的哈希值与最初存储进 HashSet 集合中时的哈希值就不同了，在这种情况下，即使在 contains 方法使用该对象的当前引用作为的参数去 HashSet 集合中检索对象，也将返回找不到对象的结果，这也会导致无法从 HashSet 集合中单独删除当前对象，造成内存泄漏。</p><p>这也是 String 为什么被设置成了不可变类型，我们可以放心地把 String 存入 HashSet，或者把 String 当做 HashMap 的 key 值；</p><p>当我们想把自己定义的类保存到散列表的时候，需要保证对象的 hashCode 不可变。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 例1
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeHashCode</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">&quot;BB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;CC&quot;</span><span class="token punctuation">;</span><span class="token comment">//导致了内存的泄漏</span>
        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除失败</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>

        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>

        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> person<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> person<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> id<span class="token punctuation">;</span>
        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Person{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">&quot;, name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 例2
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeHashCode1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Point</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cc<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hashCode = 41</span>
        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>

        cc<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hashCode = 51  此行为导致了内存的泄漏</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hs.remove = &quot;</span> <span class="token operator">+</span> hs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hs.size = &quot;</span> <span class="token operator">+</span> hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//size = 2</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Point</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> other<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Point{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;x=&quot;</span> <span class="token operator">+</span> x <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-7-缓存泄露" tabindex="-1"><a class="header-anchor" href="#_8-7-缓存泄露" aria-hidden="true">#</a> 8.7. 缓存泄露</h3><p>内存泄漏的另一个常见来源是缓存，一旦你把对象引用放入到缓存中，他就很容易遗忘。比如：之前项目在一次上线的时候，应用启动奇慢直到夯死，就是因为代码中会加载一个表中的数据到缓存（内存）中，测试环境只有几百条数据，但是生产环境有几百万的数据。</p><p>对于这个问题，可以使用 WeakHashMap 代表缓存，此种 Map 的特点是，当除了自身有对 key 的引用外，此 key 没有其他引用那么此 map 会自动丢弃此值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Map</span> wMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testWeakHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> ref1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;obejct1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ref2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;obejct2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ref3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;obejct3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ref4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;obejct4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref1<span class="token punctuation">,</span> <span class="token string">&quot;cacheObject1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref2<span class="token punctuation">,</span> <span class="token string">&quot;cacheObject2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref3<span class="token punctuation">,</span> <span class="token string">&quot;cacheObject3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref4<span class="token punctuation">,</span> <span class="token string">&quot;cacheObject4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String引用ref1，ref2，ref3，ref4 消失&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testWeakHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WeakHashMap GC之前&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> wMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;WeakHashMap GC之后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> wMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HashMap GC之前&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HashMap GC之后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码和图示主演演示 WeakHashMap 如何自动释放缓存对象，当 init 函数执行完成后，局部变量字符串引用 weakd1，weakd2，d1，d2 都会消失，此时只有静态 map 中保存中对字符串对象的引用，可以看到，调用 gc 之后，HashMap 的没有被回收，而 WeakHashMap 里面的缓存被回收了。</p><h3 id="_8-8-监听器和其他回调" tabindex="-1"><a class="header-anchor" href="#_8-8-监听器和其他回调" aria-hidden="true">#</a> 8.8. 监听器和其他回调</h3><p>内存泄漏第三个常见来源是监听器和其他回调，如果客户端在你实现的 API 中注册回调，却没有显示的取消，那么就会积聚。</p><p>需要确保回调立即被当作垃圾回收的最佳方法是只保存它的弱引用，例如将他们保存成为 WeakHashMap 中的键。</p><h2 id="_9-内存泄露案例分析" tabindex="-1"><a class="header-anchor" href="#_9-内存泄露案例分析" aria-hidden="true">#</a> 9. 内存泄露案例分析</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//入栈</span>
        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elements<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//出栈</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">==</span> size<span class="token punctuation">)</span>
            elements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述程序并没有明显的错误，但是这段程序有一个内存泄漏，随着 GC 活动的增加，或者内存占用的不断增加，程序性能的降低就会表现出来，严重时可导致内存泄漏，但是这种失败情况相对较少。</p><p>代码的主要问题在 pop 函数，下面通过这张图示展现。假设这个栈一直增长，增长后如下图所示</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/36134d739f40208bf54a0b5c89a8f882.png" alt="image-20210505160114618" tabindex="0" loading="lazy"><figcaption>image-20210505160114618</figcaption></figure><p>当进行大量的 pop 操作时，由于引用未进行置空，gc 是不会释放的，如下图所示</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/52eed9c8a0279db4b1f07fd23c0d5eca.png" alt="image-20210505160158618" tabindex="0" loading="lazy"><figcaption>image-20210505160158618</figcaption></figure><p>从上图中看以看出，如果栈先增长，再收缩，那么从栈中弹出的对象将不会被当作垃圾回收，即使程序不再使用栈中的这些队象，他们也不会回收，因为栈中仍然保存这对象的引用，俗称过期引用，这个内存泄露很隐蔽。</p><p>将代码中的 pop()方法变成如下方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
    elements<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦引用过期，清空这些引用，将引用置空。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/513c31471d30b0458114859524c35adc.png" alt="image-20210505160423289" tabindex="0" loading="lazy"><figcaption>image-20210505160423289</figcaption></figure><hr><h1 id="补充-使用-oql-语言查询对象信息" tabindex="-1"><a class="header-anchor" href="#补充-使用-oql-语言查询对象信息" aria-hidden="true">#</a> 补充：使用 OQL 语言查询对象信息</h1><p>MAT 支持一种类似于 SQL 的查询语言 OQL（Object Query Language）。OQL 使用类 SQL 语法，可以在堆中进行对象的查找和筛选。</p><h2 id="_1-select-子句" tabindex="-1"><a class="header-anchor" href="#_1-select-子句" aria-hidden="true">#</a> 1. SELECT 子句</h2><p>在 MAT 中，Select 子句的格式与 SQL 基本一致，用于指定要显示的列。Select 子句中可以使用“＊”，查看结果对象的引用实例（相当于 outgoing references）。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用“OBJECTS”关键字，可以将返回结果集中的项以对象的形式显示。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> objects v<span class="token punctuation">.</span>elementData <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v

<span class="token keyword">SELECT</span> OBJECTS s<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Select 子句中，使用“AS RETAINED SET”关键字可以得到所得对象的保留集。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">AS</span> RETAINED <span class="token keyword">SET</span> <span class="token operator">*</span><span class="token keyword">FROM</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mat<span class="token punctuation">.</span>Student
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>“DISTINCT”关键字用于在结果集中去除重复对象。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> OBJECTS classof<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-from-子句" tabindex="-1"><a class="header-anchor" href="#_2-from-子句" aria-hidden="true">#</a> 2. FROM 子句</h2><p>From 子句用于指定查询范围，它可以指定类名、正则表达式或者对象地址。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用正则表达式，限定搜索范围，输出所有 com.atguigu 包下所有类的实例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&quot;com\\.atguigu\\..*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用类的地址进行搜索。使用类的地址的好处是可以区分被不同 ClassLoader 加载的同一种类型。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">0x37a0b4d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-where-子句" tabindex="-1"><a class="header-anchor" href="#_3-where-子句" aria-hidden="true">#</a> 3. WHERE 子句</h2><p>Where 子句用于指定 OQL 的查询条件。OQL 查询将只返回满足 Where 子句指定条件的对象。Where 子句的格式与传统 SQL 极为相似。</p><p>返回长度大于 10 的 char 数组。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> Ichar<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token keyword">WHERE</span> s<span class="token punctuation">.</span><span class="token variable">@length</span><span class="token operator">&gt;</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回包含“java”子字符串的所有字符串，使用“LIKE”操作符，“LIKE”操作符的操作参数为正则表达式。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> toString<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">&quot;.*java.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回所有 value 域不为 null 的字符串，使用“＝”操作符。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">where</span> s<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token operator">!=</span><span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回数组长度大于 15，并且深堆大于 1000 字节的所有 Vector 对象。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v <span class="token keyword">WHERE</span> v<span class="token punctuation">.</span>elementData<span class="token punctuation">.</span><span class="token variable">@length</span><span class="token operator">&gt;</span><span class="token number">15</span> <span class="token operator">AND</span> v<span class="token punctuation">.</span><span class="token variable">@retainedHeapSize</span><span class="token operator">&gt;</span><span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-内置对象与方法" tabindex="-1"><a class="header-anchor" href="#_4-内置对象与方法" aria-hidden="true">#</a> 4. 内置对象与方法</h2><p>OQL 中可以访问堆内对象的属性，也可以访问堆内代理对象的属性。访问堆内对象的属性时，格式如下，其中 alias 为对象名称：</p><p>[ &lt;alias&gt;. ] &lt;field&gt; . &lt;field&gt;. &lt;field&gt;</p><p>访问 java.io.File 对象的 path 属性，并进一步访问 path 的 value 属性：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> toString<span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token keyword">File</span> f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示 String 对象的内容、objectid 和 objectAddress。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token variable">@objectId</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token variable">@objectAddress</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示 java.util.Vector 内部数组的长度。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> v<span class="token punctuation">.</span>elementData<span class="token punctuation">.</span><span class="token variable">@length</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示所有的 java.util.Vector 对象及其子类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> INSTANCEOF java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,187);function Y(Q,$){const s=o("ExternalLinkIcon");return l(),i("div",null,[k,n("p",null,[a("官方源码地址："),n("a",m,[a("http://hg.openjdk.java.net/jdk/jdk11/file/1ddf9a99e4ad/src/jdk.jcmd/share/classes/sun/tools"),e(s)])]),v,n("p",null,[a("官方文档："),n("a",g,[a("https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html"),e(s)])]),b,n("p",null,[a("官方帮助文档："),n("a",h,[a("https://docs.oracle.com/en/java/javase/11/tools/jmap.html"),e(s)])]),f,n("p",null,[a("官方帮助文档："),n("a",y,[a("https://docs.oracle.com/en/java/javase/11/tools/jstack.html"),e(s)])]),x,n("p",null,[a("官方帮助文档："),n("a",j,[a("https://docs.oracle.com/en/java/javase/11/tools/jcmd.html"),e(s)])]),M,n("p",null,[a("官方地址："),n("a",C,[a("https://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html"),e(s)])]),X,n("p",null,[a("官方地址："),n("a",w,[a("https://visualvm.github.io/index.html"),e(s)])]),_,n("p",null,[a("官方地址： "),n("a",S,[a("https://www.eclipse.org/mat/downloads.php"),e(s)])]),J,n("p",null,[a("官网地址："),n("a",G,[a("https://www.ej-technologies.com/products/jprofiler/overview.html"),e(s)])]),q,n("p",null,[a("官方地址："),n("a",P,[a("https://arthas.aliyun.com/doc/quick-start.html"),e(s)])]),T,n("p",null,[a("官方地址："),n("a",V,[a("https://github.com/JDKMissionControl/jmc"),e(s)])]),D,n("p",null,[a("网上的关于 Java 火焰图的讲解大部分来自于 Brenden Gregg 的博客 "),n("a",A,[a("http://new.brendangregg.com/flamegraphs.html "),e(s)])]),E,n("p",null,[a("官方地址："),n("a",z,[a("http://github.com/alibaba/Tprofiler"),e(s)])]),O,n("p",null,[a("官网地址："),n("a",U,[a("https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html"),e(s)])]),I,n("p",null,[a("官网地址："),n("a",H,[a("https://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html"),e(s)])]),R,n("p",null,[a("官网地址："),n("a",F,[a("https://gceasy.io/"),e(s)])]),L,K,n("p",null,[a("源码下载："),n("a",B,[a("https://github.com/chewiebug/GCViewer"),e(s)])]),n("p",null,[a("运行版本下载："),n("a",N,[a("https://github.com/chewiebug/GCViewer/wiki/Changelog"),e(s)])]),W])}const an=p(d,[["render",Y],["__file","JVM下.html.vue"]]);export{an as default};
