import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-2Xbp2Heq.js";const t={},e=p(`<h1 id="spring面试专题" tabindex="-1"><a class="header-anchor" href="#spring面试专题" aria-hidden="true">#</a> Spring面试专题</h1><h1 id="_1-介绍下spring的初始化过程" tabindex="-1"><a class="header-anchor" href="#_1-介绍下spring的初始化过程" aria-hidden="true">#</a> 1.介绍下Spring的初始化过程</h1><p>  Spring的初始化过程中会走refresh方法，这是个模板模式的实现，包含有如下的14个方法</p><figure><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648877365000/49095613fd85496aa8daeff55da04425.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>每个方法的相关作用</p><figure><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648877365000/b15b3ca64abe4bbb8066973afe27270c.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>把每个方法的作用按照这个图介绍下就可以了</p><h1 id="_2-配置文件的加载解析" tabindex="-1"><a class="header-anchor" href="#_2-配置文件的加载解析" aria-hidden="true">#</a> 2.配置文件的加载解析</h1><p>  Spring初始化的时候在obtainFreshBeanFactory方法中完成了配置文件的加载解析，并把解析的bean标签信息封装到了BeanDefinition对象中，所有的解析的BeanDefinition对象都存储在了DefaultListableBeanFactory对象的beanDefinitionMap的Map集合中。</p><h1 id="_3-介绍下spring中常用的注解" tabindex="-1"><a class="header-anchor" href="#_3-介绍下spring中常用的注解" aria-hidden="true">#</a> 3.介绍下Spring中常用的注解</h1><p>  @Controller,@Service,@Repository 这些日常开发中常用的注解没啥挑战，@Import注解会让面试官眼前一亮。</p><p>@Import注解本身的由来是在Spring3.0的时候由xml文件的方式向注解编程的发展，替换以前在配置文件中的/<code>&lt;import&gt;标签</code> ，也就是可以导入其他的配置类，然后@Import注解还扩展了对应的功能</p><p>静态注入：可以直接把对应的类型注入到容器中:@Import(User.class)</p><p>动态注入：可以实现ImportSelector接口和ImportBeanDefinitionRegistrar接口，然后通过重写对应的方法来实现动态的注入</p><p>当然在ImportSelector接口的实现还可以触发延迟加载的逻辑。DeferredImportSelector，这块在SpringBoot的自动装配中就应用到了</p><h1 id="_4-springboot-的自动装配原理" tabindex="-1"><a class="header-anchor" href="#_4-springboot-的自动装配原理" aria-hidden="true">#</a> 4.SpringBoot 的自动装配原理</h1><p>  </p><figure><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648877365000/48daa416341d4a5a9a3369395a3e527f.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h1 id="_5-介绍下springboot的启动流程" tabindex="-1"><a class="header-anchor" href="#_5-介绍下springboot的启动流程" aria-hidden="true">#</a> 5.介绍下SpringBoot的启动流程</h1><figure><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648877365000/9d454c37dd3a420e9a0e5c461e9a99ca.png" alt="SpringBoot.png" tabindex="0" loading="lazy"><figcaption>SpringBoot.png</figcaption></figure><h1 id="_6-springboot中有了属性文件为什么还要加一个bootstrap-yml文件" tabindex="-1"><a class="header-anchor" href="#_6-springboot中有了属性文件为什么还要加一个bootstrap-yml文件" aria-hidden="true">#</a> 6.SpringBoot中有了属性文件为什么还要加一个bootstrap.yml文件?</h1><p>  在单体的SpringBoot项目中其实我们是用不到bootstrap.yml文件的，bootsrap.yml文件的使用需要SpringCloud的支持，因为在微服务环境下我们都是有配置中心的，来统一的管理系统的相关配置属性，那么怎么去加载配置中心的内容呢？一个SpringBoot项目启动的时候默认只会加载对应的application.yml中的相关信息，这时bootstrap.yml的作用就体现出来了，会在SpringBoot正常启动前创建一个父容器来通过bootstrap.yml中的配置来加载配置中心的内容。</p><h1 id="_7-如果要对属性文件中的账号密码加密如何实现" tabindex="-1"><a class="header-anchor" href="#_7-如果要对属性文件中的账号密码加密如何实现" aria-hidden="true">#</a> 7.如果要对属性文件中的账号密码加密如何实现？</h1><p>  其实这是一个比较篇实战的一个问题，我们在application.yml中保存的MySQL数据库的账号密码或者其他服务的账号密码，都可以保存加密后的内容，那么我们在处理的时候要怎么解密呢？这个其实比较简单只需要对SpringBoot的执行流程清楚就可以了，第一个我们可以通过自定义监听器可以在加载解析了配置文件之后对加密的文件中做解密处理同时覆盖之前加密的内容，或者通过对应的后置处理器来处理，具体的实现如下：</p><figure><img src="https://img-blog.csdnimg.cn/457ab5a2fd124ff988e10b2af6209811.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>然后我们通过案例代码来演示下，加深大家的理解 首先我们在属性文件中配置加密后的信息</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/mb?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token comment"># 对通过3DES对密码加密</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">t5Jd2CzFWEw=</span>

<span class="token key attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span>

<span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mapper/*.xml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在SpringBoot项目启动的时候在在刷新Spring容器之前执行的，所以我们要做的就是在加载完环境配置信息后，获取到配置的 <code>spring.datasource.password=t5Jd2CzFWEw=</code> 这个信息，然后解密并修改覆盖就可以了。 <img src="https://img-blog.csdnimg.cn/56ead524284e4317b40700fa7170e7b9.png" alt="在这里插入图片描述" loading="lazy">  然后在属性文件的逻辑其实是通过发布事件触发对应的监听器来实现的 <img src="https://img-blog.csdnimg.cn/795454a61a254cb388b86b308f0b89e3.png" alt="在这里插入图片描述" loading="lazy">   所以第一个解决方案就是你自定义一个监听器，这个监听器在加载属性文件(ConfigFileApplicationListener)的监听器之后处理,这种方式稍微麻烦点，   还有一种方式就是通过加载属性文件的一个后置处理器来处理，这就以个为例来实现</p><p>3DES的工具类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 3DES加密算法，主要用于加密用户id，身份证号等敏感信息,防止破解
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DESedeUtil</span> <span class="token punctuation">{</span>

    <span class="token comment">//秘钥</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span>  <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string">&quot;~@#$y1a2n.&amp;@+n@$%*(1)&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//秘钥长度</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> secretKeyLength <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>
    <span class="token comment">//加密算法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span>  <span class="token constant">ALGORITHM</span> <span class="token operator">=</span> <span class="token string">&quot;DESede&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//编码</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CHARSET</span> <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 转换成十六进制字符串
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getHex</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secretKeyByte <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hexByte<span class="token punctuation">;</span>
            hexByte <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token constant">CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//秘钥长度固定为24位</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>hexByte<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>secretKeyByte<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>secretKeyLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> secretKeyByte<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 生成密钥，返回加密串
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> 密钥
     * <span class="token keyword">@param</span> <span class="token parameter">encodeStr</span> 将加密的字符串
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span>  <span class="token function">encode3DES</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> encodeStr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token function">getHex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">encodeBase64String</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encodeStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token constant">CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 生成密钥,解密，并返回字符串
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> 密钥
     * <span class="token keyword">@param</span> <span class="token parameter">decodeStr</span> 需要解密的字符串
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decode3DES</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> decodeStr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token constant">ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span><span class="token function">getHex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">ALGORITHM</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>decodeStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">CHARSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> encode <span class="token operator">=</span> <span class="token class-name">DESedeUtil</span><span class="token punctuation">.</span><span class="token function">encode3DES</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> decode <span class="token operator">=</span> <span class="token class-name">DESedeUtil</span><span class="token punctuation">.</span><span class="token function">decode3DES</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">,</span> encode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户id&gt;&gt;&gt;&quot;</span><span class="token operator">+</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户id加密&gt;&gt;&gt;&quot;</span><span class="token operator">+</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户id解密&gt;&gt;&gt;&quot;</span><span class="token operator">+</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明后置处理器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafetyEncryptProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">EnvironmentPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">,</span> <span class="token class-name">SpringApplication</span> application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propertySource <span class="token operator">:</span> environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;propertySource = &quot;</span> <span class="token operator">+</span> propertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>propertySource <span class="token keyword">instanceof</span> <span class="token class-name">OriginTrackedMapPropertySource</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">OriginTrackedMapPropertySource</span> source <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OriginTrackedMapPropertySource</span><span class="token punctuation">)</span> propertySource<span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> propertyName <span class="token operator">:</span> source<span class="token punctuation">.</span><span class="token function">getPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//System.out.println(propertyName + &quot;=&quot; + source.getProperty(propertyName));</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource.password&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 做解密处理</span>
                        <span class="token class-name">String</span> property <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> source<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">DESedeUtil</span><span class="token punctuation">.</span><span class="token function">decode3DES</span><span class="token punctuation">(</span><span class="token class-name">DESedeUtil</span><span class="token punctuation">.</span><span class="token constant">KEY</span><span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;密文：&quot;</span> <span class="token operator">+</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;解密后的：&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 注意要添加到前面，覆盖</span>
                        environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapPropertySource</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在META-INF/spring.factories文件中注册</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.env.EnvironmentPostProcessor</span><span class="token punctuation">=</span><span class="token value attr-value">com.bobo.util.SafetyEncryptProcessor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后启动项目就可以了 <img src="https://img-blog.csdnimg.cn/970447b8998445abb81d6b9b407bde6b.png" alt="在这里插入图片描述" loading="lazy"></p><p>  搞定</p>`,36),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","Spring面试题(1).html.vue"]]);export{k as default};
