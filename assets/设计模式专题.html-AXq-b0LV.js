const t=JSON.parse(`{"key":"v-b6d2b54c","path":"/interview/A5-Spring/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E9%A2%98.html","title":"【金三银四】设计模式篇","lang":"zh-CN","frontmatter":{"description":"【金三银四】设计模式篇 1.谈谈你对设计模式的理解 1.首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率 设计原则 简单说明 单一职责 一个类只负责一项职责 里氏替换原则 子类可以扩展父类的功能，但不能改变父类原有的功能 依赖倒置原则 要依赖于抽象，不要依赖于具体，核心思想是面向接口编程 接口隔离原则 建立单一接口，不要建立庞大臃肿的接口，&lt;br&gt;尽量细化接口，接口中的方法尽量少 迪米特法则 （最少知道原则） 一个对象应该对其他对象保持最少的了解 开闭原则 对扩展开放，对修改关闭","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A5-Spring/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%93%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:title","content":"【金三银四】设计模式篇"}],["meta",{"property":"og:description","content":"【金三银四】设计模式篇 1.谈谈你对设计模式的理解 1.首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率 设计原则 简单说明 单一职责 一个类只负责一项职责 里氏替换原则 子类可以扩展父类的功能，但不能改变父类原有的功能 依赖倒置原则 要依赖于抽象，不要依赖于具体，核心思想是面向接口编程 接口隔离原则 建立单一接口，不要建立庞大臃肿的接口，&lt;br&gt;尽量细化接口，接口中的方法尽量少 迪米特法则 （最少知道原则） 一个对象应该对其他对象保持最少的了解 开闭原则 对扩展开放，对修改关闭"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【金三银四】设计模式篇\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"饿汉式","slug":"饿汉式","link":"#饿汉式","children":[]},{"level":2,"title":"懒汉式","slug":"懒汉式","link":"#懒汉式","children":[]},{"level":2,"title":"双重检测锁","slug":"双重检测锁","link":"#双重检测锁","children":[]},{"level":2,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]},{"level":2,"title":"枚举单例","slug":"枚举单例","link":"#枚举单例","children":[]},{"level":2,"title":"5.1 简单工厂","slug":"_5-1-简单工厂","link":"#_5-1-简单工厂","children":[]},{"level":2,"title":"5.2 工厂方法","slug":"_5-2-工厂方法","link":"#_5-2-工厂方法","children":[]},{"level":2,"title":"5.3 抽象工厂","slug":"_5-3-抽象工厂","link":"#_5-3-抽象工厂","children":[]},{"level":2,"title":"7.1 浅克隆","slug":"_7-1-浅克隆","link":"#_7-1-浅克隆","children":[]},{"level":2,"title":"7.2 深度克隆","slug":"_7-2-深度克隆","link":"#_7-2-深度克隆","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":14.66,"words":4397},"filePathRelative":"interview/A5-Spring/设计模式专题.md","localizedDate":"2023年12月2日","excerpt":"<h1> 【金三银四】设计模式篇</h1>\\n<h1> 1.谈谈你对设计模式的理解</h1>\\n<p>1.首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率</p>\\n<table>\\n<thead>\\n<tr>\\n<th>设计原则</th>\\n<th style=\\"text-align:left\\">简单说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>单一职责</td>\\n<td style=\\"text-align:left\\">一个类只负责一项职责</td>\\n</tr>\\n<tr>\\n<td>里氏替换原则</td>\\n<td style=\\"text-align:left\\">子类可以扩展父类的功能，但不能改变父类原有的功能</td>\\n</tr>\\n<tr>\\n<td>依赖倒置原则</td>\\n<td style=\\"text-align:left\\">要依赖于抽象，不要依赖于具体，核心思想是<mark>面向接口编程</mark></td>\\n</tr>\\n<tr>\\n<td>接口隔离原则</td>\\n<td style=\\"text-align:left\\">建立单一接口，不要建立庞大臃肿的接口，<code>&lt;br&gt;</code>尽量细化接口，接口中的方法尽量少</td>\\n</tr>\\n<tr>\\n<td>迪米特法则 （最少知道原则）</td>\\n<td style=\\"text-align:left\\">一个对象应该对其他对象保持最少的了解</td>\\n</tr>\\n<tr>\\n<td>开闭原则</td>\\n<td style=\\"text-align:left\\">对扩展开放，对修改关闭</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{t as data};
