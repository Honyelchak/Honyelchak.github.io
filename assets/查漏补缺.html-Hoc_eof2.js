import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-2Xbp2Heq.js";const p="/assets/java-basic-exception-1-cPzBy350.png",e="/assets/java-advanced-spi-8-uwj62ze-.jpg",c="/assets/image-20231012102234885-3RmM-BKd.png",o="/assets/image-20231012103137749-vwABqz2s.png",l="/assets/image-20231012103643180-_xffSofB.png",i="/assets/image-20231012111017379-_1yoc9uF.png",u="/assets/image-20231012112002695-R2crJQp7.png",k="/assets/image-20231012115436983-neENYkl7.png",r={},d=t(`<h1 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h1><h2 id="_1、实例对象可以引用静态变量。" tabindex="-1"><a class="header-anchor" href="#_1、实例对象可以引用静态变量。" aria-hidden="true">#</a> 1、实例对象可以引用静态变量。</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Test</span> hs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hs1<span class="token punctuation">.</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">Test</span> hs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hs2<span class="token punctuation">.</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
        hs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hs1<span class="token punctuation">.</span>x<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">Test</span><span class="token punctuation">.</span>x<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x=&quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、-异常" tabindex="-1"><a class="header-anchor" href="#_2、-异常" aria-hidden="true">#</a> 2、 异常</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">aMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> i <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;exception in a Method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;finally&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token function">aMethod</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;exception in main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：<strong>finallyexception in mainfinished</strong></p><h2 id="_3、方法、变量、类前加final-各有什么不一样" tabindex="-1"><a class="header-anchor" href="#_3、方法、变量、类前加final-各有什么不一样" aria-hidden="true">#</a> 3、方法、变量、类前加final 各有什么不一样?</h2><p>4、泛型</p><p>5、比较器</p><h3 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h3><h4 id="_1、jvm常用参数" tabindex="-1"><a class="header-anchor" href="#_1、jvm常用参数" aria-hidden="true">#</a> 1、JVM常用参数</h4><p>对于JVM内存配置参数：</p><blockquote><p>-Xmx10240m -Xms10240m -Xmn5120m -XXSurvivorRatio=3</p></blockquote><p>,其最小内存值和Survivor区总大小分别是（）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token class-name">Xmx</span>：最大堆大小
<span class="token operator">-</span><span class="token class-name">Xms</span>：初始堆大小
<span class="token operator">-</span><span class="token class-name">Xmn</span><span class="token operator">:</span>年轻代大小
<span class="token operator">-</span><span class="token class-name">XXSurvivorRatio</span>：年轻代中<span class="token class-name">Eden</span>区与<span class="token class-name">Survivor</span>区<span class="token punctuation">(</span>按照单个算<span class="token punctuation">)</span>的大小比值
<span class="token comment">//解答</span>
年轻代<span class="token number">5120</span>m， <span class="token class-name">Eden</span>：<span class="token class-name">Survivor</span><span class="token operator">=</span><span class="token number">3</span>，<span class="token class-name">Survivor</span>区大小<span class="token operator">=</span><span class="token number">1024</span>m（<span class="token class-name">Survivor</span>区有两个，即将年轻代分为<span class="token number">5</span>份，每个<span class="token class-name">Survivor</span>区占一份），总大小为<span class="token number">2048</span>m。
<span class="token operator">-</span><span class="token class-name">Xms</span>初始堆大小即最小内存值为<span class="token number">10240</span>m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、java中的静态绑定和动态绑定" tabindex="-1"><a class="header-anchor" href="#_4、java中的静态绑定和动态绑定" aria-hidden="true">#</a> 4、Java中的静态绑定和动态绑定</h2><p>对于java当中的方法而言，<strong>除了final，static，private和构造方法是前期绑定外，其他的方法全部为动态绑定。</strong></p><p>而动态绑定的典型发生在父类和子类的转换声明之下：</p><p>比如：Parent p = new Children();</p><p>其具体过程细节如下：</p><p>1：编译器检查对象的声明类型和方法名。</p><p>假设我们调用x.f(args)方法，并且x已经被声明为C类的对象，那么编译器会列举出C 类中所有的名称为f 的方法和从C 类的超类继承过来的f 方法。</p><p>2：接下来编译器检查方法调用中提供的参数类型。</p><p>如果在所有名称为f 的方法中有一个参数类型和调用提供的参数类型最为匹配，那么就调用这个方法，这个过程叫做“重载解析”。</p><p>3：当程序运行并且<strong>使用动态绑定调用方法时，虚拟机必须调用同x所指向的对象的实际类型相匹配的方法版本。</strong></p><p>假设实际类型为D(C的子类)，如果D类定义了f(String)那么该方法被调用，否则就在D的超类中搜寻方法f(String),依次类推。</p><p>**JAVA 虚拟机调用一个类方法时（静态方法），<mark>它会基于对象引用的类型(通常在编译时可知)来选择所调用的方法</mark>。**相反，<mark>当虚拟机调用一个实例方法时，它会基于对象实际的类型(只能在运行时得知)来选择所调用的方法</mark>，这就是动态绑定，是多态的一种。动态绑定为解决实际的业务问题提供了很大的灵活性，是一种非常优美的机制。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>honyelchak<span class="token punctuation">.</span>stack</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaNNNTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collection</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collection</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">getPP</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">getPP</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getPP</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A getPP  col&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getPP</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A getPP  ArrayList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A 成员 getPP  col&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A 成员 getPP  ArrayList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getPP</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A getPP  LinkedList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getPP</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B getPP  col&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getPP</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B getPP  list&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B 成员 getPP  ArrayList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B 成员 getPP  Collection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">A</span> getPP  col
<span class="token class-name">A</span> getPP  col
<span class="token class-name">A</span> 成员 getPP  col
<span class="token class-name">B</span> 成员 getPP  <span class="token class-name">Collection</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与方法不同，在处理java类中的成员变量（实例变量和类变量）时，并不是采用运行时绑定，而是一般意义上的静态绑定。所以在向上转型的情况下，对象的方法可以找到子类，<strong>而对象的属性（成员变量）还是父类的属性（子类对父类成员变量的隐藏）。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;父亲属性&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
　　
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;儿子属性&quot;</span><span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Father</span> sample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;调用的属性：&quot;</span> <span class="token operator">+</span> sample<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用的属性是父亲属性。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结果表明，子类的对象(由父类的引用handle)调用到的是父类的成员变量。 所以<mark>必须明确，运行时（动态）绑定针对的范畴只是对象的方法。</mark></p><p>java因为什么对属性要采取静态的绑定方法？</p><p>这是因为静态绑定是有很多的好处，<strong>它可以让我们在编译期就发现程序中的错误，而不是在运行期</strong>。这样就可以提高程序的运行效率！<strong>而对方法采取动态绑定是为了实现多态</strong>，多态是java的一大特色。多态也是面向对象的关键技术之一，所以java是以效率为代价来实现多态这是很值得的。</p><h2 id="_5、java中对于泛型的规定" tabindex="-1"><a class="header-anchor" href="#_5、java中对于泛型的规定" aria-hidden="true">#</a> 5、Java中对于泛型的规定</h2><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类" aria-hidden="true">#</a> 泛型类</h3><ol><li>泛型类型可以有单个或多个，泛型变量放在类名后边。</li><li>泛型方法可以用类泛型变量</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">K</span> val1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">V</span> val2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法" aria-hidden="true">#</a> 泛型方法</h3><p>泛型方法，是在调用方法的时候指明泛型的具体类型。</p><ol><li><p>定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型T作为方法的返回值。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>&lt;T&gt;</code> 表示这是一个类型参数列表，其中 <code>T</code> 是一个类型参数。</p></li><li><p>泛型方法的类型参数列表可以包含多个类型参数，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg1<span class="token punctuation">,</span> <span class="token class-name">U</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，类型参数列表中有两个类型参数 <code>T</code> 和 <code>U</code>。</p></li><li><p>泛型方法的类型参数可以用于方法参数类型、方法返回类型或方法中的局部变量类型。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">U</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg1<span class="token punctuation">,</span> <span class="token class-name">U</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">int</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些例子中，泛型类型参数 <code>T</code> 和 <code>U</code> 分别用于方法参数类型、方法返回类型或方法中的局部变量类型。</p></li><li><p>泛型方法可以<strong>定义在泛型类中或非泛型</strong>类中。如果泛型方法在泛型类中定义，它可以使用类的类型参数。</p></li><li><p><strong>泛型方法的类型参数在方法调用时可以通过实际类型参数来推断</strong>，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> first <span class="token operator">=</span> <span class="token function">myMethod</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 myMethod 方法，实际类型参数为 String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们调用了一个泛型方法 <code>myMethod()</code>，通过实际类型参数 <code>String</code> 推断出方法的类型参数 <code>T</code> 为 <code>String</code>，然后获取了列表中的第一个元素并赋值给变量 <code>first</code>。</p></li></ol><p><strong>为什么要使用泛型方法呢</strong>？</p><p>因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p><h3 id="泛型命名" tabindex="-1"><a class="header-anchor" href="#泛型命名" aria-hidden="true">#</a> 泛型命名</h3><p>在 Java 官方文档中，对于泛型参数的命名有<strong>一些约定俗成的规则</strong>，主要包括以下几点：</p><ol><li>类型参数的名称通常使用<strong>单个大写字母</strong>来表示，例如 <code>T</code>、<code>E</code>、<code>K</code>、<code>V</code> 等等。这些字母通常表示不同的类型，<strong>例如 <code>T</code> 表示任意类型，<code>E</code> 表示元素类型，<code>K</code> 和 <code>V</code> 分别表示键和值的类型。</strong><ul><li>E - 元素（Java集合框架中广泛使用）</li><li>K - 键</li><li>N - 数字</li><li>T - 类型</li><li>V - 值</li><li>S，U，V等 - 第二个、第三个、第四个类型</li></ul></li><li>如果一个类或接口有多个类型参数，可以使用不同的字母来表示不同的类型，例如 <code>Map&lt;K, V&gt;</code> 中的 <code>K</code> 和 <code>V</code> 就表示不同的类型。</li><li>在定义泛型方法时，类型参数的名称通常放在方法修饰符后面，并使用尖括号来包围类型参数列表，例如 <code>public &lt;T&gt; T identity(T t)</code>。</li><li>在使用泛型类型或方法时，需要提供具体的类型参数，例如 <code>List&lt;String&gt;</code> 表示一个元素类型为字符串的列表，<code>&lt;Integer&gt;Arrays.asList(1, 2, 3)</code> 表示一个整数类型的列表。</li></ol><p>需要注意的是，这些命名约定并不是强制性的规则，只是为了提高代码可读性和可维护性而建议使用。在实际编码过程中，也可以使用其他的名称来表示泛型参数，只要符合 Java 语法规范即可。</p><h3 id="泛型的上限和下限" tabindex="-1"><a class="header-anchor" href="#泛型的上限和下限" aria-hidden="true">#</a> 泛型的上限和下限</h3><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p><h4 id="上限通配符" tabindex="-1"><a class="header-anchor" href="#上限通配符" aria-hidden="true">#</a> 上限通配符</h4><p>List&lt;? extends A&gt; 代表的是一个可以持有 A及其子类（如B和C）的实例的List集合。</p><p>当集合所持有的实例是A或者A的子类的时候，此时从集合里读出元素并把它强制转换为A是安全的。下面是一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElements</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> elements<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">A</span> a <span class="token operator">:</span> elements<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候你可以把<code>List&lt;A&gt;,List&lt;B&gt;或者List&lt;C&gt;</code>类型的变量作为参数传入processElements()方法之中。因此，下面的例子都是合法的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> listA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">processElements</span><span class="token punctuation">(</span>listA<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">&gt;</span></span> listB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">processElements</span><span class="token punctuation">(</span>listB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> listC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">processElements</span><span class="token punctuation">(</span>listC<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>*processElements()<em>方法仍然是不能给传入的list插入元素的（比如进行</em>list.add()*操作），因为你不知道list集合里面的元素是什么类型（A、B还是C等等）。</p><h4 id="下界通配符" tabindex="-1"><a class="header-anchor" href="#下界通配符" aria-hidden="true">#</a> <strong>下界通配符</strong></h4><p>List&lt;? super A&gt; 的意思是List集合 list,它可以持有 A 及其父类的实例。</p><p>当你知道集合里所持有的元素类型都是A及其父类的时候，此时往list集合里面插入A及其子类（B或C）是安全的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertElements</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>

   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型的通配符" tabindex="-1"><a class="header-anchor" href="#泛型的通配符" aria-hidden="true">#</a> 泛型的通配符？</h3><p>通配符<code>?</code>不仅能够匹配子类型，还可以匹配父类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handlerList</span><span class="token punctuation">(</span><span class="token class-name">Arr</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型并非无所不能" tabindex="-1"><a class="header-anchor" href="#泛型并非无所不能" aria-hidden="true">#</a> 泛型并非无所不能</h3><ol><li><p><strong>不能实例化类型变量，如<code>T obj = new T();</code></strong></p><p><strong>解决方案：</strong></p><ul><li><p>使用反射</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">T</span> obj<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">GenericObj</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">GenericObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> go <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObj</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>不能实例化泛型数组，如<code>T[] arr = new T[3];</code></strong></p><p><strong>解决方案：</strong></p><ol><li><p>创建Object类型的数组，获取是转型为T类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">GenericArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> set <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">T</span> get <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用反射机制中的Array.newInstance方法创建泛型数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">GenericArray</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 利用反射创建泛型类型的数组</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> set <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">T</span> get <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">GenericArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> genericArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  genericArr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;penghuwan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericArr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;penghuwan&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><blockquote><p>这里不合法仅仅指实例化操作（new）, 声明是允许的， 例如T [] arr</p></blockquote><ol start="3"><li><p><strong>不能在泛型类的静态上下文中使用类型变量，注意在静态泛型方法中时可以使用的</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span> <span class="token comment">// 报错， 提示： &#39;Foo.this&#39; can not be referenced from a static context</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> get <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 报错， 提示： &#39;Foo.this&#39; can not be referenced from a static context</span>
    <span class="token keyword">return</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> get <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不会报错</span>
    <span class="token keyword">return</span> <span class="token class-name">T</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不能使用基本类型的值做为类型变量的值</p><ol><li><p>应该选用这些基本类型对应的包装类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非法</span>

<span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>不能创建泛型类的数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Demoo2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demoo2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// Generic array creation</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>可以声明通配类型的数组，之后做强制转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Demoo2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Demoo2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Demoo2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="jdk7及jdk7之后的泛型类对象" tabindex="-1"><a class="header-anchor" href="#jdk7及jdk7之后的泛型类对象" aria-hidden="true">#</a> JDK7及JDK7之后的泛型类对象</h3><p>JDK7以后，在实例化一个泛型类对象时，构造函数中可以省略泛型类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LinkedList</span><span class="token punctuation">&gt;</span></span> arrayListDemo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LinkedList</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// JDK7以后，在实例化一个泛型类对象时，构造函数中可以省略泛型类型。</span>
<span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LinkedList</span><span class="token punctuation">&gt;</span></span> arrayListDemo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何理解java中的泛型是伪泛型" tabindex="-1"><a class="header-anchor" href="#如何理解java中的泛型是伪泛型" aria-hidden="true">#</a> 如何理解Java中的泛型是伪泛型</h3><p>泛型中类型擦除 Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p><blockquote><p>官方文档中对于泛型的描述：</p><p><em>Java的泛型是通过类型擦除实现的。这意味着在编译时，所有泛型类型的类型参数都被替换为其上限或Object（如果没有指定上限），并且在运行时，所有泛型类型的实例都被视为Object类型。</em></p></blockquote><h2 id="_6、注解" tabindex="-1"><a class="header-anchor" href="#_6、注解" aria-hidden="true">#</a> 6、注解</h2><p>JDK.15之后引入的一个特性，用来对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注释。</p><h3 id="注解的分类" tabindex="-1"><a class="header-anchor" href="#注解的分类" aria-hidden="true">#</a> 注解的分类</h3><h4 id="java自带的注解" tabindex="-1"><a class="header-anchor" href="#java自带的注解" aria-hidden="true">#</a> Java自带的注解</h4><p><code>@Override</code>、<code>@Deprecated</code>、<code>@SuppressWarnings</code></p><h4 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h4><p>元注解是用于定义注解的注解，包括<code>@Retention</code>、<code>@Target</code>、<code>@Inherited</code>、<code>@Documented</code></p><ul><li><code>@Retention</code>用于标明注解<strong>被保留的阶段</strong></li><li><code>@Target</code>用于标明注解<strong>使用的范围</strong></li><li><code>@Inherited</code>用于标明<strong>注解可继承</strong></li><li><code>@Documented</code>用于标明是否生成javadoc文档</li></ul><h4 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h4><h2 id="_7、异常" tabindex="-1"><a class="header-anchor" href="#_7、异常" aria-hidden="true">#</a> 7、异常</h2><figure><img src="`+p+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li><strong>运行时异常</strong></li></ul><p>都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，<strong>程序中可以选择捕获处理，也可以不处理</strong>。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>运行时异常的特点是<strong>Java编译器不会检查它</strong>，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。</p><ul><li><strong>非运行时异常</strong> （编译异常）</li></ul><p><strong>是RuntimeException以外的异常，类型上都属于Exception类及其子类。</strong></p><p>从程序语法角度讲**是必须进行处理的异常，如果不处理，程序就不能编译通过。**如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p><h3 id="异常底层" tabindex="-1"><a class="header-anchor" href="#异常底层" aria-hidden="true">#</a> 异常底层</h3><p>提到JVM处理异常的机制，就需要提及Exception Table，以下称为异常表。我们暂且不急于介绍异常表，先看一个简单的 Java 处理异常的小例子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">simpleTryCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token function">testNPE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用javap来分析这段代码（需要先使用javac编译）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//javap -c Main</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">simpleTryCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> invokestatic  #<span class="token number">3</span>                  <span class="token comment">// Method testNPE:()V</span>
       <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">11</span>
       <span class="token number">6</span><span class="token operator">:</span> astore_0
       <span class="token number">7</span><span class="token operator">:</span> aload_0
       <span class="token number">8</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/Exception.printStackTrace:()V</span>
      <span class="token number">11</span><span class="token operator">:</span> <span class="token keyword">return</span>
    <span class="token class-name">Exception</span> table<span class="token operator">:</span>
       from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
           <span class="token number">0</span>     <span class="token number">3</span>     <span class="token number">6</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到上面的代码，应该会有会心一笑，因为终于看到了Exception table，也就是我们要研究的异常表。</p><p>异常表中包含了一个或多个异常处理者(Exception Handler)的信息，这些信息包含如下</p><ul><li><strong>from</strong> 可能发生异常的起始点</li><li><strong>to</strong> 可能发生异常的结束点</li><li><strong>target</strong> 上述from和to之前发生异常后的异常处理者的位置</li><li><strong>type</strong> 异常处理者处理的异常的类信息</li></ul><h2 id="_8、java中的spi机制-服务发现机制" tabindex="-1"><a class="header-anchor" href="#_8、java中的spi机制-服务发现机制" aria-hidden="true">#</a> 8、Java中的SPI机制(服务发现机制)</h2><p>SPI（Service Provider Interface），<strong>是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用</strong>，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是 <strong>解耦</strong>。</p><figure><img src="`+e+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在Java中，SPI机制的具体实现方式包括：</p><ol><li><p><strong>服务接口的定义</strong></p><ol><li>定义服务接口，并声明一组规范化的方法或行为。</li></ol></li><li><p><strong>服务提供者的实现</strong></p><ol><li>服务提供者实现服务接口，<strong>并在META-INF/services目录下提供以服务接口全限定名为文件名的文件，文件内容为服务提供者的类全限定名。</strong></li></ol></li><li><p><strong>服务加载器的实现</strong></p><ol><li>服务加载器负责在类路径下查找所有符合规范的服务提供者，并加载它们。在Java中，服务加载器的实现可以通过java.util.ServiceLoader类来实现。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 加载Search接口下的所有实现</span>
        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Search</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Search</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">Search</span> search <span class="token operator">=</span>  iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           search<span class="token punctuation">.</span><span class="token function">searchDoc</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_9、lambda表达式是如何生成的" tabindex="-1"><a class="header-anchor" href="#_9、lambda表达式是如何生成的" aria-hidden="true">#</a> 9、lambda表达式是如何生成的？</h2><p>Lambda表达式的背后实际上是通过<strong>LambdaMetafactory</strong>这个工厂类来实现的。这个类是JDK提供的一个工具类，用于创建函数式接口的实例。它使用了一种称为&quot;<code>invokedynamic</code>&quot;的字节码指令来实现动态调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;asdwerwerwe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用<code>javap -c -p LambdaTest.class</code>之后得到：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Compiled</span> from <span class="token string">&quot;LambdaTest.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>juc<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>LambdaTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>juc<span class="token punctuation">.</span>test<span class="token punctuation">.</span></span>LambdaTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class java/lang/Thread</span>
       <span class="token number">3</span><span class="token operator">:</span> dup
       <span class="token number">4</span><span class="token operator">:</span> invokedynamic #<span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">0</span>              <span class="token comment">// InvokeDynamic #0:run:()Ljava/lang/Runnable;</span>
       <span class="token number">9</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment">// Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span>
      <span class="token number">12</span><span class="token operator">:</span> astore_1
      <span class="token number">13</span><span class="token operator">:</span> aload_1
      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/Thread.start:()V</span>
      <span class="token number">17</span><span class="token operator">:</span> getstatic     #<span class="token number">6</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">20</span><span class="token operator">:</span> ldc           #<span class="token number">7</span>                  <span class="token comment">// String end!!!</span>
      <span class="token number">22</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
      <span class="token number">25</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">6</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
       <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">9</span>                  <span class="token comment">// String asdwerwerwe</span>
       <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">8</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
       <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>在编译阶段，Java编译器将Lambda表达式转换为一个私有的静态方法，即<code>lambda$main$0</code>方法。</p></li><li><p><code>invokedynamic #3, 0</code>其实就是把生成的<code>lambda$main$0</code>方法与实际的调用点进行绑定。</p><ol><li><code>invokedynamic</code>字节码会在运行时根据引导方法和方法类型来动态地解析和绑定方法的调用。</li><li>具体的动态调用逻辑由引导方法决定，在Lambda表达式的情况下，引导方法通常由LambdaMetafactory提供，用于创建函数式接口的实例并与Lambda表达式绑定。</li><li><code>invokedynamic #3, 0</code> 表示在这里使用引导方法（常量池中索引为3）和方法类型（索引为0）进行动态调用。</li></ol><blockquote><p>而<code>#3</code>是常量池中的符号引用，对应的是bootstrap引导方法</p><figure><img src="`+c+'" alt="image-20231012102234885" tabindex="0" loading="lazy"><figcaption>image-20231012102234885</figcaption></figure><figure><img src="'+o+`" alt="image-20231012103137749" tabindex="0" loading="lazy"><figcaption>image-20231012103137749</figcaption></figure><p>这一串字符表示LambdaMetafactory生成的方法描述符（Method Descriptor）。在Java字节码中，方法描述符用于描述方法的参数类型和返回类型。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>(Ljava/lang/invoke/MethodHandles$Lookup;：该部分表示方法的第一个参数类型，即MethodHandles.Lookup类型的参数。MethodHandles.Lookup是Java核心库中的一个类，用于执行动态方法调用。
Ljava/lang/String;：表示方法的第二个参数类型，即String类型的参数。
Ljava/lang/invoke/MethodType;：表示方法的第三个参数类型，即MethodType类型的参数。MethodType是Java核心库中的一个类，用于描述方法的类型信息，包括参数类型和返回类型。
Ljava/lang/invoke/MethodType;：表示方法的第四个参数类型，与第三个参数类型相同。
Ljava/lang/invoke/MethodHandle;：表示方法的第五个参数类型，即MethodHandle类型的参数。MethodHandle是Java核心库中的一个类，用于执行方法调用。
Ljava/lang/invoke/MethodType;)：表示方法的最后一个参数类型，即MethodType类型的参数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ol><p>那我们把视角转向<code>LambdaMetafactory.metafactory()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaMetafactory</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CallSite</span> <span class="token function">metafactory</span><span class="token punctuation">(</span><span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span> caller<span class="token punctuation">,</span>
                                       <span class="token class-name">String</span> invokedName<span class="token punctuation">,</span>
                                       <span class="token class-name">MethodType</span> invokedType<span class="token punctuation">,</span>
                                       <span class="token class-name">MethodType</span> samMethodType<span class="token punctuation">,</span>
                                       <span class="token class-name">MethodHandle</span> implMethod<span class="token punctuation">,</span>
                                       <span class="token class-name">MethodType</span> instantiatedMethodType<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">LambdaConversionException</span> <span class="token punctuation">{</span>
        <span class="token class-name">AbstractValidatingLambdaMetafactory</span> mf<span class="token punctuation">;</span>
        mf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClassLambdaMetafactory</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> invokedType<span class="token punctuation">,</span>
                                             invokedName<span class="token punctuation">,</span> samMethodType<span class="token punctuation">,</span>
                                             implMethod<span class="token punctuation">,</span> instantiatedMethodType<span class="token punctuation">,</span>
                                             <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token constant">EMPTY_CLASS_ARRAY</span><span class="token punctuation">,</span> <span class="token constant">EMPTY_MT_ARRAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mf<span class="token punctuation">.</span><span class="token function">validateMetafactoryArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">buildCallSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个方法里打个断点以debug模式运行，从下图可以看到根据相关的信息创建了一个<code>InnerClassLambdaMetafactory</code>工厂对象，然后利用工厂对象进行创建，但是还是不能明确的看到创建了内部类。</p><figure><img src="`+l+'" alt="image-20231012103643180" tabindex="0" loading="lazy"><figcaption>image-20231012103643180</figcaption></figure><p>从<code>InnerClassLambdaMetafactory</code>内部类对象<code>mf</code>的一些属性可以看到有创建内部类的端倪。</p><figure><img src="'+i+'" alt="image-20231012111017379" tabindex="0" loading="lazy"><figcaption>image-20231012111017379</figcaption></figure><p>紧接着，来到<code>mf.buildCallSite()</code>方法里，可以看到调用<code>spinInnnerClass()</code></p><blockquote><p>如下图注释所示：<code>spinInnnerClass()</code>的作用是<strong>生成一个实现函数式接口的类文件</strong>，并定义并返回该类。</p><p>具体如何生成的class文件，就不再深究，具体是调用了<code>UNSAFE</code>类的<code>defineAnonymousClass</code>方法</p></blockquote><p><code>spinInnnerClass()</code>执行完，生成的class对象如下图所示：</p><figure><img src="'+u+'" alt="image-20231012112002695" tabindex="0" loading="lazy"><figcaption>image-20231012112002695</figcaption></figure><p>之后生成了该类的一个对象<code>inst</code>，可以在此处调用<code>inst.run()</code>方法执行了lambda表达式内的内容，以此来验证是真的生成一个内部类，并且把内部类的对象和该接口进行绑定。</p><figure><img src="'+k+`" alt="image-20231012115436983" tabindex="0" loading="lazy"><figcaption>image-20231012115436983</figcaption></figure><p>总结</p><ol><li>lambda表达式在编译的时候被编译器生成一个<code>private static </code>的方法(名字类似<code>lambda$main$0</code>)</li><li>并且会生成<code>invokdynamic</code>字节码指令，调用相应的<code>bootstrap method</code>引导方法。</li><li>该方法能够按照相应的接口动态的生成一个内部类，并将内部类的方法和编译期生成的<code>lambda$main$0</code>方法进行绑定(可以理解为等同)，</li><li>最后调用<code>new ConstantCallSite(MethodHandles.constant(samBase, inst));</code>返回调用点。 <ol><li>这个地方我的理解就是，把按照lambda表达式生成的内部类实例对象与该接口进行绑定，形成一个调用点。</li></ol></li></ol><h2 id="_10、异常-oom-是否会导致程序结束" tabindex="-1"><a class="header-anchor" href="#_10、异常-oom-是否会导致程序结束" aria-hidden="true">#</a> 10、异常(OOM)是否会导致程序结束？</h2><blockquote><ol><li><strong>什么会导致JVM退出？</strong><ol><li>虚拟机内不存在非守护线程。</li></ol></li><li><strong>异常和线程的关系？</strong><ol><li><code>线程发生未处理的异常</code>（未处理异常由默认异常处理器处理）会导致线程结束，而与JVM的退出毫无关系。</li></ol></li></ol></blockquote><p>结论是不会：</p><p>OOM也是一种异常，它的发生也不会导致JVM退出。以下实例说明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// https://heapdump.cn/article/1818321</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为快速发生oom，设置堆大小; VM args: -Xms20m -Xmx20m </span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
     <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
         <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; continuing...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程抛出<code>java.lang.OutOfMemoryError: Java heap space</code>后，main线程依旧会循环打印main continuing…。 线程中发生OOM异常如此，发生其他异常也如此，不影响其他线程，也不会导致JVM退出。</p><h3 id="oom与jvm退出" tabindex="-1"><a class="header-anchor" href="#oom与jvm退出" aria-hidden="true">#</a> OOM与JVM退出</h3><p>OOM的发生表示了此刻JVM堆内存告罄，不能分配出更多的资源，或者gc回收效率不可观。一个线程的OOM，在一定程度的并发下，若此时其他线程也需要申请堆内存，那么其他线程也会因为申请不到内存而OOM，甚至连锁反应导致整个JVM的退出。</p><p>以上示例没有导致JVM退出的原因在于，线程通过往局部变量集合中不断加入对象，产生OOM。线程因异常退出后，集合中的对象由于引用不可达，会被gc，这样就有了足够的堆内存供其他线程使用。</p><p>若示例中的list是一个“全局”的类static变量，那么即使线程退出，内存也得不到释放。这时其他线程如果不断再申请堆内存资源，就会造成连锁反应导致JVM退出。</p><h2 id="_11、java中的error能否被catch" tabindex="-1"><a class="header-anchor" href="#_11、java中的error能否被catch" aria-hidden="true">#</a> 11、Java中的Error能否被catch？</h2><p>Error、Exception都实现了Throwing，所以可以捕获的。</p><h2 id="_12、java到底是值传递还是引用传递" tabindex="-1"><a class="header-anchor" href="#_12、java到底是值传递还是引用传递" aria-hidden="true">#</a> 12、Java到底是值传递还是引用传递？</h2><p>形参： 就是形式参数，用于定义方法的时候使用的参数，是用来接收调用者传递的参数的。</p><p>实参： 就是实际参数，用于调用时传递给方法的参数。实参在传递给别的方法之前是要被预先赋值的。</p><ul><li>值传递： 是指在调用方法时，将实际参数拷贝一份传递给方法，这样在方法中修改形式参数时，不会影响到实际参数。</li><li>引用传递： 也叫地址传递，<strong>是指在调用方法时，将实际参数的地址传递给方法</strong>，这样在方法中对形式参数的修改，将影响到实际参数。</li></ul><p>Java参数传递中，不管传递的是基本数据类型还是引用类型，都是值传递。</p><p>当传递基本数据类型，比如原始类型（int、long、char等）、包装类型（Integer、Long、String等），实参和形参都是存储在不同的栈帧内，修改形参的栈帧数据，不会影响实参的数据。</p><p>当传参的引用类型，形参和实参指向同一个地址的时候，修改形参地址的内容，会影响到实参。当形参和实参指向不同的地址的时候，修改形参地址的内容，并不会影响到实参。</p><h2 id="_13、collections-sort和arrays-sortd的关系" tabindex="-1"><a class="header-anchor" href="#_13、collections-sort和arrays-sortd的关系" aria-hidden="true">#</a> 13、Collections.sort和Arrays.sortd的关系？</h2><p>ArrayList中的sort调用的就是 Arrays.sort方法</p>`,143),v=[d];function m(b,g){return s(),a("div",null,v)}const w=n(r,[["render",m],["__file","查漏补缺.html.vue"]]);export{w as default};
