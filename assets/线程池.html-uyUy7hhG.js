const e=JSON.parse(`{"key":"v-4dfed6fc","path":"/interview/A4-Java/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"","lang":"zh-CN","frontmatter":{"description":"Java线程池 JUC提供的ThreadPoolExecutor类 线程池是什么 线程池是一种池化思想管理线程的工具。 线程过多会带来额外的开销，其中包括创建销毁线程的开销，调度线程的开销等等，同时也降低了计算机的整体性能。 线程池维护了多个线程，等待管理者分配可并发执行的任务。 降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。 提高响应速度：任务到达时，无需等待线程创建即可立即执行。 提高线程的可管理性：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。 提供更多更强大的功能：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A4-Java/JUC/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:description","content":"Java线程池 JUC提供的ThreadPoolExecutor类 线程池是什么 线程池是一种池化思想管理线程的工具。 线程过多会带来额外的开销，其中包括创建销毁线程的开销，调度线程的开销等等，同时也降低了计算机的整体性能。 线程池维护了多个线程，等待管理者分配可并发执行的任务。 降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。 提高响应速度：任务到达时，无需等待线程创建即可立即执行。 提高线程的可管理性：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。 提供更多更强大的功能：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"Java线程池","slug":"java线程池","link":"#java线程池","children":[{"level":3,"title":"线程池是什么","slug":"线程池是什么","link":"#线程池是什么","children":[]},{"level":3,"title":"线程池解决的问题是什么？","slug":"线程池解决的问题是什么","link":"#线程池解决的问题是什么","children":[]},{"level":3,"title":"线程池的核心设计与实现","slug":"线程池的核心设计与实现","link":"#线程池的核心设计与实现","children":[]}]},{"level":2,"title":"ThreadPoolExecutor底层原理分析","slug":"threadpoolexecutor底层原理分析","link":"#threadpoolexecutor底层原理分析","children":[]},{"level":2,"title":"线程池的五种状态","slug":"线程池的五种状态","link":"#线程池的五种状态","children":[]},{"level":2,"title":"线程池中的线程是如何关闭的？","slug":"线程池中的线程是如何关闭的","link":"#线程池中的线程是如何关闭的","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":20.97,"words":6292},"filePathRelative":"interview/A4-Java/JUC/线程池.md","localizedDate":"2023年12月2日","excerpt":"<h2> Java线程池</h2>\\n<p>JUC提供的ThreadPoolExecutor类</p>\\n<h3> 线程池是什么</h3>\\n<p>线程池是一种池化思想管理线程的工具。</p>\\n<p>线程过多会带来额外的开销，其中包括<strong>创建销毁线程的开销，调度线程的开销等等</strong>，同时也降低了计算机的整体性能。</p>\\n<p>线程池维护了多个线程，等待管理者分配可并发执行的任务。</p>\\n<ul>\\n<li><strong>降低资源消耗</strong>：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li>\\n<li><strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行。</li>\\n<li><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li>\\n<li><strong>提供更多更强大的功能</strong>：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li>\\n</ul>","autoDesc":true}`);export{e as data};
