const e=JSON.parse(`{"key":"v-16d3a0fa","path":"/interview/A4-Java/Java%E7%96%91%E9%9A%BE%E7%82%B9.html","title":"1. 基础","lang":"zh-CN","frontmatter":{"description":"1. 基础 1.1. 正确使用 equals 方法 Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。 举个例子： // 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常 String str = null; if (str.equals(\\"SnailClimb\\")) { ... } else { .. }","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A4-Java/Java%E7%96%91%E9%9A%BE%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:title","content":"1. 基础"}],["meta",{"property":"og:description","content":"1. 基础 1.1. 正确使用 equals 方法 Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。 举个例子： // 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常 String str = null; if (str.equals(\\"SnailClimb\\")) { ... } else { .. }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"1.1. 正确使用 equals 方法","slug":"_1-1-正确使用-equals-方法","link":"#_1-1-正确使用-equals-方法","children":[]},{"level":2,"title":"1.2. 整型包装类值的比较","slug":"_1-2-整型包装类值的比较","link":"#_1-2-整型包装类值的比较","children":[{"level":3,"title":"1.3.1. BigDecimal 的用处","slug":"_1-3-1-bigdecimal-的用处","link":"#_1-3-1-bigdecimal-的用处","children":[]},{"level":3,"title":"1.3.2. BigDecimal 的大小比较","slug":"_1-3-2-bigdecimal-的大小比较","link":"#_1-3-2-bigdecimal-的大小比较","children":[]},{"level":3,"title":"1.3.3. BigDecimal 保留几位小数","slug":"_1-3-3-bigdecimal-保留几位小数","link":"#_1-3-3-bigdecimal-保留几位小数","children":[]},{"level":3,"title":"1.3.5. 总结","slug":"_1-3-5-总结","link":"#_1-3-5-总结","children":[]}]},{"level":2,"title":"1.4. 基本数据类型与包装数据类型的使用标准","slug":"_1-4-基本数据类型与包装数据类型的使用标准","link":"#_1-4-基本数据类型与包装数据类型的使用标准","children":[]},{"level":2,"title":"2.1. Arrays.asList()使用指南","slug":"_2-1-arrays-aslist-使用指南","link":"#_2-1-arrays-aslist-使用指南","children":[{"level":3,"title":"2.1.1. 简介","slug":"_2-1-1-简介","link":"#_2-1-1-简介","children":[]},{"level":3,"title":"2.1.2. 《阿里巴巴Java 开发手册》对其的描述","slug":"_2-1-2-《阿里巴巴java-开发手册》对其的描述","link":"#_2-1-2-《阿里巴巴java-开发手册》对其的描述","children":[]},{"level":3,"title":"2.1.3. 使用时的注意事项总结","slug":"_2-1-3-使用时的注意事项总结","link":"#_2-1-3-使用时的注意事项总结","children":[]},{"level":3,"title":"2.1.4. 如何正确的将数组转换为ArrayList?","slug":"_2-1-4-如何正确的将数组转换为arraylist","link":"#_2-1-4-如何正确的将数组转换为arraylist","children":[]}]},{"level":2,"title":"2.2. Collections.toArray()方法使用的坑&如何反转数组","slug":"_2-2-collections-toarray-方法使用的坑-如何反转数组","link":"#_2-2-collections-toarray-方法使用的坑-如何反转数组","children":[]},{"level":2,"title":"2.3. 不要在 foreach 循环里进行元素的 remove/add 操作","slug":"_2-3-不要在-foreach-循环里进行元素的-remove-add-操作","link":"#_2-3-不要在-foreach-循环里进行元素的-remove-add-操作","children":[]},{"level":2,"title":"什么是反射","slug":"什么是反射","link":"#什么是反射","children":[]},{"level":2,"title":"什么是Java序列化","slug":"什么是java序列化","link":"#什么是java序列化","children":[]},{"level":2,"title":"1. 为什么要使用克隆？","slug":"_1-为什么要使用克隆","link":"#_1-为什么要使用克隆","children":[]},{"level":2,"title":"2. 如何实现对象克隆？","slug":"_2-如何实现对象克隆","link":"#_2-如何实现对象克隆","children":[]},{"level":2,"title":"3. 深拷贝和浅拷贝区别是什么？","slug":"_3-深拷贝和浅拷贝区别是什么","link":"#_3-深拷贝和浅拷贝区别是什么","children":[{"level":3,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]},{"level":3,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]}]},{"level":2,"title":"throw、throws的区别","slug":"throw、throws的区别","link":"#throw、throws的区别","children":[]},{"level":2,"title":"try-catch-finally 中哪个部分可以省略？","slug":"try-catch-finally-中哪个部分可以省略","link":"#try-catch-finally-中哪个部分可以省略","children":[]},{"level":2,"title":"try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？","slug":"try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","link":"#try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","children":[]},{"level":2,"title":"常见的异常类有哪些？","slug":"常见的异常类有哪些","link":"#常见的异常类有哪些","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":10.54,"words":3162},"filePathRelative":"interview/A4-Java/Java疑难点.md","localizedDate":"2023年12月2日","excerpt":"<h1> 1. 基础</h1>\\n<h2> 1.1. 正确使用 equals 方法</h2>\\n<p>Object的equals方法容易抛空指针异常，应<strong>使用常量或确定有值的对象</strong>来调用 equals。</p>\\n<p>举个例子：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</span>\\n<span class=\\"token class-name\\">String</span> str <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"SnailClimb\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
