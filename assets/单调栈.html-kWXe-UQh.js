import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-2Xbp2Heq.js";const p={},e=t(`<h1 id="单调栈" tabindex="-1"><a class="header-anchor" href="#单调栈" aria-hidden="true">#</a> 单调栈</h1><p><strong>单调栈（Monotone Stack）</strong>：一种特殊的栈。在栈的「先进后出」规则基础上，要求「从 <strong>栈底</strong> 到 <strong>栈顶</strong> 的元素是单调递增（或者单调递减）」。其中满足从栈顶到栈底的元素是单调递增的栈，叫做「单调递增栈」。满足从栈顶到栈底的元素是单调递减的栈，叫做「单调递减栈」。</p><blockquote><p>对于单调递增(递减)栈所指的方向，网上有两种说法：</p><ul><li>从栈底到栈顶是递增(递减)的。 <ul><li>我推荐这种说法，更容易理解。</li></ul></li><li>从栈顶到栈底是递增(递减)的。</li></ul></blockquote><p>单调栈可以在<code>O(n)</code>的时间复杂度下，找到<code>元素[i]</code>左边或者右边第一个比它大或者小的元素。</p><p>单调栈一般用于解决一下几种问题：</p><ul><li>寻找左侧第一个比当前元素大的元素。</li><li>寻找左侧第一个比当前元素小的元素。</li><li>寻找右侧第一个比当前元素大的元素。</li><li>寻找右侧第一个比当前元素小的元素。</li></ul><h3 id="寻找左侧第一个比当前元素大的元素" tabindex="-1"><a class="header-anchor" href="#寻找左侧第一个比当前元素大的元素" aria-hidden="true">#</a> 寻找左侧第一个比当前元素大的元素</h3><ul><li>从左到右遍历元素，构造单调递增栈（从栈顶到栈底递增）： <ul><li><code>一个元素左侧第一个比它大的元素就是将其「插入单调递增栈」时的栈顶元素。</code></li><li>如果插入时的栈为空，则说明左侧不存在比当前元素大的元素。</li></ul></li></ul><h3 id="寻找左侧第一个比当前元素小的元素" tabindex="-1"><a class="header-anchor" href="#寻找左侧第一个比当前元素小的元素" aria-hidden="true">#</a> 寻找左侧第一个比当前元素小的元素</h3><ul><li>从左到右遍历元素，构造单调递减栈（从栈顶到栈底递减）： <ul><li>一个元素左侧第一个比它小的元素就是将其「插入单调递减栈」时的栈顶元素。</li><li>如果插入时的栈为空，则说明左侧不存在比当前元素小的元素。</li></ul></li></ul><h3 id="寻找右侧第一个比当前元素大的元素" tabindex="-1"><a class="header-anchor" href="#寻找右侧第一个比当前元素大的元素" aria-hidden="true">#</a> 寻找右侧第一个比当前元素大的元素</h3><ul><li>从左到右遍历元素，构造单调递增栈（从栈顶到栈底递增）： <ul><li>一个元素右侧第一个比它大的元素就是将其「弹出单调递增栈」时即将插入的元素。</li><li>如果该元素没有被弹出栈，则说明右侧不存在比当前元素大的元素。</li></ul></li><li>从右到左遍历元素，构造单调递增栈（从栈顶到栈底递增）： <ul><li>一个元素右侧第一个比它大的元素就是将其「插入单调递增栈」时的栈顶元素。</li><li>如果插入时的栈为空，则说明右侧不存在比当前元素大的元素。</li></ul></li></ul><h3 id="寻找右侧第一个比当前元素小的元素" tabindex="-1"><a class="header-anchor" href="#寻找右侧第一个比当前元素小的元素" aria-hidden="true">#</a> 寻找右侧第一个比当前元素小的元素</h3><ul><li>从左到右遍历元素，构造单调递减栈（从栈顶到栈底递减）： <ul><li>一个元素右侧第一个比它小的元素就是将其「弹出单调递减栈」时即将插入的元素。</li><li>如果该元素没有被弹出栈，则说明右侧不存在比当前元素小的元素。</li></ul></li><li>从右到左遍历元素，构造单调递减栈（从栈顶到栈底递减）： <ul><li>一个元素右侧第一个比它小的元素就是将其「插入单调递减栈」时的栈顶元素。</li><li>如果插入时的栈为空，则说明右侧不存在比当前元素小的元素。</li></ul></li></ul><p>上边的分类解法有点绕口，可以简单记为以下条规则：</p><ul><li>无论哪种题型，都建议从左到右遍历元素。</li><li><mark>找 <strong>「比当前元素大的元素」</strong> 就用 <strong>单调递增栈</strong>，查找 <strong>「比当前元素小的元素」</strong> 就用 <strong>单调递减栈</strong>。</mark></li><li><mark>从 <strong>「左侧」</strong> 查找就看 <strong>「插入栈」</strong> 时的栈顶元素，从 <strong>「右侧」</strong> 查找就看 <strong>「弹出栈」</strong> 时即将插入的元素。</mark></li></ul><h3 id="_3-1-单调递增栈模板" tabindex="-1"><a class="header-anchor" href="#_3-1-单调递增栈模板" aria-hidden="true">#</a> 3.1 单调递增栈模板</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">monotoneIncreasingStack</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    
    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
        <span class="token keyword">while</span> stack <span class="token keyword">and</span> num <span class="token operator">&gt;=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-单调递减栈模板" tabindex="-1"><a class="header-anchor" href="#_3-2-单调递减栈模板" aria-hidden="true">#</a> 3.2 单调递减栈模板</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">monotoneDecreasingStack</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
        <span class="token keyword">while</span> stack <span class="token keyword">and</span> num <span class="token operator">&lt;=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="如果数组中有重复元素的话-要谨慎处理" tabindex="-1"><a class="header-anchor" href="#如果数组中有重复元素的话-要谨慎处理" aria-hidden="true">#</a> 如果数组中有重复元素的话，要谨慎处理</h3><blockquote><p>例如：581.最短无序连续子数组</p><p>该题中需要用单调栈确定左右边界，数组无重复元素的话，两种写法都是可以的，但是如果有重复元素的话，法1是正确的。</p></blockquote><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// 法1
for (int i = 0; i &lt; n; i ++) {
    while(tt &gt; 0 &amp;&amp; nums[st[tt]] &gt; nums[i]) {
        l = Math.min(l, st[tt]);
        tt --;
    }
    st[++ tt] = i;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>// 法2
for (int i = 0; i &lt; n; i ++) {
    while(tt &gt; 0 &amp;&amp; nums[st[tt]] &lt; nums[i]) tt --;
    if (tt != 0) {
        l = Math.min(l, st[tt]);
    }
    st[++ tt] = i;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单调栈与数组分块" tabindex="-1"><a class="header-anchor" href="#单调栈与数组分块" aria-hidden="true">#</a> 单调栈与数组分块</h3><h3 id="单调栈求数组中满足某性质子数组的最长长度" tabindex="-1"><a class="header-anchor" href="#单调栈求数组中满足某性质子数组的最长长度" aria-hidden="true">#</a> 单调栈求数组中满足某性质子数组的最长长度</h3><blockquote><p>给你一个数组，求满足<code>i &lt; j</code> 且<code>a[i] &lt;= a[j]</code>的<code>j - i</code>的值。</p><p>典型题：</p><ul><li>962.最大宽度坡</li><li>1124.表现良好的最长时间段</li></ul></blockquote><p>类似这样的题目，乍一看似乎想不出为什么要用单调栈来解决问题。常规来讲，单调栈一般用来解决寻找当前节点左右两边离他最近的大于他或小于他的元素，一般能够求最短的距离，但是这个题是要求最长的距离。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>例如：
1 0 1 // a[idx]
0 1 2 // idx
可知答案是2 - 0 = 2
通过分析该题可得，如果用普通的单调栈求的话，会导致\`a[i] == a[j]\`的情况被漏掉，及求出答案为2 - 1 = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确思路为：</p><ol><li>求出<code>a[0]</code>的单调下降序列，并压入栈中。</li><li>倒序枚举每个元素，与栈顶元素进行判断，并更新最长距离。</li></ol><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>for (int i = 0; i &lt; n; i ++) {
    // 这个地方不取等号的原因是既然两个元素相等的话，那必然是先入栈的元素计算得到的长度更长(因为\`j - i\`在j不变的情况下，i越小，结果越大)。
    if (st == 0 || nums[st[tt]] &gt; nums[i]) {
        st[++ tt] = i;
    }
}

for (int i = n - 1; i &gt;= 0; i --) {
    while(tt &gt; 0 &amp;&amp; nums[st[tt]] &lt;= nums[i]) {
        ans = max(ans, i - st[tt]);
        tt --;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="求右侧相邻数中小于本身的个数" tabindex="-1"><a class="header-anchor" href="#求右侧相邻数中小于本身的个数" aria-hidden="true">#</a> 求右侧相邻数中小于本身的个数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nums<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>tt <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>st<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans <span class="token operator">+=</span> i <span class="token operator">-</span> st<span class="token punctuation">[</span>tt<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                tt <span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            st<span class="token punctuation">[</span><span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以这样写：</p><blockquote><p>时时刻刻要想起来单调栈的性质：</p><ul><li>弹出循环运行结束之后，单调栈中装的都是在某一侧<code>大于/小于</code>自己的元素</li></ul><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>while(tt &gt; 0 &amp;&amp; nums[st[tt]] &lt;= nums[i]) {
    tt --;
}
ans += tt; // 对于本题中维护的是单调递减栈，所以栈中存放的就是左侧大于本身的元素，栈顶是离自己最近的最大的元素。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>tt <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>st<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tt <span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            ans <span class="token operator">+=</span> tt<span class="token punctuation">;</span>
            st<span class="token punctuation">[</span><span class="token operator">++</span> tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),o=[e];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","单调栈.html.vue"]]);export{d as default};
