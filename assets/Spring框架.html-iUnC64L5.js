const n=JSON.parse('{"key":"v-16e156fc","path":"/interview/A5-Spring/Spring%E6%A1%86%E6%9E%B6.html","title":"使用springIOC解决程序耦合","lang":"zh-CN","frontmatter":{"description":"解决耦合的思路: 工厂模式解耦 在实际开发中可以把三层的对象的全类名都使用配置文件保存起来,当启动服务器应用加载的时候,创建这些对象的实例并保存在容器中. 在获取对象时,不使用new的方式,而是直接从容器中获取,这就是工厂设计模式. 使用springIOC解决程序耦合 配置bean: 在类的根路径下的resource目录下创建bean.xml文件,把对象的创建交给spring来管理. 每个``标签对应一个类,其class属性为该类的全类名,id属性为该类的id,在spring配置中,通过id获取类的对象. &lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt; &lt;beans xmlns=\\"http://www.springframework.org/schema/beans\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\"&gt; &lt;!--把对象的创建交给spring来管理--&gt; &lt;bean id=\\"accountService\\" class=\\"com.itheima.service.impl.AccountServiceImpl\\"&gt;&lt;/bean&gt; &lt;bean id=\\"accountDao\\" class=\\"com.itheima.dao.impl.AccountDaoImpl\\"&gt;&lt;/bean&gt; &lt;/beans&gt; 在表现层文件Client.java中通过容器创建对象.通过核心容器的getBean()方法获取具体对象. public class Client { public static void main(String[] args) { // 获取核心容器对象 ApplicationContext ac = new ClassPathXmlApplicationContext(\\"bean.xml\\"); // 根据id获取Bean对象 IAccountService as = (IAccountService)ac.getBean(\\"accountService\\"); // 执行as的具体方法 // ... } } 我们常用的容器有三种: ClassPathXmlApplicationContext,FileSystemXmlApplicationContext,AnnotationConfigApplicationContext. ClassPathXmlApplicationContext: 它是从类的根路径下加载配置文件 FileSystemXmlApplicationContext: 它是从磁盘路径上加载配置文件 AnnotationConfigApplicationContext: 读取注解创建容器 在这里插入图片描述","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A5-Spring/Spring%E6%A1%86%E6%9E%B6.html"}],["meta",{"property":"og:site_name","content":"Honyelchak\'s Blog"}],["meta",{"property":"og:title","content":"使用springIOC解决程序耦合"}],["meta",{"property":"og:description","content":"解决耦合的思路: 工厂模式解耦 在实际开发中可以把三层的对象的全类名都使用配置文件保存起来,当启动服务器应用加载的时候,创建这些对象的实例并保存在容器中. 在获取对象时,不使用new的方式,而是直接从容器中获取,这就是工厂设计模式. 使用springIOC解决程序耦合 配置bean: 在类的根路径下的resource目录下创建bean.xml文件,把对象的创建交给spring来管理. 每个``标签对应一个类,其class属性为该类的全类名,id属性为该类的id,在spring配置中,通过id获取类的对象. &lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt; &lt;beans xmlns=\\"http://www.springframework.org/schema/beans\\" xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" xsi:schemaLocation=\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\"&gt; &lt;!--把对象的创建交给spring来管理--&gt; &lt;bean id=\\"accountService\\" class=\\"com.itheima.service.impl.AccountServiceImpl\\"&gt;&lt;/bean&gt; &lt;bean id=\\"accountDao\\" class=\\"com.itheima.dao.impl.AccountDaoImpl\\"&gt;&lt;/bean&gt; &lt;/beans&gt; 在表现层文件Client.java中通过容器创建对象.通过核心容器的getBean()方法获取具体对象. public class Client { public static void main(String[] args) { // 获取核心容器对象 ApplicationContext ac = new ClassPathXmlApplicationContext(\\"bean.xml\\"); // 根据id获取Bean对象 IAccountService as = (IAccountService)ac.getBean(\\"accountService\\"); // 执行as的具体方法 // ... } } 我们常用的容器有三种: ClassPathXmlApplicationContext,FileSystemXmlApplicationContext,AnnotationConfigApplicationContext. ClassPathXmlApplicationContext: 它是从类的根路径下加载配置文件 FileSystemXmlApplicationContext: 它是从磁盘路径上加载配置文件 AnnotationConfigApplicationContext: 读取注解创建容器 在这里插入图片描述"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T09:42:10.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T09:42:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用springIOC解决程序耦合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T09:42:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"解决耦合的思路: 工厂模式解耦","slug":"解决耦合的思路-工厂模式解耦","link":"#解决耦合的思路-工厂模式解耦","children":[]},{"level":2,"title":"使用XML配置文件实现IOC","slug":"使用xml配置文件实现ioc","link":"#使用xml配置文件实现ioc","children":[{"level":3,"title":"bean标签","slug":"bean标签","link":"#bean标签","children":[]},{"level":3,"title":"bean的作用范围和生命周期","slug":"bean的作用范围和生命周期","link":"#bean的作用范围和生命周期","children":[]},{"level":3,"title":"实例化 Bean 的三种方式","slug":"实例化-bean-的三种方式","link":"#实例化-bean-的三种方式","children":[]}]},{"level":2,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[{"level":3,"title":"依赖注入的概念","slug":"依赖注入的概念","link":"#依赖注入的概念","children":[]},{"level":3,"title":"依赖注入的方法","slug":"依赖注入的方法","link":"#依赖注入的方法","children":[]}]},{"level":2,"title":"使用注解实现IOC","slug":"使用注解实现ioc","link":"#使用注解实现ioc","children":[{"level":3,"title":"常用注解","slug":"常用注解","link":"#常用注解","children":[]},{"level":3,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":3,"title":"动态代理的写法","slug":"动态代理的写法","link":"#动态代理的写法","children":[]},{"level":3,"title":"使用动态代理解决代码冗余现象","slug":"使用动态代理解决代码冗余现象","link":"#使用动态代理解决代码冗余现象","children":[]}]},{"level":2,"title":"AOP相关术语","slug":"aop相关术语","link":"#aop相关术语","children":[]},{"level":2,"title":"使用XML配置AOP","slug":"使用xml配置aop","link":"#使用xml配置aop","children":[{"level":3,"title":"切入点表达式","slug":"切入点表达式","link":"#切入点表达式","children":[]},{"level":3,"title":"Spring事务传播","slug":"spring事务传播","link":"#spring事务传播","children":[]}]}],"git":{"createdTime":1701499503000,"updatedTime":1701510130000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":2}]},"readingTime":{"minutes":13.15,"words":3944},"filePathRelative":"interview/A5-Spring/Spring框架.md","localizedDate":"2023年12月2日","excerpt":"<h2> 解决耦合的思路: 工厂模式解耦</h2>\\n<p>在实际开发中可以把三层的对象的全类名都使用配置文件保存起来,当启动服务器应用加载的时候,创建这些对象的实例并保存在<code>容器</code>中. 在获取对象时,不使用new的方式,而是直接从<code>容器</code>中获取,这就是<code>工厂设计模式</code>.</p>\\n<h1> 使用springIOC解决程序耦合</h1>\\n<ol>\\n<li>\\n<p>配置<code>bean</code>: 在类的根路径下的<code>resource</code>目录下创建<code>bean.xml</code>文件,把对象的创建交给spring来管理.\\n每个``标签对应一个类,其<code>class</code>属性为该类的全类名,<code>id</code>属性为该类的id,在spring配置中,通过<code>id</code>获取类的对象.</p>\\n<div class=\\"language-xml line-numbers-mode\\" data-ext=\\"xml\\"><pre class=\\"language-xml\\"><code><span class=\\"token prolog\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</span>\\n <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>beans</span> <span class=\\"token attr-name\\">xmlns</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>http://www.springframework.org/schema/beans<span class=\\"token punctuation\\">\\"</span></span>\\n        <span class=\\"token attr-name\\"><span class=\\"token namespace\\">xmlns:</span>xsi</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\\"token punctuation\\">\\"</span></span>\\n        <span class=\\"token attr-name\\"><span class=\\"token namespace\\">xsi:</span>schemaLocation</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>http://www.springframework.org/schema/beans\\n         http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n \\n     <span class=\\"token comment\\">&lt;!--把对象的创建交给spring来管理--&gt;</span>\\n     <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>bean</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>accountService<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>com.itheima.service.impl.AccountServiceImpl<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>bean</span><span class=\\"token punctuation\\">&gt;</span></span>\\n     <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>bean</span> <span class=\\"token attr-name\\">id</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>accountDao<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">class</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>com.itheima.dao.impl.AccountDaoImpl<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>bean</span><span class=\\"token punctuation\\">&gt;</span></span>\\n <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>beans</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>在表现层文件<code>Client.java</code>中通过<code>容器</code>创建对象.通过核心容器的<code>getBean()</code>方法获取具体对象.</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Client</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n         <span class=\\"token comment\\">// 获取核心容器对象</span>\\n         <span class=\\"token class-name\\">ApplicationContext</span> ac <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ClassPathXmlApplicationContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"bean.xml\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n         <span class=\\"token comment\\">// 根据id获取Bean对象</span>\\n         <span class=\\"token class-name\\">IAccountService</span> as  <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IAccountService</span><span class=\\"token punctuation\\">)</span>ac<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"accountService\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n         \\n         <span class=\\"token comment\\">// 执行as的具体方法</span>\\n         <span class=\\"token comment\\">// ...</span>\\n     <span class=\\"token punctuation\\">}</span>\\n <span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>我们常用的<code>容器</code>有三种: <code>ClassPathXmlApplicationContext</code>,<code>FileSystemXmlApplicationContext</code>,<code>AnnotationConfigApplicationContext</code>.</p>\\n<ul>\\n<li><code>ClassPathXmlApplicationContext</code>: 它是从类的根路径下加载配置文件</li>\\n<li><code>FileSystemXmlApplicationContext</code>: 它是从磁盘路径上加载配置文件</li>\\n<li><code>AnnotationConfigApplicationContext</code>: 读取注解创建容器</li>\\n</ul>\\n<figure><img src=\\"https://img-blog.csdnimg.cn/20190614160046551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25jZXB1X0NoZW4=,size_16,color_FFFFFF,t_70\\" alt=\\"在这里插入图片描述\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>在这里插入图片描述</figcaption></figure>\\n</li>\\n</ol>","autoDesc":true}');export{n as data};
