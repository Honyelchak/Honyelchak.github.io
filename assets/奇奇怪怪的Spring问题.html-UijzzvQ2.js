const n=JSON.parse(`{"key":"v-a51f272e","path":"/interview/A5-Spring/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84Spring%E9%97%AE%E9%A2%98.html","title":"Spring","lang":"zh-CN","frontmatter":{"description":"Spring 判断BeanDefinition的checkCandidate方法 Spring框架在扫描类创建BeanDefinition之后，为什么checkCandidate方法需要判断这么多？ protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException { if (!this.registry.containsBeanDefinition(beanName)) { return true; } BeanDefinition existingDef = this.registry.getBeanDefinition(beanName); BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition(); if (originatingDef != null) { existingDef = originatingDef; } // 是否兼容，如果兼容返回false表示不会重新注册到Spring容器中，如果不冲突则会抛异常。 if (isCompatible(beanDefinition, existingDef)) { return false; } throw new ConflictingBeanDefinitionException(\\"Annotation-specified bean name '\\" + beanName + \\"' for bean class [\\" + beanDefinition.getBeanClassName() + \\"] conflicts with existing, \\" + \\"non-compatible bean definition of same name and class [\\" + existingDef.getBeanClassName() + \\"]\\"); }","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A5-Spring/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E7%9A%84Spring%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"Spring 判断BeanDefinition的checkCandidate方法 Spring框架在扫描类创建BeanDefinition之后，为什么checkCandidate方法需要判断这么多？ protected boolean checkCandidate(String beanName, BeanDefinition beanDefinition) throws IllegalStateException { if (!this.registry.containsBeanDefinition(beanName)) { return true; } BeanDefinition existingDef = this.registry.getBeanDefinition(beanName); BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition(); if (originatingDef != null) { existingDef = originatingDef; } // 是否兼容，如果兼容返回false表示不会重新注册到Spring容器中，如果不冲突则会抛异常。 if (isCompatible(beanDefinition, existingDef)) { return false; } throw new ConflictingBeanDefinitionException(\\"Annotation-specified bean name '\\" + beanName + \\"' for bean class [\\" + beanDefinition.getBeanClassName() + \\"] conflicts with existing, \\" + \\"non-compatible bean definition of same name and class [\\" + existingDef.getBeanClassName() + \\"]\\"); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"判断BeanDefinition的checkCandidate方法","slug":"判断beandefinition的checkcandidate方法","link":"#判断beandefinition的checkcandidate方法","children":[]},{"level":2,"title":"属性文件中的账号密码加密如何实现？","slug":"属性文件中的账号密码加密如何实现","link":"#属性文件中的账号密码加密如何实现","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":0.85,"words":254},"filePathRelative":"interview/A5-Spring/奇奇怪怪的Spring问题.md","localizedDate":"2023年12月2日","excerpt":"<h1> Spring</h1>\\n<h2> 判断BeanDefinition的checkCandidate方法</h2>\\n<p>Spring框架在扫描类创建BeanDefinition之后，为什么checkCandidate方法需要判断这么多？</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">checkCandidate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> beanName<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">BeanDefinition</span> beanDefinition<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IllegalStateException</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>registry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">containsBeanDefinition</span><span class=\\"token punctuation\\">(</span>beanName<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token class-name\\">BeanDefinition</span> existingDef <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>registry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBeanDefinition</span><span class=\\"token punctuation\\">(</span>beanName<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">BeanDefinition</span> originatingDef <span class=\\"token operator\\">=</span> existingDef<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOriginatingBeanDefinition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>originatingDef <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        existingDef <span class=\\"token operator\\">=</span> originatingDef<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 是否兼容，如果兼容返回false表示不会重新注册到Spring容器中，如果不冲突则会抛异常。</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">isCompatible</span><span class=\\"token punctuation\\">(</span>beanDefinition<span class=\\"token punctuation\\">,</span> existingDef<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConflictingBeanDefinitionException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Annotation-specified bean name '\\"</span> <span class=\\"token operator\\">+</span> beanName <span class=\\"token operator\\">+</span>\\n            <span class=\\"token string\\">\\"' for bean class [\\"</span> <span class=\\"token operator\\">+</span> beanDefinition<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBeanClassName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"] conflicts with existing, \\"</span> <span class=\\"token operator\\">+</span>\\n            <span class=\\"token string\\">\\"non-compatible bean definition of same name and class [\\"</span> <span class=\\"token operator\\">+</span> existingDef<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBeanClassName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"]\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
