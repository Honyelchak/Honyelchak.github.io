import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-2Xbp2Heq.js";const e="/assets/image-20200225224818184-Tvd37I61.png",p="/assets/image-20200225225946278-8WUJcIC0.png",o="/assets/image-20200225230036444-Z2jd4oJA.png",c="/assets/image-20200225230122622-7ldMnNru.png",l="/assets/image-20200225230133181-7YH0SUfk.png",i="/assets/image-20200225230214365-n6FLR7Ua.png",u="/assets/image-20200225230818217-P6z4fY8-.png",r="/assets/image-20200225230949579-eyCH4fnR.png",d="/assets/image-20200225231012980-1Q_truIX.png",k="/assets/image-20200225231029959-1kv9jG-2.png",m="/assets/image-20200225231041448-N95uhkTI.png",v="/assets/image-20200225231053770-ZLy8MjQV.png",g="/assets/image-20200225231116049-ShvBvLK6.png",b={},h=t(`<h2 id="解决耦合的思路-工厂模式解耦" tabindex="-1"><a class="header-anchor" href="#解决耦合的思路-工厂模式解耦" aria-hidden="true">#</a> 解决耦合的思路: 工厂模式解耦</h2><p>在实际开发中可以把三层的对象的全类名都使用配置文件保存起来,当启动服务器应用加载的时候,创建这些对象的实例并保存在<code>容器</code>中. 在获取对象时,不使用new的方式,而是直接从<code>容器</code>中获取,这就是<code>工厂设计模式</code>.</p><h1 id="使用springioc解决程序耦合" tabindex="-1"><a class="header-anchor" href="#使用springioc解决程序耦合" aria-hidden="true">#</a> 使用springIOC解决程序耦合</h1><ol><li><p>配置<code>bean</code>: 在类的根路径下的<code>resource</code>目录下创建<code>bean.xml</code>文件,把对象的创建交给spring来管理. 每个\`\`标签对应一个类,其<code>class</code>属性为该类的全类名,<code>id</code>属性为该类的id,在spring配置中,通过<code>id</code>获取类的对象.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 
     <span class="token comment">&lt;!--把对象的创建交给spring来管理--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.service.impl.AccountServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.dao.impl.AccountDaoImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在表现层文件<code>Client.java</code>中通过<code>容器</code>创建对象.通过核心容器的<code>getBean()</code>方法获取具体对象.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 获取核心容器对象</span>
         <span class="token class-name">ApplicationContext</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;bean.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 根据id获取Bean对象</span>
         <span class="token class-name">IAccountService</span> as  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IAccountService</span><span class="token punctuation">)</span>ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;accountService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         
         <span class="token comment">// 执行as的具体方法</span>
         <span class="token comment">// ...</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们常用的<code>容器</code>有三种: <code>ClassPathXmlApplicationContext</code>,<code>FileSystemXmlApplicationContext</code>,<code>AnnotationConfigApplicationContext</code>.</p><ul><li><code>ClassPathXmlApplicationContext</code>: 它是从类的根路径下加载配置文件</li><li><code>FileSystemXmlApplicationContext</code>: 它是从磁盘路径上加载配置文件</li><li><code>AnnotationConfigApplicationContext</code>: 读取注解创建容器</li></ul><figure><img src="https://img-blog.csdnimg.cn/20190614160046551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25jZXB1X0NoZW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure></li></ol><h2 id="使用xml配置文件实现ioc" tabindex="-1"><a class="header-anchor" href="#使用xml配置文件实现ioc" aria-hidden="true">#</a> 使用XML配置文件实现IOC</h2><h3 id="bean标签" tabindex="-1"><a class="header-anchor" href="#bean标签" aria-hidden="true">#</a> bean标签</h3><ul><li>作用: 配置托管给spring的对象,默认情况下调用类的无参构造函数,若果没有无参构造函数则不能创建成功</li><li>属性: <ul><li>id: 指定对象在容器中的标识,将其作为参数传入getBean()方法可以获取获取对应对象.</li><li>class: 指定类的全类名,默认情况下调用无参构造函数</li><li>scope: 指定对象的作用范围,可选值如下 singleton: 单例对象,默认值 prototype: 多例对象 request: 将对象存入到web项目的request域中 session: 将对象存入到web项目的session域中 global session: 将对象存入到web项目集群的session域中,若不存在集群,则global session相当于session</li><li><code>init-method</code>：指定类中的初始化方法名称,在对象创建成功之后执行</li><li><code>destroy-method</code>：指定类中销毁方法名称,对<code>prototype</code>多例对象没有作用,因为多利对象的销毁时机不受<code>容器</code>控制</li></ul></li></ul><h3 id="bean的作用范围和生命周期" tabindex="-1"><a class="header-anchor" href="#bean的作用范围和生命周期" aria-hidden="true">#</a> bean的作用范围和生命周期</h3><figure><img src="`+e+`" alt="image-20200225224818184" tabindex="0" loading="lazy"><figcaption>image-20200225224818184</figcaption></figure><h3 id="实例化-bean-的三种方式" tabindex="-1"><a class="header-anchor" href="#实例化-bean-的三种方式" aria-hidden="true">#</a> 实例化 Bean 的三种方式</h3><ol><li><p><strong>使用默认无参构造函数创建对象</strong>: 默认情况下会根据默认无参构造函数来创建类对象,若Bean类中没有默认无参构造函数,将会创建失败.</p><ul><li>如果类中写了有参构造方法，若没有写无参构造方法的话 <ul><li>如果没有在配置文件中配置构造参数的话，配置文件会报错</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.maoritian.service.impl.AccountServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>使用静态工厂的方法创建对象:</strong></p><p>创建静态工厂如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 静态工厂,其静态方法用于创建对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactory</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IAccountService</span> <span class="token function">createAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>StaticFactory</code>类中的静态方法<code>createAccountService</code>创建对象,涉及到\`\`标签的属性:</p><ol><li><code>id</code>属性: 指定对象在容器中的标识,用于从容器中获取对象</li><li><code>class</code>属性: 指定静态工厂的全类名</li><li><code>factory-method</code>属性: 指定生产对象的静态方法</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.maoritian.factory.StaticFactory<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><blockquote><p>其实,类的构造函数也是静态方法,因此<code>默认无参构造函数</code>也可以看作一种<code>静态工厂方法</code></p></blockquote></li></ol></li><li><p><strong>使用实例工厂的方法创建对象</strong></p><p>创建实例工厂如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class InstanceFactory {
	public IAccountService createAccountService(){
		return new AccountServiceImpl();
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先创建实例工厂对象<code>instanceFactory</code>,通过调用其<code>createAccountService()</code>方法创建对象,涉及到\`\`标签的属性:</p><ol><li><code>factory-bean</code>属性: 指定实例工厂的<code>id</code></li><li><code>factory-method</code>属性: 指定实例工厂中生产对象的方法</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>instancFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.maoritian.factory.InstanceFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>instancFactory<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h2><h3 id="依赖注入的概念" tabindex="-1"><a class="header-anchor" href="#依赖注入的概念" aria-hidden="true">#</a> 依赖注入的概念</h3><p>依赖注入(<code>Dependency Injection</code>)是spring框架核心ioc的具体实现.</p><p><strong>我们等待框架通过配置的方式将持久层对象传入业务层,而不是直接在代码中new某个具体的持久化层实现类,这种方式称为依赖注入.</strong></p><h3 id="依赖注入的方法" tabindex="-1"><a class="header-anchor" href="#依赖注入的方法" aria-hidden="true">#</a> 依赖注入的方法</h3><p>因为我们是通过<strong>反射</strong>的方式来创建属性对象的,而不是使用new关键字,因此我们要指定创建出对象各字段的取值.</p><h4 id="_1、使用构造函数注入" tabindex="-1"><a class="header-anchor" href="#_1、使用构造函数注入" aria-hidden="true">#</a> 1、使用构造函数注入</h4><p>通过类默认的构造函数来给创建类的字段赋值,相当于调用类的构造方法.</p><p>涉及的标签: <code>&lt;constructor-arg&gt;</code>用来定义构造函数的参数,其属性可大致分为两类:</p><ol><li><p>寻找要赋值给的字段</p><ol><li><code>index</code>: 指定参数在构造函数参数列表的索引位置</li><li><code>type</code>: 指定参数在构造函数中的数据类型</li><li><code>name</code>: 指定参数在构造函数中的变量名,最常用的属性</li></ol></li><li><p>指定赋给字段的值</p><ol><li><code>value</code>: 给基本数据类型和String类型赋值</li><li><code>ref</code>: 给其它Bean类型的字段赋值,<code>ref</code>属性的值应为配置文件中配置的<code>Bean</code>的<code>id</code></li></ol></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用Date类的无参构造函数创建Date对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>now<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.util.Date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prototype<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.maoritian.service.impl.AccountServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myname<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>18<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- birthday字段为已经注册的bean对象,其id为now --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>now<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、使用set方法注入-更常用" tabindex="-1"><a class="header-anchor" href="#_2、使用set方法注入-更常用" aria-hidden="true">#</a> 2、使用set方法注入(更常用)</h4><p>在类中提供需要注入成员属性的set方法,创建对象只调用要赋值属性的set方法。</p><p>涉及的标签: <code>&lt;property&gt;</code>,用来定义要调用set方法的成员. 其主要属性可大致分为两类:</p><ol><li>指定要调用set方法赋值的成员字段 <ol><li><code>name</code>：要调用set方法赋值的成员字段</li></ol></li><li>指定赋给字段的值 <ol><li><code>value</code>: 给基本数据类型和String类型赋值</li><li><code>ref</code>: 给其它Bean类型的字段赋值,<code>ref</code>属性的值应为配置文件中配置的<code>Bean</code>的<code>id</code></li></ol></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用Date类的无参构造函数创建Date对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>now<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.util.Date<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prototype<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.maoritian.service.impl.AccountServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myname<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>21<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- birthday字段为已经注册的bean对象,其id为now --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>now<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注入集合字段" tabindex="-1"><a class="header-anchor" href="#注入集合字段" aria-hidden="true">#</a> 注入集合字段</h4><p>集合字段及其对应的标签按照<strong>集合的结构</strong>分为两类: 相同结构的集合标签之间可以互相替换.</p><ol><li><p>只有键的结构:</p><ol><li>数组字段: <code>标签表示集合,</code>标签表示集合内的成员.</li><li>List字段: <code>标签表示集合,</code>标签表示集合内的成员.</li><li>Set字段: <code>标签表示集合,</code>标签表示集合内的成员.</li></ol></li><li><p>键值对的结构:</p><ol><li>Map字段: map标签表示集合,<code>&lt;entry&gt;</code>标签表示集合内的键值对,其key属性表示键,value属性表示值.</li><li>Properties字段: <code>&lt;props&gt;</code>标签表示集合,<code>&lt;prop&gt;</code>标签表示键值对,其key属性表示键,标签内的内容表示值. 其中<code>&lt;map&gt;,&lt;props&gt;</code>标签之间,<code>&lt;entry&gt;,&lt;prop&gt;</code>标签之间可以互相替换使用.</li></ol></li></ol><h4 id="_3-区别" tabindex="-1"><a class="header-anchor" href="#_3-区别" aria-hidden="true">#</a> 3. 区别</h4><p><strong>本质区别：</strong></p><ul><li><p>设置注入是先通过调用无参构造器创建一个bean实例，然后调用对应的setter方法注入依赖关系；</p></li><li><p>而构造注入则直接调用有参数的构造器，当bean实例创建完成后，已经完成了依赖关系的注入。</p></li></ul><p><strong>应用场景区别：</strong></p><p>使用构造函数需要对所有字段进行赋值</p><h2 id="使用注解实现ioc" tabindex="-1"><a class="header-anchor" href="#使用注解实现ioc" aria-hidden="true">#</a> 使用注解实现IOC</h2><p>使用注解实现IOC,要将注解写在类的定义中</p><h3 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h3><h4 id="用于创建对象的注解" tabindex="-1"><a class="header-anchor" href="#用于创建对象的注解" aria-hidden="true">#</a> 用于创建对象的注解</h4><p>这些注解的作用相当于<code>bean.xml</code>中的<code>&lt;bean&gt;</code>标签</p><figure><img src="`+p+'" alt="image-20200225225946278" tabindex="0" loading="lazy"><figcaption>image-20200225225946278</figcaption></figure><blockquote><p><code>@Controller</code>,<code>@Service</code>,<code>@Repository</code>注解的作用和属性与<code>@Component</code>是一模一样的,可以相互替代,它们的作用是使三层对象的分别更加清晰.</p></blockquote><h4 id="用于注入数据的注解" tabindex="-1"><a class="header-anchor" href="#用于注入数据的注解" aria-hidden="true">#</a> 用于注入数据的注解</h4><p>这些注解的作用相当于<code>bean.xml</code>中的<code>&lt;property&gt;</code>标签.</p><figure><img src="'+o+'" alt="image-20200225230036444" tabindex="0" loading="lazy"><figcaption>image-20200225230036444</figcaption></figure><h4 id="用于改变作用范围的注解" tabindex="-1"><a class="header-anchor" href="#用于改变作用范围的注解" aria-hidden="true">#</a> 用于改变作用范围的注解</h4><p>这些注解的作用相当于<code>bean.xml</code>中的``标签的<code>scope</code>属性.</p><figure><img src="'+c+'" alt="image-20200225230122622" tabindex="0" loading="lazy"><figcaption>image-20200225230122622</figcaption></figure><h4 id="和生命周期相关的注解" tabindex="-1"><a class="header-anchor" href="#和生命周期相关的注解" aria-hidden="true">#</a> 和生命周期相关的注解</h4><figure><img src="'+l+'" alt="image-20200225230133181" tabindex="0" loading="lazy"><figcaption>image-20200225230133181</figcaption></figure><figure><img src="'+i+`" alt="image-20200225230214365" tabindex="0" loading="lazy"><figcaption>image-20200225230214365</figcaption></figure><hr><p>https://blog.csdn.net/ncepu_Chen/article/details/91903396</p><h3 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理" aria-hidden="true">#</a> 静态代理</h3><p>这种代理方式需要代理对象和目标对象实现一样的接口。</p><ul><li>优点： <ul><li>可以在不修改目标对象的前提下扩展目标对象的功能。</li></ul></li><li>缺点： <ul><li>冗余，由于代理对象要实现与目标对象一样的接口，会产生过多的代理类。</li><li>不宜维护，一旦接口增加方法，目标对象和代理对象都要进行修改。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 目标接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Log代理类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Target</span> target<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token class-name">Target</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始执行！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Test测试类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Target 执行中！！！！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态代理的写法" tabindex="-1"><a class="header-anchor" href="#动态代理的写法" aria-hidden="true">#</a> 动态代理的写法</h3><p>步骤：</p><ol><li><p>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</p></li><li><p>通过</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Proxy.newProxyInstance()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>interface
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例，它需要3个参数：</p><ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，<mark>至少需要传入一个接口进去；</mark></li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li><p>将返回的<code>Object</code>强制转型为接口。</p></li></ol><p>常用的动态代理分为两种</p><ol><li>基于接口的动态代理,使用JDK 官方的 Proxy 类,要求被代理者至少实现一个接口</li><li>基于子类的动态代理,使用第三方的 CGLib库,要求被代理类不能是final类.</li></ol><p>区别：</p><ul><li>JDK的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口。</li><li>如果想代理没有实现接口的类，就可以使用CGLIB实现。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>接口名 新对象名 <span class="token operator">=</span> <span class="token punctuation">(</span>接口名<span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
    被代理的对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>	<span class="token comment">// 被代理对象的类加载器,固定写法</span>
    被代理的对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>	<span class="token comment">// 被代理对象实现的所有接口,固定写法</span>
    <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// 匿名内部类,通过拦截被代理对象的方法来增强被代理对象</span>
        <span class="token comment">/* 被代理对象的任何方法执行时,都会被此方法拦截到
        	其参数如下:
                proxy: 代理对象的引用,不一定每次都用得到
                method: 被拦截到的方法对象
                args: 被拦截到的方法对象的参数
        	返回值:
        		被增强后的返回值
		*/</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;方法名&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            	<span class="token comment">// 增强方法的操作</span>
                rtValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>被代理的对象<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 增强方法的操作</span>
                <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>          
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用动态代理解决代码冗余现象" tabindex="-1"><a class="header-anchor" href="#使用动态代理解决代码冗余现象" aria-hidden="true">#</a> 使用动态代理解决代码冗余现象</h3><p>我们使用动态代理对上述Service进行改造,创建<code>BeanFactory</code>类作为service层对象工厂,通过其<code>getAccountService</code>方法得到业务层对象.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 用于创建Service的代理对象的工厂</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">IAccountService</span> accountService<span class="token punctuation">;</span>		<span class="token comment">// 被增强的service对象</span>
	<span class="token keyword">private</span> <span class="token class-name">TransactionManager</span> txManager<span class="token punctuation">;</span>		<span class="token comment">// 事务控制工具类</span>

	<span class="token comment">// 成员变量的set方法,以便Spring容器注入</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTxManager</span><span class="token punctuation">(</span><span class="token class-name">TransactionManager</span> txManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">=</span> txManager<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setAccountService</span><span class="token punctuation">(</span><span class="token class-name">IAccountService</span> accountService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>accountService <span class="token operator">=</span> accountService<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 获取增强后的Service对象</span>
	<span class="token keyword">public</span> <span class="token class-name">IAccountService</span> <span class="token function">getAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">IAccountService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>accountService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			accountService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 增强方法</span>
				<span class="token annotation punctuation">@Override</span>
				<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
					<span class="token class-name">Object</span> rtValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
					<span class="token keyword">try</span> <span class="token punctuation">{</span>
						<span class="token comment">//1.开启事务</span>
						txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token comment">//2.执行操作</span>
						rtValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>accountService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token comment">//3.提交事务</span>
						txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token comment">//4.返回结果</span>
						<span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>
					<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token comment">//5.回滚操作</span>
						txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
						<span class="token comment">//6.释放连接</span>
						txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--配置beanfactory--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beanFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.maoritian.factory.BeanFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 注入service --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 注入事务控制工具 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用springaop解决代码冗余" tabindex="-1"><a class="header-anchor" href="#使用springaop解决代码冗余" aria-hidden="true">#</a> 使用SpringAOP解决代码冗余</h1><h2 id="aop相关术语" tabindex="-1"><a class="header-anchor" href="#aop相关术语" aria-hidden="true">#</a> AOP相关术语</h2><ul><li><code>Joinpoint</code>(<code>连接点</code>): 被拦截到的方法.</li><li><code>Pointcut</code>(<code>切入点</code>): 我们对其进行增强的方法.</li><li><code>Advice</code>(<code>通知</code>/<code>增强</code>): 对切入点进行的增强操作 <ul><li>包括<code>前置通知</code>,<code>后置通知</code>,<code>异常通知</code>,<code>最终通知</code>,<code>环绕通知</code></li></ul></li><li><code>Weaving</code>(<code>织入</code>): 是指把增强应用到目标对象来创建新的代理对象的过程。</li><li><strong><code>Aspect</code>(<code>切面</code>): 是切入点和通知的结合</strong></li></ul><h2 id="使用xml配置aop" tabindex="-1"><a class="header-anchor" href="#使用xml配置aop" aria-hidden="true">#</a> 使用XML配置AOP</h2><ol><li>在<code>bean.xml中引入约束</code>并将通知类注入Spring容器中</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;
	
    &lt;!--通知类--&gt;
	&lt;bean id=&quot;logger&quot; class=&quot;cn.maoritian.utils.Logger&quot;&gt;&lt;/bean&gt;
&lt;/beans&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用<code>&lt;aop:config&gt;</code>标签声明AOP配置,所有关于AOP配置的代码都写在\`\`标签内</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;aop:config&gt;
	&lt;!-- AOP配置的代码都写在此处 --&gt;
&lt;/aop:config&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>使用<code>&lt;aop:aspect</code>标签配置切面,其属性如下</p><ol><li><code>id</code>: 指定切面的<code>id</code></li><li><code>ref</code>: 引用通知类的<code>id</code></li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logger<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   	<span class="token comment">&lt;!--配置通知的类型要写在此处--&gt;</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>aop:pointcut</code>标签配置切入点表达式,指定对哪些方法进行增强,其属性如下</p><ol><li><code>id</code>: 指定切入点表达式的<code>id</code></li><li><code>expression</code>: 指定切入点表达式</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logger<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* cn.maoritian.service.impl.*.*(..))<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用<code>&lt;aop:xxx&gt;</code>标签配置对应类型的通知方法</p></li></ol><figure><img src="`+u+`" alt="image-20200225230818217" tabindex="0" loading="lazy"><figcaption>image-20200225230818217</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logger<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--指定切入点表达式--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* cn,maoritian.service.impl.*.*(..))<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>pointcut</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--配置各种类型的通知--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>printLogBefore<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>printLogAfterReturning<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>printLogAfterThrowing<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>printLogAfter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pt1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!--环绕通知一般单独使用--&gt;</span>       
        <span class="token comment">&lt;!-- &lt;aop:around method=&quot;printLogAround&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:around&gt; --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切入点表达式" tabindex="-1"><a class="header-anchor" href="#切入点表达式" aria-hidden="true">#</a> 切入点表达式</h3><ul><li>切入点表达式的写法: <code>execution([修饰符] 返回值类型 包路径.类名.方法名(参数))</code></li><li>切入点表达式的省略写法:</li></ul><figure><img src="`+r+'" alt="image-20200225230949579" tabindex="0" loading="lazy"><figcaption>image-20200225230949579</figcaption></figure><figure><img src="'+d+'" alt="image-20200225231012980" tabindex="0" loading="lazy"><figcaption>image-20200225231012980</figcaption></figure><figure><img src="'+k+'" alt="image-20200225231029959" tabindex="0" loading="lazy"><figcaption>image-20200225231029959</figcaption></figure><figure><img src="'+m+'" alt="image-20200225231041448" tabindex="0" loading="lazy"><figcaption>image-20200225231041448</figcaption></figure><figure><img src="'+v+'" alt="image-20200225231053770" tabindex="0" loading="lazy"><figcaption>image-20200225231053770</figcaption></figure><figure><img src="'+g+'" alt="image-20200225231116049" tabindex="0" loading="lazy"><figcaption>image-20200225231116049</figcaption></figure><h3 id="spring事务传播" tabindex="-1"><a class="header-anchor" href="#spring事务传播" aria-hidden="true">#</a> Spring事务传播</h3><ul><li>require <ul><li>如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。</li></ul></li><li>supports <ul><li>如果存在一个事务，就支持当前事务，如果没有事务就，非事务的执行。</li></ul></li><li>mandatory <ul><li>如果存在一个事务，就支持当前事务，如果不存在，就报异常。</li></ul></li><li>requires_new <ul><li>需要使用 JtaTransactionManager作为事务管理器。 它会开启一个新的事务。如果一个事务已经存在，则先将这个存在的事务挂起。</li></ul></li><li>not_supproted <ul><li>总是非事务的执行，并挂起任何存在的事务。</li><li>也需要事务管理器。</li></ul></li><li>_never <ul><li>总是非事务的执行，如果存在一个活动事务，则抛出异常。</li></ul></li><li>_nested <ul><li>如果当前存在事务，则在嵌套事务中执行，如果没有事务，则执行与required类似的操作。</li></ul></li></ul>',91),q=[h];function f(x,y){return a(),s("div",null,q)}const _=n(b,[["render",f],["__file","Spring框架.html.vue"]]);export{_ as default};
