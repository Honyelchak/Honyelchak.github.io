const l=JSON.parse(`{"key":"v-1659e245","path":"/interview/A4-Java/Java%E5%9F%BA%E7%A1%80.html","title":"","lang":"zh-CN","frontmatter":{"description":"1. 面向对象和面向过程的区别 面向过程性能比面向对象高 Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。 面向对象易维护、易复用、扩展、低耦合 2. Java语言有哪些特点？ 简单易学 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 可靠性； 安全性； 支持多线程","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A4-Java/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:description","content":"1. 面向对象和面向过程的区别 面向过程性能比面向对象高 Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。 面向对象易维护、易复用、扩展、低耦合 2. Java语言有哪些特点？ 简单易学 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 可靠性； 安全性； 支持多线程"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"1. 面向对象和面向过程的区别","slug":"_1-面向对象和面向过程的区别","link":"#_1-面向对象和面向过程的区别","children":[]},{"level":2,"title":"2. Java语言有哪些特点？","slug":"_2-java语言有哪些特点","link":"#_2-java语言有哪些特点","children":[]},{"level":2,"title":"3. 关于 JVM JDK 和 JRE 最详细通俗的解答","slug":"_3-关于-jvm-jdk-和-jre-最详细通俗的解答","link":"#_3-关于-jvm-jdk-和-jre-最详细通俗的解答","children":[{"level":3,"title":"JDK 和 JRE","slug":"jdk-和-jre","link":"#jdk-和-jre","children":[]}]},{"level":2,"title":"4. Oracle JDK 和 OpenJDK 的对比","slug":"_4-oracle-jdk-和-openjdk-的对比","link":"#_4-oracle-jdk-和-openjdk-的对比","children":[]},{"level":2,"title":"5. Java和C++的区别?","slug":"_5-java和c-的区别","link":"#_5-java和c-的区别","children":[]},{"level":2,"title":"6. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?","slug":"_6-什么是-java-程序的主类-应用程序和小程序的主类有何不同","link":"#_6-什么是-java-程序的主类-应用程序和小程序的主类有何不同","children":[]},{"level":2,"title":"7. 字符型常量和字符串常量的区别?","slug":"_7-字符型常量和字符串常量的区别","link":"#_7-字符型常量和字符串常量的区别","children":[]},{"level":2,"title":"8. 构造器 Constructor 是否可被 override?","slug":"_8-构造器-constructor-是否可被-override","link":"#_8-构造器-constructor-是否可被-override","children":[]},{"level":2,"title":"9. 重载和重写的区别","slug":"_9-重载和重写的区别","link":"#_9-重载和重写的区别","children":[]},{"level":2,"title":"10. Java 面向对象编程三大特性: 封装 继承 多态","slug":"_10-java-面向对象编程三大特性-封装-继承-多态","link":"#_10-java-面向对象编程三大特性-封装-继承-多态","children":[{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]}]},{"level":2,"title":"11. String 、StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?","slug":"_11-string-、stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的","link":"#_11-string-、stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的","children":[]},{"level":2,"title":"12. 自动装箱与拆箱","slug":"_12-自动装箱与拆箱","link":"#_12-自动装箱与拆箱","children":[]},{"level":2,"title":"13. 在一个静态方法内调用一个非静态成员为什么是非法的?","slug":"_13-在一个静态方法内调用一个非静态成员为什么是非法的","link":"#_13-在一个静态方法内调用一个非静态成员为什么是非法的","children":[]},{"level":2,"title":"14. 在 Java 中定义一个不做事且没有参数的构造方法的作用","slug":"_14-在-java-中定义一个不做事且没有参数的构造方法的作用","link":"#_14-在-java-中定义一个不做事且没有参数的构造方法的作用","children":[]},{"level":2,"title":"15. 接口和抽象类的区别是什么？","slug":"_15-接口和抽象类的区别是什么","link":"#_15-接口和抽象类的区别是什么","children":[]},{"level":2,"title":"16. 成员变量与局部变量的区别有哪些？","slug":"_16-成员变量与局部变量的区别有哪些","link":"#_16-成员变量与局部变量的区别有哪些","children":[]},{"level":2,"title":"17. 对象的相等与指向他们的引用相等,两者有什么不同?","slug":"_17-对象的相等与指向他们的引用相等-两者有什么不同","link":"#_17-对象的相等与指向他们的引用相等-两者有什么不同","children":[]},{"level":2,"title":"18. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?","slug":"_18-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","link":"#_18-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","children":[]},{"level":2,"title":"19. == 与 equals(重要)","slug":"_19-与-equals-重要","link":"#_19-与-equals-重要","children":[]},{"level":2,"title":"20. hashCode 与 equals (重要)","slug":"_20-hashcode-与-equals-重要","link":"#_20-hashcode-与-equals-重要","children":[{"level":3,"title":"hashCode()介绍","slug":"hashcode-介绍","link":"#hashcode-介绍","children":[]},{"level":3,"title":"为什么要有 hashCode","slug":"为什么要有-hashcode","link":"#为什么要有-hashcode","children":[]},{"level":3,"title":"hashCode（）与equals（）的相关规定","slug":"hashcode-与equals-的相关规定","link":"#hashcode-与equals-的相关规定","children":[]}]},{"level":2,"title":"21. 为什么Java中只有值传递？","slug":"_21-为什么java中只有值传递","link":"#_21-为什么java中只有值传递","children":[]},{"level":2,"title":"22. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?","slug":"_22-简述线程、程序、进程的基本概念。以及他们之间关系是什么","link":"#_22-简述线程、程序、进程的基本概念。以及他们之间关系是什么","children":[]},{"level":2,"title":"23. 线程有哪些基本状态?","slug":"_23-线程有哪些基本状态","link":"#_23-线程有哪些基本状态","children":[]},{"level":2,"title":"24.关于 final 关键字的一些总结","slug":"_24-关于-final-关键字的一些总结","link":"#_24-关于-final-关键字的一些总结","children":[]},{"level":2,"title":"25 Java 中的异常处理","slug":"_25-java-中的异常处理","link":"#_25-java-中的异常处理","children":[{"level":3,"title":"Throwable类常用方法","slug":"throwable类常用方法","link":"#throwable类常用方法","children":[]},{"level":3,"title":"异常处理总结","slug":"异常处理总结","link":"#异常处理总结","children":[]},{"level":3,"title":"checked异常和unchecked异常","slug":"checked异常和unchecked异常","link":"#checked异常和unchecked异常","children":[]}]},{"level":2,"title":"26 Java序列化中如果有些字段不想进行序列化，怎么办？","slug":"_26-java序列化中如果有些字段不想进行序列化-怎么办","link":"#_26-java序列化中如果有些字段不想进行序列化-怎么办","children":[]},{"level":2,"title":"27 获取用键盘输入常用的两种方法","slug":"_27-获取用键盘输入常用的两种方法","link":"#_27-获取用键盘输入常用的两种方法","children":[]},{"level":2,"title":"28 Java 中 IO 流","slug":"_28-java-中-io-流","link":"#_28-java-中-io-流","children":[]},{"level":2,"title":"29. 常见关键字总结:static,final,this,super","slug":"_29-常见关键字总结-static-final-this-super","link":"#_29-常见关键字总结-static-final-this-super","children":[{"level":3,"title":"static 关键字主要有以下四种使用场景","slug":"static-关键字主要有以下四种使用场景","link":"#static-关键字主要有以下四种使用场景","children":[]},{"level":3,"title":"修饰成员变量和成员方法(常用)","slug":"修饰成员变量和成员方法-常用","link":"#修饰成员变量和成员方法-常用","children":[]},{"level":3,"title":"静态代码块","slug":"静态代码块","link":"#静态代码块","children":[]},{"level":3,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]},{"level":3,"title":"静态导包","slug":"静态导包","link":"#静态导包","children":[]},{"level":3,"title":"静态方法与非静态方法","slug":"静态方法与非静态方法","link":"#静态方法与非静态方法","children":[]},{"level":3,"title":"static{}静态代码块与{}非静态代码块(构造代码块)","slug":"static-静态代码块与-非静态代码块-构造代码块","link":"#static-静态代码块与-非静态代码块-构造代码块","children":[]}]},{"level":2,"title":"30. Collections 工具类和 Arrays 工具类常见方法总结","slug":"_30-collections-工具类和-arrays-工具类常见方法总结","link":"#_30-collections-工具类和-arrays-工具类常见方法总结","children":[{"level":3,"title":"31. 深拷贝 vs 浅拷贝","slug":"_31-深拷贝-vs-浅拷贝","link":"#_31-深拷贝-vs-浅拷贝","children":[]},{"level":3,"title":"32. 为什么在Java中String是final的","slug":"_32-为什么在java中string是final的","link":"#_32-为什么在java中string是final的","children":[]}]},{"level":2,"title":"31.内部类和静态内部类的区别？","slug":"_31-内部类和静态内部类的区别","link":"#_31-内部类和静态内部类的区别","children":[]},{"level":2,"title":"32. 关于String a=new String(\\"abc\\")与String a=\\"abc\\"的各创建了几个对象","slug":"_32-关于string-a-new-string-abc-与string-a-abc-的各创建了几个对象","link":"#_32-关于string-a-new-string-abc-与string-a-abc-的各创建了几个对象","children":[]},{"level":2,"title":"33. 子类初始化执行父类的构造方法","slug":"_33-子类初始化执行父类的构造方法","link":"#_33-子类初始化执行父类的构造方法","children":[]},{"level":2,"title":"34. 自定义注解","slug":"_34-自定义注解","link":"#_34-自定义注解","children":[{"level":3,"title":"元注解","slug":"元注解","link":"#元注解","children":[]},{"level":3,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]}]},{"level":2,"title":"35. String中的Intern()","slug":"_35-string中的intern","link":"#_35-string中的intern","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":40.07,"words":12022},"filePathRelative":"interview/A4-Java/Java基础.md","localizedDate":"2023年12月2日","excerpt":"<h2> 1. 面向对象和面向过程的区别</h2>\\n<ul>\\n<li>面向过程性能比面向对象高\\n<ul>\\n<li>Java性能差的主要原因并不是因为它是面向对象语言，而是Java是<mark>半编译语言</mark>，最终的执行代码并不是可以直接被CPU执行的二进制机械码。而面向过程语言大多都是<mark>直接编译成机械码</mark>在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</li>\\n</ul>\\n</li>\\n<li>面向对象易维护、易复用、扩展、低耦合</li>\\n</ul>\\n<h2> 2. Java语言有哪些特点？</h2>\\n<ul>\\n<li>简单易学</li>\\n<li>面向对象（封装，继承，多态）；</li>\\n<li>平台无关性（ Java 虚拟机实现平台无关性）；</li>\\n<li>可靠性；</li>\\n<li>安全性；</li>\\n<li>支持多线程</li>\\n</ul>","autoDesc":true}`);export{l as data};
