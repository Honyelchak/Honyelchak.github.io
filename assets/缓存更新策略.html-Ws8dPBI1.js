const e=JSON.parse(`{"key":"v-c75ffe76","path":"/interview/A3-%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5.html","title":"","lang":"zh-CN","frontmatter":{"description":"常见的缓存更新策略(三种) 实际开发过程中，MySQL和Redis的更新策略用的就是Cache Aside策略，另外两种策略应用不了。 1、Cache Aside(旁路缓存)策略 应用程序直接和[数据库、缓存]进行交互，并负责对缓存的维护，该策略又可以细分为读策略和写策略。 img 写策略 先更新数据库中的数据，再删除缓存中的数据","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A3-%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E7%BC%93%E5%AD%98%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:description","content":"常见的缓存更新策略(三种) 实际开发过程中，MySQL和Redis的更新策略用的就是Cache Aside策略，另外两种策略应用不了。 1、Cache Aside(旁路缓存)策略 应用程序直接和[数据库、缓存]进行交互，并负责对缓存的维护，该策略又可以细分为读策略和写策略。 img 写策略 先更新数据库中的数据，再删除缓存中的数据"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"常见的缓存更新策略(三种)","slug":"常见的缓存更新策略-三种","link":"#常见的缓存更新策略-三种","children":[{"level":3,"title":"1、Cache Aside(旁路缓存)策略","slug":"_1、cache-aside-旁路缓存-策略","link":"#_1、cache-aside-旁路缓存-策略","children":[]},{"level":3,"title":"2、Read/Write Through(读写/写穿)策略","slug":"_2、read-write-through-读写-写穿-策略","link":"#_2、read-write-through-读写-写穿-策略","children":[]},{"level":3,"title":"3、Write Back(写回)策略","slug":"_3、write-back-写回-策略","link":"#_3、write-back-写回-策略","children":[]}]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":4.25,"words":1274},"filePathRelative":"interview/A3-数据库/Redis/缓存更新策略.md","localizedDate":"2023年12月2日","excerpt":"<h2> 常见的缓存更新策略(三种)</h2>\\n<blockquote>\\n<p>实际开发过程中，MySQL和Redis的更新策略用的就是<code>Cache Aside</code>策略，另外两种策略应用不了。</p>\\n</blockquote>\\n<h3> 1、Cache Aside(旁路缓存)策略</h3>\\n<p>应用程序直接和[数据库、缓存]进行交互，并负责对缓存的维护，该策略又可以细分为<code>读策略</code>和<code>写策略</code>。</p>\\n<figure><figcaption>img</figcaption></figure>\\n<h4> 写策略</h4>\\n<ul>\\n<li><code>先更新</code>数据库中的数据，<code>再删除</code>缓存中的数据</li>\\n</ul>","autoDesc":true}`);export{e as data};
