import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-2Xbp2Heq.js";const c={},t=e(`<h2 id="需要注意的点" tabindex="-1"><a class="header-anchor" href="#需要注意的点" aria-hidden="true">#</a> 需要注意的点</h2><h3 id="_1、-使用synchronized时-要注意虚假唤醒的问题" tabindex="-1"><a class="header-anchor" href="#_1、-使用synchronized时-要注意虚假唤醒的问题" aria-hidden="true">#</a> 1、 使用synchronized时，要注意虚假唤醒的问题</h3><p>即用wait()的时候，外层要套一个while循环。</p><blockquote><p>虚假唤醒是指在没有明确的<code>notify()</code>调用的情况下，<code>wait()</code>方法有时会返回，即使没有其他线程通知它。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">while</span><span class="token punctuation">(</span>条件不满足<span class="token punctuation">)</span> {
	wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、自旋的时候可以调用thread-yield-让出cpu" tabindex="-1"><a class="header-anchor" href="#_2、自旋的时候可以调用thread-yield-让出cpu" aria-hidden="true">#</a> 2、自旋的时候可以调用<code>Thread.yield()</code>让出CPU</h3><h3 id="_3、lock-和unlock-的位置" tabindex="-1"><a class="header-anchor" href="#_3、lock-和unlock-的位置" aria-hidden="true">#</a> 3、lock()和unlock()的位置</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token keyword">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
  <span class="token keyword">lock</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lock.lock();可以放在try外面，避免加锁失败了还要无故释放锁</p>`,9),o=[t];function i(l,d){return a(),s("div",null,o)}const u=n(c,[["render",i],["__file","多线程题目.html.vue"]]);export{u as default};
