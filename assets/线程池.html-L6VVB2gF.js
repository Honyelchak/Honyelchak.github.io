import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-2Xbp2Heq.js";const e="/assets/image-20210410100926811-c_9gbmbY.png",t="/assets/image-20230826222050562-steNZLxu.png",o={},c=p(`<h2 id="java线程池" tabindex="-1"><a class="header-anchor" href="#java线程池" aria-hidden="true">#</a> Java线程池</h2><p>JUC提供的ThreadPoolExecutor类</p><h3 id="线程池是什么" tabindex="-1"><a class="header-anchor" href="#线程池是什么" aria-hidden="true">#</a> 线程池是什么</h3><p>线程池是一种池化思想管理线程的工具。</p><p>线程过多会带来额外的开销，其中包括<strong>创建销毁线程的开销，调度线程的开销等等</strong>，同时也降低了计算机的整体性能。</p><p>线程池维护了多个线程，等待管理者分配可并发执行的任务。</p><ul><li><strong>降低资源消耗</strong>：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li><li><strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行。</li><li><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li><li><strong>提供更多更强大的功能</strong>：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li></ul><blockquote><p>**池化：**为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。</p></blockquote><h3 id="线程池解决的问题是什么" tabindex="-1"><a class="header-anchor" href="#线程池解决的问题是什么" aria-hidden="true">#</a> 线程池解决的问题是什么？</h3><p>在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：</p><ol><li>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</li><li>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</li><li>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</li></ol><p>在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。</p><h3 id="线程池的核心设计与实现" tabindex="-1"><a class="header-anchor" href="#线程池的核心设计与实现" aria-hidden="true">#</a> 线程池的核心设计与实现</h3><p>前边我们了解到：线程池是一种通过池化思想，帮助我们管理线程而获取并发性的工具。在Java中的体现是<code>ThreadPoolExecutor</code>类。</p><h4 id="总体设计" tabindex="-1"><a class="header-anchor" href="#总体设计" aria-hidden="true">#</a> 总体设计</h4><p>Java中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。</p><figure><img src="https://p1.meituan.net/travelcube/912883e51327e0c7a9d753d11896326511272.png" alt="图1 ThreadPoolExecutor UML类图" tabindex="0" loading="lazy"><figcaption>图1 ThreadPoolExecutor UML类图</figcaption></figure><p>ThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：<strong>将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Executes the given command at some time in the future.  The command
     * may execute in a new thread, in a pooled thread, or in the calling
     * thread, at the discretion of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Executor</span></span></span><span class="token punctuation">}</span> implementation.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">command</span> the runnable task
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">RejectedExecutionException</span></span> if this task cannot be
     * accepted for execution
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if command is null
     */</span>
    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）<strong>提供了管控线程池的方法，比如停止线程池的运行</strong>。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。</p><figure><img src="`+e+`" alt="image-20210410100926811" tabindex="0" loading="lazy"><figcaption>image-20210410100926811</figcaption></figure><p>ThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：</p><figure><img src="https://p0.meituan.net/travelcube/77441586f6b312a54264e3fcf5eebe2663494.png" alt="图2 ThreadPoolExecutor运行流程" tabindex="0" loading="lazy"><figcaption>图2 ThreadPoolExecutor运行流程</figcaption></figure><p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。</p><h4 id="生命周期管理" tabindex="-1"><a class="header-anchor" href="#生命周期管理" aria-hidden="true">#</a> 生命周期管理</h4><p>线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：<strong>运行状态(runState)和线程数量 (workerCount)</strong>。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>ctl</code>这个AtomicInteger类型，是<strong>对线程池的运行状态和线程池中有效线程的数量</strong>进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，<strong>高3位保存runState，低29位保存workerCount</strong>，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。</p><p>关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token constant">CAPACITY</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//计算当前运行状态</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token constant">CAPACITY</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">//计算当前线程数量</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment">//通过状态和线程数生成ctl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p0.meituan.net/travelcube/62853fa44bfa47d63143babe3b5a4c6e82532.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">11100000000000000000000000000000</span> <span class="token constant">RUNNING</span> <span class="token number">111</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token number">00000000000000000000000000000000</span> <span class="token constant">SHUTDOWN</span> <span class="token number">000</span> <span class="token number">0</span>
<span class="token number">00100000000000000000000000000000</span> <span class="token constant">STOP</span> <span class="token number">001</span> <span class="token number">1</span>
<span class="token number">01000000000000000000000000000000</span> <span class="token constant">TIDYING</span> <span class="token number">010</span> <span class="token number">2</span>
<span class="token number">01100000000000000000000000000000</span> <span class="token constant">TERMINATED</span> <span class="token number">011</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其生命周期转换如下入所示：</p><figure><img src="https://p0.meituan.net/travelcube/582d1606d57ff99aa0e5f8fc59c7819329028.png" alt="图3 线程池生命周期" tabindex="0" loading="lazy"><figcaption>图3 线程池生命周期</figcaption></figure><h4 id="任务执行机制" tabindex="-1"><a class="header-anchor" href="#任务执行机制" aria-hidden="true">#</a> 任务执行机制</h4><h5 id="任务调度" tabindex="-1"><a class="header-anchor" href="#任务调度" aria-hidden="true">#</a> 任务调度</h5><p>任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。</p><p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p><ol><li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li><li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li><li>如果workerCount &gt;= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li><li>如果workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li><li>如果workerCount &gt;= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li></ol><figure><img src="https://p0.meituan.net/travelcube/31bad766983e212431077ca8da92762050214.png" alt="图4 任务调度流程" tabindex="0" loading="lazy"><figcaption>图4 任务调度流程</figcaption></figure><h5 id="任务缓冲" tabindex="-1"><a class="header-anchor" href="#任务缓冲" aria-hidden="true">#</a> 任务缓冲</h5><p>任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。</p><p>阻塞队列(BlockingQueue)是一个<strong>支持两个附加操作的队列</strong>。这两个附加的操作是：<strong>在队列为空时，获取元素的线程会等待队列变为非空</strong>。<strong>当队列满时，存储元素的线程会等待队列可用</strong>。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p><figure><img src="https://p1.meituan.net/travelcube/f4d89c87acf102b45be8ccf3ed83352a9497.png" alt="图5 阻塞队列" tabindex="0" loading="lazy"><figcaption>图5 阻塞队列</figcaption></figure><p>使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：</p><figure><img src="https://p0.meituan.net/travelcube/725a3db5114d95675f2098c12dc331c3316963.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="任务申请" tabindex="-1"><a class="header-anchor" href="#任务申请" aria-hidden="true">#</a> 任务申请</h5><h5 id="任务拒绝" tabindex="-1"><a class="header-anchor" href="#任务拒绝" aria-hidden="true">#</a> 任务拒绝</h5><p>任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p><p>拒绝策略是一个接口，其设计如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：</p><figure><img src="https://p0.meituan.net/travelcube/9ffb64cc4c64c0cb8d38dac01c89c905178456.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="threadpoolexecutor底层原理分析" tabindex="-1"><a class="header-anchor" href="#threadpoolexecutor底层原理分析" aria-hidden="true">#</a> ThreadPoolExecutor底层原理分析</h2><p>线程池执行任务的具体流程是怎样的？</p><p>ThreadPoolExecutor中提供了两种执行任务的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上submit中最终还是调用的execute()方法，只不过会返回一个Future对象，用来获取任务执行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> ftask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>execute(Runnable command)方法执行时会分为三步：</p><figure><img src="`+t+`" alt="image-20230826222050562" tabindex="0" loading="lazy"><figcaption>image-20230826222050562</figcaption></figure><p>注意：</p><ol><li>提交一个Runnable时，不管当前线程池中的线程是否空闲，只要数量小于核心线程数就会创建新线程。</li><li><mark>ThreadPoolExecutor相当于是非公平的，比如队列满了之后提交的Runnable可能会比正在排队的Runnable先执行。</mark></li></ol><h2 id="线程池的五种状态" tabindex="-1"><a class="header-anchor" href="#线程池的五种状态" aria-hidden="true">#</a> 线程池的五种状态</h2><p>线程池有五种状态：</p><ul><li><code>RUNNING</code>：会接收新任务并且会处理队列中的任务</li><li><code>SHUTDOWN</code>：不会接收新任务并且会处理队列中的任务</li><li><code>STOP</code>：不会接收新任务并且不会处理队列中的任务，并且<code>会中断在处理的任务</code>（注意：一个任务能不能被中断得看任务本身）</li><li><code>TIDYING</code>：所有任务都终止了，线程池中也没有线程了，这样线程池的状态就会转为TIDYING，一旦达到此状态，就会调用线程池的terminated()</li><li><code>TERMINATED</code>：terminated()执行完之后就会转变为TERMINATED</li></ul><p>这五种状态并不能任意转换，只会有以下几种转换情况：</p><ul><li>RUNNING -&gt; SHUTDOWN：手动调用shutdown()触发，或者线程池对象GC时会调用finalize()从而调用shutdown()</li><li>(RUNNING or SHUTDOWN) -&gt; STOP：调用shutdownNow()触发，如果先调shutdown()紧着调shutdownNow()，就会发生SHUTDOWN -&gt; STOP</li><li>SHUTDOWN -&gt; TIDYING：队列为空并且线程池中没有线程时自动转换</li><li>STOP -&gt; TIDYING：线程池中没有线程时自动转换（队列中可能还有任务）</li><li>TIDYING -&gt; TERMINATED：terminated()执行完后就会自动转换</li></ul><h2 id="线程池中的线程是如何关闭的" tabindex="-1"><a class="header-anchor" href="#线程池中的线程是如何关闭的" aria-hidden="true">#</a> 线程池中的线程是如何关闭的？</h2><p>我们一般会使用thread.start()方法来开启一个线程，那如何停掉一个线程呢？</p><p>Thread类提供了一个stop()，但是标记了@Deprecated，为什么不推荐用stop()方法来停掉线程呢？</p><p>因为stop()方法太粗暴了，一旦调用了stop()，就会直接停掉线程，但是调用的时候根本不知道线程刚刚在做什么，任务做到哪一步了，这是很危险的。</p><p>这里强调一点，<code>stop()会释放线程占用的synchronized锁（不会自动释放ReentrantLock锁，这也是不建议用stop()的一个因素）</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zhouyu</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 作者：周瑜大都督
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//                synchronized (lock) {</span>
                reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        count<span class="token operator">++</span><span class="token punctuation">;</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
<span class="token comment">//                }</span>
                reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//</span>
<span class="token comment">//        Thread.sleep(5*1000);</span>

        reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        synchronized (lock) {</span>
<span class="token comment">//            System.out.println(count);</span>
<span class="token comment">//        }</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们建议通过自定义一个变量，或者通过中断来停掉一个线程，比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同点在于，当我们把stop设置为true时，线程自身可以控制到底要不要停止，何时停止，同样，我们可以调用thread的interrupt()来中断线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    count<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的地方在于，线程sleep过程中如果被中断了会接收到异常。</p><p>讲了这么多，其实线程池中就是通过interrupt()来停止线程的，比如shutdownNow()方法中会调用：</p><p>https://www.yuque.com/renyong-jmovm/dadudu/yr8whnbyynnzqe3g#kHefh</p><p>线程池为什么一定得是阻塞队列？</p><p>线程池中的线程在运行过程中，执行完创建线程时绑定的第一个任务后，就会不断的从队列中获取任务并执行，那么如果队列中没有任务了，线程为了不自然消亡，就会阻塞在获取队列任务时，等着队列中有任务过来就会拿到任务从而去执行任务。</p><p>通过这种方法能最终确保，线程池中能保留指定个数的核心线程数，关键代码为：</p><p>某个线程在从队列获取任务时，会判断是否使用超时阻塞获取，我们可以认为非核心线程会poll()，核心线程会take()，非核心线程超过时间还没获取到任务后面就会自然消亡了。</p><p>线程发生异常，会被移出线程池吗？</p><p>答案是会的，那有没有可能核心线程数在执行任务时都出错了，导致所有核心线程都被移出了线程池？</p><p>WT.INTERRUPT();</p><p>TRY {</p><p>BEFOREEXECUTE(WT, TASK);</p><p>TRY {</p><p>TASK.RUN(</p><p>AFTEREXECUTE(TASK, T:NULL);</p><p>L</p><p>(THROWABLE EX) {</p><p>CATCH</p><p>AFTEREXECUTE(TASK, EX);</p><p>THROW</p><p>E</p><p>L</p><p>FINALLY</p><p>; NULL;</p><p>TASK</p><p>W.COMPLETEDTASKS++;</p><p>W.UNLOCK();</p><p>COMPLETEDABRUPTLY 三 FALSE;</p><p>} FINALLY</p><p>PROCESSWORKEREXIT(W, COMPLETEDABRUPTLY);</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/365147/1677823259874-8e6c7c9f-ca58-479c-8875-f081189bf1c5.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_67%2Ctext_5Zu-54G15a2m6ZmiLeWRqOeRnA%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1171%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在源码中，当执行任务时出现异常时，最终会执行processWorkerExit()，执行完这个方法后，当前线程也就自然消亡了，但是！processWorkerExit()方法中会额外再新增一个线程，这样就能维持住固定的核心线程数。</p><p>Tomcat是如何自定义线程池的？</p><p>Tomcat中用的线程池为org.apache.tomcat.util.threads.ThreadPoolExecutor，注意类名和JUC下的一样，但是包名不一样。</p><p>Tomcat会创建这个线程池：</p><p>注入传入的队列为TaskQueue，它的入队逻辑为：</p><p>特殊在：</p><p>●入队时，如果线程池的线程个数等于最大线程池数才入队</p><p>●入队时，如果线程池的线程个数小于最大线程池数，会返回false，表示入队失败</p><p>这样就控制了，Tomcat的这个线程池，在提交任务时：</p><p>1仍然会先判断线程个数是否小于核心线程数，如果小于则创建线程</p><p>2如果等于核心线程数，会入队，但是线程个数小于最大线程数会入队失败，从而会去创建线程</p><p>所以随着任务的提交，会优先创建线程，直到线程个数等于最大线程数才会入队。</p><p>当然其中有一个比较细的逻辑是：在提交任务时，如果正在处理的任务数小于线程池中的线程个数，那么也会直接入队，而不会去创建线程，也就是上面源码中getSubmittedCount的作用。</p><p>线程池的核心线程数、最大线程数该如何设置？</p><p>我们都知道，线程池中有两个非常重要的参数：</p><p>1corePoolSize：核心线程数，表示线程池中的常驻线程的个数</p><p>2maximumPoolSize：最大线程数，表示线程池中能开辟的最大线程个数</p><p>那这两个参数该如何设置呢？</p><p>我们对线程池负责执行的任务分为三种情况：</p><p>1CPU密集型任务，比如找出1-1000000中的素数</p><p>2IO密集型任务，比如文件IO、网络IO</p><p>3混合型任务</p><p>CPU密集型任务的特点时，线程在执行任务时会一直利用CPU，所以对于这种情况，就尽可能避免发生线程上下文切换。</p><p>比如，现在我的电脑只有一个CPU，如果有两个线程在同时执行找素数的任务，那么这个CPU就需要额外的进行线程上下文切换，从而达到线程并行的效果，此时执行这两个任务的总时间为：</p><p>任务执行时间*2+线程上下文切换的时间</p><p>而如果只有一个线程，这个线程来执行两个任务，那么时间为：</p><p>任务执行时间*2</p><p>所以对于CPU密集型任务，线程数最好就等于CPU核心数，可以通过以下API拿到你电脑的核心数：</p><p>只不过，为了应对线程执行过程发生缺页中断或其他异常导致线程阻塞的请求，我们可以额外在多设置一个线程，这样当某个线程暂时不需要CPU时，可以有替补线程来继续利用CPU。</p><p>所以，对于CPU密集型任务，我们可以设置线程数为：CPU核心数+1</p><p>我们在来看IO型任务，线程在执行IO型任务时，可能大部分时间都阻塞在IO上，假如现在有10个CPU，如果我们只设置了10个线程来执行IO型任务，那么很有可能这10个线程都阻塞在了IO上，这样这10个CPU就都没活干了，所以，对于IO型任务，我们通常会设置线程数为：2*CPU核心数</p><p>不过，就算是设置为了2*CPU核心数，也不一定是最佳的，比如，有10个CPU，线程数为20，那么也有可能这20个线程同时阻塞在了IO上，所以可以再增加线程，从而去压榨CPU的利用率。</p><p>通常，如果IO型任务执行的时间越长，那么同时阻塞在IO上的线程就可能越多，我们就可以设置更多的线程，但是，线程肯定不是越多越好，我们可以通过以下这个公式来进行计算：</p><p>线程数 = CPU核心数 *（ 1 + 线程等待时间 / 线程运行总时间 ）</p><p>●线程等待时间：指的就是线程没有使用CPU的时间，比如阻塞在了IO</p><p>●线程运行总时间：指的是线程执行完某个任务的总时间</p><p>我们可以利用jvisualvm抽样来估计这两个时间：</p><p>起始页</p><p>COM.ZHOUYU.APP(PID 4596)</p><p>6 抽样器</p><p>PROFILEX</p><p>概述</p><p>监视</p><p>线程</p><p>COM. ZHOUYU. APP (PID 4596)</p><p>设置</p><p>抽样器</p><p>抽样:</p><p>停止</p><p>内存</p><p>CPU</p><p>状态:</p><p>抽样处于非活动状态</p><p>线程CPU时间</p><p>CPU 样例</p><p>快照</p><p>线程 DUMP</p><p>自用时间[5]</p><p>总时间(CPU)</p><p>自用时间(CPU)</p><p>自用时间</p><p>热点-方法</p><p>总时间</p><p>538,948 MS</p><p>452,289 MS (83.9%)</p><p>86.873MS</p><p>214 MS</p><p>COM.ZHOUYU.CPUTASK.RUM()</p><p>86.507MS(10.19)1</p><p>86,507 MS</p><p>COM. ZHOUYU.CPUIASK.ISRXIME (/</p><p>151 MS (0%)</p><p>86.658 MS</p><p>151 MS</p><p>86.658 MS</p><p>COM.ZHOUYU.CPUTASK,COWNTPRIMES()</p><p>0.000 MS</p><p>0.000 MS</p><p>0.000 MS (0%)</p><p>0.000 MS</p><p>COM.ZHOUYU.APP.MAIN()</p><p>0.000 MS</p><p>0.000 MS</p><p>0.000 MS</p><p>COM.INTELLIJ.RT.EXECUTION APPLICATION APPLLAINV2$1.RUN</p><p>0.000 MS (0%)</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/365147/1677566574324-0e3037d6-43ee-4bce-91a6-a52bf3f019bb.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_85%2Ctext_5Zu-54G15a2m6ZmiLeWRqOeRnA%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1171%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>图中表示，在刚刚这次抽样过程中，run()总共的执行时间为538948ms，利用了CPU的时间为86873ms，所以没有利用CPU的时间为538948ms-86873ms。</p><p>所以我们可以计算出：</p><p>线程等待时间 = 538948ms-86873ms</p><p>线程运行总时间 = 538948ms</p><p>所以：线程数 = 8 *（ 1 + （538948ms-86873ms） / 538948ms ）= 14.xxx</p><p>所以根据公式算出来的线程为14、15个线程左右。</p><p>按上述公式，如果我们执行的任务IO密集型任务，那么：线程等待时间 = 线程运行总时间，所以：</p><p>线程数 = CPU核心数 *（ 1 + 线程等待时间 / 线程运行总时间 ）</p><p>​ = CPU核心数 *（ 1 + 1 ）</p><p>​ = CPU核心数 * 2</p><p>以上只是理论，实际工作中情况会更复杂，比如一个应用中，可能有多个线程池，除开线程池中的线程可能还有很多其他线程，或者除开这个应用还是一些其他应用也在运行，所以实际工作中如果要确定线程数，最好是压测。</p><p>比如我写了一个：</p><p>这个接口会执行1s，我现在利用apipost来压：</p><p>LOCALHOST:8080/TEST</p><p>发送</p><p>GET</p><p>NEW</p><p>BODY认证预执行脚本</p><p>HEADER</p><p>一键压测</p><p>QUERY</p><p>真正压测高并发,单机支持1000并发无压力!本模块已开源</p><p>使用说明</p><p>QITHUB欢迎STAR</p><p>轮次:</p><p>并发数:</p><p>5</p><p>压测总请求为5000,执行超过10分钟将自动终止</p><p>开始压测</p><p>1000</p><p>压测结果:新建接口</p><p>执行时间(S)</p><p>总请求数</p><p>错误率</p><p>失败请求数</p><p>成功请求数</p><p>总结接收数据(M)</p><p>0</p><p>0.03</p><p>0.00%</p><p>25.73</p><p>5000</p><p>5000</p><p>每秒成功请求数</p><p>每秒请求数</p><p>每秒接收字节数(M)</p><p>194.34</p><p>0.00</p><p>194.34</p><p>最小响应时间(MS)</p><p>最大响应时间(MS)</p><p>平均响应时间(MS)</p><p>4727.53</p><p>20.00</p><p>5448.00</p><p>99.90%(MS)</p><p>90.00%(MS)</p><p>99.00%(MS)</p><p>95.00%(MS)</p><p>99.99%(MS)</p><p>75.00%(MS)</p><p>10.00%(MS)</p><p>25.00%(MS)</p><p>50.00%(MS)</p><p>5419</p><p>5093</p><p>5127</p><p>5441</p><p>3373</p><p>5077</p><p>5064</p><p>5047</p><p>5444</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/365147/1677568675114-137acd01-8fa6-4c9c-ae74-f24e7ac47145.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_78%2Ctext_5Zu-54G15a2m6ZmiLeWRqOeRnA%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1171%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>这是在Tomcat默认最大200个线程的请求下的压测结果。</p><p>当我们把线程数调整为500：</p><p>Java</p><p>1</p><p>server.tomcat.threads.max=500</p><p>真正压测高并发,单机支持1000并发无压力!本模块已开源</p><p>使用说明</p><p>GITHUB欢迎STAR</p><p>并发数:</p><p>轮次:</p><p>压测总请求为5000,执行超过10分钟将自动终止</p><p>开始压测</p><p>1000</p><p>压测结果:新建接口</p><p>总请求数</p><p>总结接收数据(M)</p><p>执行时间(S)</p><p>错误率</p><p>失败请求数</p><p>成功请求数</p><p>0.03</p><p>5000</p><p>11.96</p><p>2.10%</p><p>4895</p><p>105</p><p>每秒成功请求数</p><p>每秒请求数</p><p>每秒接收字节数(M)</p><p>0.00</p><p>418.10</p><p>418.10</p><p>平均响应时间(MS)</p><p>最小响应时间(MS)</p><p>最大响应时间(MS)</p><p>4038.00</p><p>20.00</p><p>2180.51</p><p>95.00%(MS)</p><p>25.00%(MS)</p><p>90.00%(MS)</p><p>99.90%(MS)</p><p>50.00%(MS)</p><p>99.99%(MS)</p><p>75.00%(MS)</p><p>99.00%(MS)</p><p>10.00%(MS)</p><p>3077</p><p>2061</p><p>2998</p><p>3803</p><p>1431</p><p>1863</p><p>3969</p><p>4003</p><p>2472</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/365147/1677568747971-6108b843-cf38-4310-8153-3feaf4a47030.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_81%2Ctext_5Zu-54G15a2m6ZmiLeWRqOeRnA%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1171%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>发现执行效率提高了一倍，假如再增加线程数到1000：</p><p>并发数:</p><p>轮次:</p><p>压测总请求为5000,执行超过10分钟将自动终止</p><p>1000</p><p>开始压测</p><p>压测结果:新建接口</p><p>错误率</p><p>执行时间(S)</p><p>总请求数</p><p>总结接收数据(M)</p><p>失败请求数</p><p>成功请求数</p><p>25.36%</p><p>3732</p><p>0.02</p><p>5000</p><p>18.34</p><p>1268</p><p>每秒接收字节数(M)</p><p>每秒成功请求数</p><p>每秒请求数</p><p>0.00</p><p>272.59</p><p>272.59</p><p>最大响应时间(MS)</p><p>最小响应时间(MS)平</p><p>平均响应时间(MS)</p><p>20.00</p><p>9742.00</p><p>3368.49</p><p>75.00%(MS)</p><p>99.99%(MS)</p><p>99.00%(MS)</p><p>25.00%(MS)</p><p>10.00%(MS)</p><p>90.00%(MS)</p><p>95.00%(MS)</p><p>99.90%(MS)</p><p>50.00%(MS)</p><p>2168</p><p>5115</p><p>2724</p><p>3934</p><p>8794</p><p>4736</p><p>9636</p><p>3109</p><p>9523</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/365147/1677568861966-525406f1-4c1a-4448-baf0-129fb20d5ba6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_80%2Ctext_5Zu-54G15a2m6ZmiLeWRqOeRnA%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1171%2Climit_0" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>性能就降低了。</p><p>总结，我们再工作中，对于：</p><p>1CPU密集型任务：CPU核心数+1，这样既能充分利用CPU，也不至于有太多的上下文切换成本</p><p>2IO型任务：建议压测，或者先用公式计算出一个理论值（理论值通常都比较小）</p><p>3对于核心业务（访问频率高），可以把核心线程数设置为我们压测出来的结果，最大线程数可以等于核心线程数，或者大一点点，比如我们压测时可能会发现500个线程最佳，但是600个线程时也还行，此时600就可以为最大线程数</p><p>4对于非核心业务（访问频率不高），核心线程数可以比较小，避免操作系统去维护不必要的线程，最大线程数可以设置为我们计算或压测出来的结果。</p>`,383),i=[c];function l(u,r){return s(),a("div",null,i)}const m=n(o,[["render",l],["__file","线程池.html.vue"]]);export{m as default};
