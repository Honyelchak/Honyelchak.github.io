const n=JSON.parse(`{"key":"v-30f0f6e0","path":"/interview/A4-Java/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA.html","title":"基础语法","lang":"zh-CN","frontmatter":{"description":"基础语法 1、实例对象可以引用静态变量。 public class Test { private static int x = 100; public static void main(String args[]) { Test hs1 = new Test(); hs1.x++; Test hs2 = new Test(); hs2.x++; hs1 = new Test(); hs1.x++; Test.x--; System.out.println(\\"x=\\" + x); } }","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A4-Java/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA.html"}],["meta",{"property":"og:site_name","content":"Honyelchak's Blog"}],["meta",{"property":"og:title","content":"基础语法"}],["meta",{"property":"og:description","content":"基础语法 1、实例对象可以引用静态变量。 public class Test { private static int x = 100; public static void main(String args[]) { Test hs1 = new Test(); hs1.x++; Test hs2 = new Test(); hs2.x++; hs1 = new Test(); hs1.x++; Test.x--; System.out.println(\\"x=\\" + x); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T09:42:10.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T09:42:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T09:42:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"1、实例对象可以引用静态变量。","slug":"_1、实例对象可以引用静态变量。","link":"#_1、实例对象可以引用静态变量。","children":[]},{"level":2,"title":"2、 异常","slug":"_2、-异常","link":"#_2、-异常","children":[]},{"level":2,"title":"3、方法、变量、类前加final 各有什么不一样?","slug":"_3、方法、变量、类前加final-各有什么不一样","link":"#_3、方法、变量、类前加final-各有什么不一样","children":[{"level":3,"title":"JVM","slug":"jvm","link":"#jvm","children":[]}]},{"level":2,"title":"4、Java中的静态绑定和动态绑定","slug":"_4、java中的静态绑定和动态绑定","link":"#_4、java中的静态绑定和动态绑定","children":[]},{"level":2,"title":"5、Java中对于泛型的规定","slug":"_5、java中对于泛型的规定","link":"#_5、java中对于泛型的规定","children":[{"level":3,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":3,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]},{"level":3,"title":"泛型命名","slug":"泛型命名","link":"#泛型命名","children":[]},{"level":3,"title":"泛型的上限和下限","slug":"泛型的上限和下限","link":"#泛型的上限和下限","children":[]},{"level":3,"title":"泛型的通配符？","slug":"泛型的通配符","link":"#泛型的通配符","children":[]},{"level":3,"title":"泛型并非无所不能","slug":"泛型并非无所不能","link":"#泛型并非无所不能","children":[]},{"level":3,"title":"JDK7及JDK7之后的泛型类对象","slug":"jdk7及jdk7之后的泛型类对象","link":"#jdk7及jdk7之后的泛型类对象","children":[]},{"level":3,"title":"如何理解Java中的泛型是伪泛型","slug":"如何理解java中的泛型是伪泛型","link":"#如何理解java中的泛型是伪泛型","children":[]}]},{"level":2,"title":"6、注解","slug":"_6、注解","link":"#_6、注解","children":[{"level":3,"title":"注解的分类","slug":"注解的分类","link":"#注解的分类","children":[]}]},{"level":2,"title":"7、异常","slug":"_7、异常","link":"#_7、异常","children":[{"level":3,"title":"异常底层","slug":"异常底层","link":"#异常底层","children":[]}]},{"level":2,"title":"8、Java中的SPI机制(服务发现机制)","slug":"_8、java中的spi机制-服务发现机制","link":"#_8、java中的spi机制-服务发现机制","children":[]},{"level":2,"title":"9、lambda表达式是如何生成的？","slug":"_9、lambda表达式是如何生成的","link":"#_9、lambda表达式是如何生成的","children":[]},{"level":2,"title":"10、异常(OOM)是否会导致程序结束？","slug":"_10、异常-oom-是否会导致程序结束","link":"#_10、异常-oom-是否会导致程序结束","children":[{"level":3,"title":"OOM与JVM退出","slug":"oom与jvm退出","link":"#oom与jvm退出","children":[]}]},{"level":2,"title":"11、Java中的Error能否被catch？","slug":"_11、java中的error能否被catch","link":"#_11、java中的error能否被catch","children":[]},{"level":2,"title":"12、Java到底是值传递还是引用传递？","slug":"_12、java到底是值传递还是引用传递","link":"#_12、java到底是值传递还是引用传递","children":[]},{"level":2,"title":"13、Collections.sort和Arrays.sortd的关系？","slug":"_13、collections-sort和arrays-sortd的关系","link":"#_13、collections-sort和arrays-sortd的关系","children":[]}],"git":{"createdTime":1701499503000,"updatedTime":1701510130000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":2}]},"readingTime":{"minutes":21.59,"words":6478},"filePathRelative":"interview/A4-Java/查漏补缺.md","localizedDate":"2023年12月2日","excerpt":"<h1> 基础语法</h1>\\n<h2> 1、实例对象可以引用静态变量。</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Test</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> args<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Test</span> hs1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        hs1<span class=\\"token punctuation\\">.</span>x<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Test</span> hs2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        hs2<span class=\\"token punctuation\\">.</span>x<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        hs1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        hs1<span class=\\"token punctuation\\">.</span>x<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Test</span><span class=\\"token punctuation\\">.</span>x<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"x=\\"</span> <span class=\\"token operator\\">+</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
