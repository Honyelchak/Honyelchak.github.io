import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,a,e,b as n,f as t}from"./app-2Xbp2Heq.js";const i={},r=t(`<h1 id="_1-基础" tabindex="-1"><a class="header-anchor" href="#_1-基础" aria-hidden="true">#</a> 1. 基础</h1><h2 id="_1-1-正确使用-equals-方法" tabindex="-1"><a class="header-anchor" href="#_1-1-正确使用-equals-方法" aria-hidden="true">#</a> 1.1. 正确使用 equals 方法</h2><p>Object的equals方法容易抛空指针异常，应<strong>使用常量或确定有值的对象</strong>来调用 equals。</p><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;SnailClimb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看一下<code>java.util.Objects#equals</code>的源码就知道原因了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public static boolean equals(Object a, Object b) {
        // 可以避免空指针异常。如果a==null的话此时a.equals(b)就不会得到执行，避免出现空指针异常。
        return (a == b) || (a != null &amp;&amp; a.equals(b));
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用 == 或者 != 操作来比较null值，但是不能使用其他算法或者逻辑操作。在Java中<code>null == null</code>将返回true。</li><li>不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常</li></ul><h2 id="_1-2-整型包装类值的比较" tabindex="-1"><a class="header-anchor" href="#_1-2-整型包装类值的比较" aria-hidden="true">#</a> 1.2. 整型包装类值的比较</h2><p><strong>所有整型包装类对象值的比较<mark>必须使用equals方法。</mark></strong></p><p>先看下面这个例子：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Integer x = 3;
Integer y = 3;
System.out.println(x == y);// true
Integer a = new Integer(3);
Integer b = new Integer(3);
System.out.println(a == b);//false
System.out.println(a.equals(b));//true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用自动装箱方式创建一个Integer对象时，当数值在-128 ~127时，会将创建的 Integer 对象缓存起来，当下次再出现该数值时，直接从缓存中取出对应的Integer对象。所以上述代码中，x和y引用的是相同的Integer对象。</p><p>**注意：**如果你的IDE(IDEA/Eclipse)上安装了阿里巴巴的p3c插件，这个插件如果检测到你用 ==的话会报错提示，推荐安装一个这个插件，很不错。</p><h3 id="_1-3-1-bigdecimal-的用处" tabindex="-1"><a class="header-anchor" href="#_1-3-1-bigdecimal-的用处" aria-hidden="true">#</a> 1.3.1. BigDecimal 的用处</h3><p>《阿里巴巴Java开发手册》中提到：<strong>浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用 equals 来判断。</strong> 具体原理和浮点数的编码方式有关，这里就不多提了，我们下面直接上实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">-</span> <span class="token number">0.9f</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.9f</span> <span class="token operator">-</span> <span class="token number">0.8f</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.100000024</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.099999964</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具有基本数学知识的我们很清楚的知道输出并不是我们想要的结果（<strong>精度丢失</strong>），我们如何解决这个问题呢？一种很常用的方法是：<strong>使用使用 BigDecimal 来定义浮点数的值，再进行浮点数的运算操作。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.1</span>
<span class="token class-name">BigDecimal</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.1</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-2-bigdecimal-的大小比较" tabindex="-1"><a class="header-anchor" href="#_1-3-2-bigdecimal-的大小比较" aria-hidden="true">#</a> 1.3.2. BigDecimal 的大小比较</h3><p><code>a.compareTo(b)</code> : 返回 -1 表示小于，0 表示 等于， 1表示 大于。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-3-bigdecimal-保留几位小数" tabindex="-1"><a class="header-anchor" href="#_1-3-3-bigdecimal-保留几位小数" aria-hidden="true">#</a> 1.3.3. BigDecimal 保留几位小数</h3><p>通过 <code>setScale</code>方法设置保留几位小数以及保留规则。保留规则有挺多种，不需要记，IDEA会提示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.255433&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> n <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1.255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-3-5-总结" aria-hidden="true">#</a> 1.3.5. 总结</h3><p>BigDecimal 主要用来操作（大）浮点数，BigInteger 主要用来操作大整数（超过 long 类型）。</p><p>BigDecimal 的实现利用到了 BigInteger, 所不同的是 BigDecimal 加入了小数位的概念</p><h2 id="_1-4-基本数据类型与包装数据类型的使用标准" tabindex="-1"><a class="header-anchor" href="#_1-4-基本数据类型与包装数据类型的使用标准" aria-hidden="true">#</a> 1.4. 基本数据类型与包装数据类型的使用标准</h2><p>Reference:《阿里巴巴Java开发手册》</p><ul><li>【强制】<strong>所有的 POJO 类属性必须使用包装数据类型。</strong></li><li>【强制】<strong>RPC 方法的返回值和参数必须使用包装数据类型。</strong></li><li>【推荐】<strong>所有的局部变量使用基本数据类型。</strong></li></ul><p>比如我们如果自定义了一个Student类,其中有一个属性是成绩score,如果用Integer而不用int定义,一次考试,学生可能没考,值是null,也可能考了,但考了0分,值是0,这两个表达的状态明显不一样.</p><p><strong>说明</strong> :POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</p><p><strong>正例</strong> : 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</p><p><strong>反例</strong> : 比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如:远程调用失败，异常退出。</p><h1 id="_2-集合" tabindex="-1"><a class="header-anchor" href="#_2-集合" aria-hidden="true">#</a> 2. 集合</h1><h2 id="_2-1-arrays-aslist-使用指南" tabindex="-1"><a class="header-anchor" href="#_2-1-arrays-aslist-使用指南" aria-hidden="true">#</a> 2.1. Arrays.asList()使用指南</h2><h3 id="_2-1-1-简介" tabindex="-1"><a class="header-anchor" href="#_2-1-1-简介" aria-hidden="true">#</a> 2.1.1. 简介</h3><p><code>Arrays.asList()</code>在平时开发中还是比较常见的，我们可以使用它<strong>将一个数组转换为一个List集合。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span> <span class="token punctuation">}</span>； 
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//上面两个语句等价于下面一条语句</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK 源码对于这个方法的说明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *返回由指定数组支持的固定大小的列表。此方法作为基于数组和基于集合的API之间的桥梁，与           Collection.toArray()结合使用。返回的List是可序列化并实现RandomAccess接口。
 */</span> 
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-《阿里巴巴java-开发手册》对其的描述" tabindex="-1"><a class="header-anchor" href="#_2-1-2-《阿里巴巴java-开发手册》对其的描述" aria-hidden="true">#</a> 2.1.2. 《阿里巴巴Java 开发手册》对其的描述</h3><p><code>Arrays.asList()</code>将数组转换为集合后,底层其实还是数组，《阿里巴巴Java 开发手册》对于这个方法有如下描述：</p>`,44),u={href:"https://camo.githubusercontent.com/26b4048f6dd0109fcbb839ab6be16a088427a16d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382542462545392538372538432545352542372542342545352542372542344a6176612545352542432538302545352538462539312545362538392538422d4172726179732e61734c69737428292545362539362542392545362542332539352e706e67",target:"_blank",rel:"noopener noreferrer"},d=a("img",{src:"https://camo.githubusercontent.com/26b4048f6dd0109fcbb839ab6be16a088427a16d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d362f2545392539382542462545392538372538432545352542372542342545352542372542344a6176612545352542432538302545352538462539312545362538392538422d4172726179732e61734c69737428292545362539362542392545362542332539352e706e67",alt:"阿里巴巴Java开发手-Arrays.asList()方法",tabindex:"0",loading:"lazy"},null,-1),k=a("figcaption",null,"阿里巴巴Java开发手-Arrays.asList()方法",-1),m=t(`<h3 id="_2-1-3-使用时的注意事项总结" tabindex="-1"><a class="header-anchor" href="#_2-1-3-使用时的注意事项总结" aria-hidden="true">#</a> 2.1.3. 使用时的注意事项总结</h3><p><strong>传递的数组必须是对象数组，而不是基本类型。</strong></p><p><code>Arrays.asList()</code>是泛型方法，传入的对象必须是<mark>对象数组</mark>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> is <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当传入一个基本数据类型数组时，<code>Arrays.asList()</code> 的真正得到的参数就不是数组中的元素**，而是数组对象本身**！此时List 的唯一元素就是这个数组，这也就解释了上面的代码。</p><p>我们使用包装类型数组就可以解决这个问题。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Integer[] myArray = { 1, 2, 3 };
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用集合的修改方法:<code>add()</code>、<code>remove()</code>、<code>clear()</code>会抛出异常。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List myList = Arrays.asList(1, 2, 3);
myList.add(4);//运行时报错：UnsupportedOperationException
myList.remove(1);//运行时报错：UnsupportedOperationException
myList.clear();//运行时报错：UnsupportedOperationException
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Arrays.asList()</code> 方法返回的并不是 <code>java.util.ArrayList</code> ，而是 <code>java.util.Arrays</code> 的一个内部类,这个内部类并没有实现集合的修改方法或者说并没有重写这些方法。</p><p><mark>注意：<mark>使用集合类方法会报错，**但是使用内部类的</mark>set、get方法</mark>不会报错。**</p><h3 id="_2-1-4-如何正确的将数组转换为arraylist" tabindex="-1"><a class="header-anchor" href="#_2-1-4-如何正确的将数组转换为arraylist" aria-hidden="true">#</a> 2.1.4. 如何正确的将数组转换为ArrayList?</h3><p><strong>1. 自己动手实现（教育目的）</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//JDK1.5+
static &lt;T&gt; List&lt;T&gt; arrayToList(final T[] array) {
  final List&lt;T&gt; l = new ArrayList&lt;T&gt;(array.length);

  for (final T s : array) {
    l.add(s);
  }
  return (l);
}
Integer [] myArray = { 1, 2, 3 };
System.out.println(arrayToList(myArray).getClass());//class java.util.ArrayList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 最简便的方法(推荐)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 使用 Java8 的Stream(推荐)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> myList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>myArray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//基本类型也可以实现转换（依赖boxed的装箱操作）</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> myArray2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> myList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>myArray2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 使用 Guava(推荐)</strong></p>`,19),v={href:"https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java",target:"_blank",rel:"noopener noreferrer"},g=a("code",null,"ImmutableList",-1),h={href:"https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L101",target:"_blank",rel:"noopener noreferrer"},b=a("code",null,"of()",-1),f={href:"https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L225",target:"_blank",rel:"noopener noreferrer"},y=a("code",null,"copyOf()",-1),_=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;String&gt; il = ImmutableList.of(&quot;string&quot;, &quot;elements&quot;);  // from varargs
List&lt;String&gt; il = ImmutableList.copyOf(aStringArray);      // from array
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={href:"https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java",target:"_blank",rel:"noopener noreferrer"},q=a("code",null,"Lists",-1),L={href:"https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L87",target:"_blank",rel:"noopener noreferrer"},j=a("code",null,"newArrayList()",-1),A=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;String&gt; l1 = Lists.newArrayList(anotherListOrCollection);    // from collection
List&lt;String&gt; l2 = Lists.newArrayList(aStringArray);               // from array
List&lt;String&gt; l3 = Lists.newArrayList(&quot;or&quot;, &quot;string&quot;, &quot;elements&quot;); // from varargs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 使用 Apache Commons Collections</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();
CollectionUtils.addAll(list, str);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-collections-toarray-方法使用的坑-如何反转数组" tabindex="-1"><a class="header-anchor" href="#_2-2-collections-toarray-方法使用的坑-如何反转数组" aria-hidden="true">#</a> 2.2. Collections.toArray()方法使用的坑&amp;如何反转数组</h2><p>该方法是一个泛型方法：<code> T[] toArray(T[] a);</code> 如果<code>toArray</code>方法中没有传递任何参数的话返回的是<code>Object</code>类型数组。</p><p><strong>传入初始化长度的数组对象，返回该对象数组</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String [] s= new String[]{
    &quot;dog&quot;, &quot;lazy&quot;, &quot;a&quot;, &quot;over&quot;, &quot;jumps&quot;, &quot;fox&quot;, &quot;brown&quot;, &quot;quick&quot;, &quot;A&quot;
};
List&lt;String&gt; list = Arrays.asList(s);
Collections.reverse(list);
s=list.toArray(new String[0]);//没有指定类型的话会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-不要在-foreach-循环里进行元素的-remove-add-操作" tabindex="-1"><a class="header-anchor" href="#_2-3-不要在-foreach-循环里进行元素的-remove-add-操作" aria-hidden="true">#</a> 2.3. 不要在 foreach 循环里进行元素的 remove/add 操作</h2><p>如果要进行<code>remove</code>操作，可以调用迭代器的 <code>remove </code>方法而不是集合类的 remove 方法。因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身<code>remove/add</code>方法，迭代器都将抛出一个<code>ConcurrentModificationException</code>,这就是单线程状态下产生的 <strong>fail-fast 机制</strong>。</p><blockquote><p><strong>fail-fast 机制</strong> ：多个线程对 fail-fast 集合进行修改的时，可能会抛出ConcurrentModificationException，单线程下也会出现这种情况，上面已经提到过。</p></blockquote><p><code>java.util</code>包下面的所有的集合类都是fail-fast的，而<code>java.util.concurrent</code>包下面的所有的类都是fail-safe的.</p><h1 id="_3-反射" tabindex="-1"><a class="header-anchor" href="#_3-反射" aria-hidden="true">#</a> 3.反射</h1><h2 id="什么是反射" tabindex="-1"><a class="header-anchor" href="#什么是反射" aria-hidden="true">#</a> 什么是反射</h2><p>Java反射，就是在运行状态中</p><ul><li>获取任意类的名称、package信息、所有属性、方法、注解、类型、类加载器等</li><li>获取任意对象的属性，并且能改变对象的属性</li><li>调用任意对象的方法</li><li>判断任意一个对象所属的类</li><li>实例化任意一个类的对象</li></ul><p>通过反射我们可以实现动态装配，降低代码的耦合度；动态代理等。反射的过度使用会严重消耗系统资源。</p><p>JDK 中的Java.lang.Class</p><h2 id="什么是java序列化" tabindex="-1"><a class="header-anchor" href="#什么是java序列化" aria-hidden="true">#</a> 什么是Java序列化</h2><p><strong>序列化：将 Java 对象转换成字节流的过程。</strong></p><p><strong>反序列化：将字节流转换成 Java 对象的过程。</strong></p><p>当 Java 对象需要在网络上传输 或者 持久化存储到文件中时，就需要对 Java 对象进行序列化处理。</p><p>序列化的实现：类实现 Serializable 接口，这个接口没有需要实现的方法。实现 Serializable 接口是为了告诉 jvm 这个类的对象可以被序列化。</p><ul><li>声明为 static 和 transient 的成员变量，不能被序列化。static 成员变量是描述类级别的属性，transient 表示临时数据</li><li>常用的IO输出<code>ObjectInputStream</code>和<code>ObjectOutputStream</code></li></ul><h1 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理" aria-hidden="true">#</a> 动态代理</h1><p><strong>在运行期间，创建目标类，调用和扩展目标类的方法</strong></p><ol><li>JDK动态代理：利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</li><li>CGlib动态代理：利用ASM（开源的Java字节码编辑库，操作字节码）开源包，将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</li><li>区别：<strong>JDK代理只能对实现接口的类生成代理</strong>；CGlib是<strong>针对类实现代理，对指定的类生成一个子类，并覆盖其中的方法</strong>，这种通过继承类的实现方式，不能代理final修饰的类。</li></ol><p><strong>有哪几种方法：</strong></p><ul><li><p>JDK级别的Proxy</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>类加载器，接口数组（<span class="token keyword">class</span><span class="token punctuation">[</span><span class="token punctuation">]</span>）<span class="token punctuation">,</span>invocationHandler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li></li></ul></li><li><p>用Cglib实现动态代理</p></li></ul><p><strong>什么时候用：</strong></p><ul><li>统计每个 api 的请求耗时</li><li>统一的日志输出</li><li>校验被调用的 api 是否已经登录和权限鉴定</li><li>Spring的 AOP 功能模块就是采用动态代理的机制来实现切面编程</li></ul><h1 id="_4-对象拷贝" tabindex="-1"><a class="header-anchor" href="#_4-对象拷贝" aria-hidden="true">#</a> 4. 对象拷贝</h1><h2 id="_1-为什么要使用克隆" tabindex="-1"><a class="header-anchor" href="#_1-为什么要使用克隆" aria-hidden="true">#</a> 1. 为什么要使用克隆？</h2><h2 id="_2-如何实现对象克隆" tabindex="-1"><a class="header-anchor" href="#_2-如何实现对象克隆" aria-hidden="true">#</a> 2. 如何实现对象克隆？</h2><ul><li>**深拷贝：**实现Cloneable接口，重写clone方法。</li><li>**浅拷贝：**object的clone方法就是浅拷贝(native)。</li></ul><h2 id="_3-深拷贝和浅拷贝区别是什么" tabindex="-1"><a class="header-anchor" href="#_3-深拷贝和浅拷贝区别是什么" aria-hidden="true">#</a> 3. 深拷贝和浅拷贝区别是什么？</h2><p><strong>深拷贝和浅拷贝都是重新创建了一个对象</strong>。</p><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>复制基本类型的属性；引用类型的属性复制，复制栈中的变量 和 变量指向堆内存中的对象的指针和<strong>堆内存中的对象</strong>。</p><h3 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝</h3><p>复制基本类型的属性，引用类型属性，复制栈中的变量和变量指向堆内存对象的指针，不复制堆内存中的对象。</p><p><strong>区别</strong></p><p>在于是否拷贝引用对象。</p><h1 id="_5-异常" tabindex="-1"><a class="header-anchor" href="#_5-异常" aria-hidden="true">#</a> 5. 异常</h1><h2 id="throw、throws的区别" tabindex="-1"><a class="header-anchor" href="#throw、throws的区别" aria-hidden="true">#</a> throw、throws的区别</h2><ul><li>形式上不同 <ul><li>throws在方法名后边，用来声明一个方法可能会抛出的所有异常。</li><li>throw在方法体中，并且抛出一个对象，</li></ul></li><li>功能上： <ul><li>程序在执行到throw语句时<strong>立即停止。</strong></li><li>throws：调用方法者需要在调用出catch异常。</li></ul></li></ul><h2 id="try-catch-finally-中哪个部分可以省略" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-中哪个部分可以省略" aria-hidden="true">#</a> try-catch-finally 中哪个部分可以省略？</h2><p>catch和finally任选其一</p><h2 id="try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗" aria-hidden="true">#</a> try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</h2><p>会。</p><h2 id="常见的异常类有哪些" tabindex="-1"><a class="header-anchor" href="#常见的异常类有哪些" aria-hidden="true">#</a> 常见的异常类有哪些？</h2><h1 id="_6、对象头" tabindex="-1"><a class="header-anchor" href="#_6、对象头" aria-hidden="true">#</a> 6、对象头</h1><ul><li>Mark Word <ul><li>存储对象的<strong>hashCode、GC信息、锁信息</strong></li></ul></li><li>Class Pointer(类型指针) <ul><li>存储了指向类对象信息的指针。</li></ul></li></ul>`,52);function w(S,D){const s=p("ExternalLinkIcon");return c(),l("div",null,[r,a("figure",null,[a("a",u,[d,e(s)]),k]),m,a("p",null,[n("对于不可变集合，你可以使用"),a("a",v,[g,e(s)]),n("类及其"),a("a",h,[b,e(s)]),n("与"),a("a",f,[y,e(s)]),n("工厂方法：（参数不能为空）")]),_,a("p",null,[n("对于可变集合，你可以使用"),a("a",x,[q,e(s)]),n("类及其"),a("a",L,[j,e(s)]),n("工厂方法：")]),A])}const J=o(i,[["render",w],["__file","Java疑难点.html.vue"]]);export{J as default};
