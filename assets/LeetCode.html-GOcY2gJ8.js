import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,a as n,b as s,e as t,f as p}from"./app-XffPLay1.js";const i={},u=n("h1",{id:"_2-算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-算法","aria-hidden":"true"},"#"),s(" 2 算法")],-1),r=n("p",null,"​ 这里只对一些经典的函数进行封装，如有比较复杂的题目则只放出题目链接。遇到不会的题目可以看下面的链接。",-1),k={href:"https://labuladong.gitee.io/algo/1/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://programmercarl.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/SharingSource/LogicStack-LeetCode/wiki",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="_2-1-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-1-数据结构" aria-hidden="true">#</a> 2.1 数据结构</h2><h3 id="_2-1-1-链表" tabindex="-1"><a class="header-anchor" href="#_2-1-1-链表" aria-hidden="true">#</a> 2.1.1 链表</h3><p>​ 对于链表的题目，笔试的时候可以选择自己拿手的方式去做，但是面试的时候有时候需要你同时写出递归和迭代的算法，这里举几个经典的操作和例题。</p><ul><li>寻找链表中点</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//slow就是指向中点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-1-1-翻转链表" tabindex="-1"><a class="header-anchor" href="#_2-1-1-1-翻转链表" aria-hidden="true">#</a> 2.1.1.1 翻转链表</h4>`,6),b=p(`<li><p>递归翻转链表</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> last<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>迭代翻转</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> head <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> next <span class="token operator">=</span>  head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),h={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://leetcode.cn/problems/reverse-linked-list-ii/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://leetcode.cn/problems/reverse-nodes-in-k-group/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://leetcode.cn/problems/palindrome-linked-list/",target:"_blank",rel:"noopener noreferrer"},y=n("h4",{id:"_2-1-1-2-双指针",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-1-2-双指针","aria-hidden":"true"},"#"),s(" 2.1.1.2 双指针")],-1),g=n("p",null,"​ 双指针一般用快慢指针寻找中点的时候用，或者合并链表的时候用，在剑指offer中经常这些题目，一般要求不能使用额外空间，所以还是需要掌握。",-1),L=n("p",null,"​ 快慢指针题目推荐",-1),x={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://leetcode.cn/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"​ 合并链表",-1),A={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},N=n("h3",{id:"_2-1-2-栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-2-栈","aria-hidden":"true"},"#"),s(" 2.1.2 栈")],-1),E=n("p",null,"​ 栈的题目一般分为单调栈和普通栈的题目，单调栈就是维护一个单调递增/递减的栈，每次进入元素的时候判断当前是不是单调的，否则更新栈的元素。",-1),M=n("h4",{id:"_2-1-2-1-单调栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-2-1-单调栈","aria-hidden":"true"},"#"),s(" 2.1.2.1 单调栈")],-1),B={href:"https://leetcode.cn/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.cn/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.cn/problems/remove-duplicate-letters/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://leetcode.cn/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"},z=n("h4",{id:"_2-1-2-2-普通栈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-2-2-普通栈","aria-hidden":"true"},"#"),s(" 2.1.2.2 普通栈")],-1),D=n("p",null,"​ 对于普通栈，常见的就是括号匹配问题，这里放几个难题，掌握了就没问题。",-1),K={href:"https://leetcode.cn/problems/basic-calculator/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://leetcode.cn/problems/parsing-a-boolean-expression/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://leetcode.cn/problems/longest-valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.cn/problems/valid-parenthesis-string/",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,"对于栈和队列的转换也是常考问题，需要掌握",-1),X={href:"https://leetcode.cn/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://leetcode.cn/problems/implement-stack-using-queues/",target:"_blank",rel:"noopener noreferrer"},O=p(`<h3 id="_2-1-3-二叉树" tabindex="-1"><a class="header-anchor" href="#_2-1-3-二叉树" aria-hidden="true">#</a> 2.1.3 二叉树</h3><p>​ <strong>快速排序就是个二叉树的前序遍历，归并排序就是个二叉树的后序遍历</strong>，对于二叉树的各种基本操作都需要掌握，比如求深度，直径，bfs和dfs的遍历，这里直接放题目链接，都需要会做。</p><p>​ <strong>前序位置的代码只能从函数参数中获取父节点传递来的数据，而后序位置的代码不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据</strong>。<strong>一旦你发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p><p>​ <strong>每一条二叉树的「直径」长度，就是一个节点的左右子树的最大深度之和</strong>。</p><p>​ 二叉树的层序遍历和递归也都需要掌握。一般如果可以分解问题则可以用递归去写。</p><p>​ <strong>1、是否可以通过遍历一遍二叉树得到答案</strong>？如果可以，用一个 <code>traverse</code> 函数配合外部变量来实现，这叫「遍历」的思维模式。</p><p>​ <strong>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案</strong>？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值，这叫「分解问题」的思维模式。</p><p>​ 无论使用哪种思维模式，你都需要思考：<strong>如果单独抽出一个二叉树节点，它需要做什么事情？需要在什么时候（前/中/后序位置）做？</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 输入一棵二叉树的根节点，层序遍历这棵二叉树</span>
<span class="token keyword">void</span> <span class="token function">levelTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从上到下遍历二叉树的每一层</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sz <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从左到右遍历每一层的每个节点</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将下一层节点放入队列</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),G={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.cn/problems/binary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://leetcode.cn/problems/diameter-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://leetcode.cn/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://leetcode.cn/problems/symmetric-tree/",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://leetcode.cn/problems/count-complete-tree-nodes/",target:"_blank",rel:"noopener noreferrer"},pn=n("p",null,[s("​ 选择题中经常考构造二叉树，"),n("strong",null,"通过前序中序，或者后序中序遍历结果可以确定唯一一棵原始二叉树，但是通过前序后序遍历结果无法确定唯一的原始二叉树"),s("。")],-1),en={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"},on={href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://leetcode.cn/problems/maximum-binary-tree/",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal/",target:"_blank",rel:"noopener noreferrer"},un={href:"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/",target:"_blank",rel:"noopener noreferrer"},rn=n("h4",{id:"_2-1-3-1-二叉搜索树-bst",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-3-1-二叉搜索树-bst","aria-hidden":"true"},"#"),s(" 2.1.3.1 二叉搜索树(BST)")],-1),kn=n("p",null,[s("​ "),n("strong",null,"BST 的中序遍历结果是有序的（升序）"),s("，这一点很关键。")],-1),dn={href:"https://leetcode.cn/problems/convert-bst-to-greater-tree/",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://leetcode.cn/problems/kth-smallest-element-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://leetcode.cn/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://leetcode.cn/problems/delete-node-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://leetcode.cn/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://leetcode.cn/problems/unique-binary-search-trees/",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii/",target:"_blank",rel:"noopener noreferrer"},yn=n("h4",{id:"_2-1-3-2-公共祖先问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-3-2-公共祖先问题","aria-hidden":"true"},"#"),s(" 2.1.3.2 公共祖先问题")],-1),gn=n("p",null,"​ 需要掌握普通二叉树和BST的公共祖先问题。",-1),Ln={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iv/",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-ii/",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii/",target:"_blank",rel:"noopener noreferrer"},In=p(`<h3 id="_2-1-4-图" tabindex="-1"><a class="header-anchor" href="#_2-1-4-图" aria-hidden="true">#</a> 2.1.4 图</h3><p>​ 图论比较重要，一般用dfs或者bfs，常见的有拓扑排序、并查集等，下面逐一介绍。图论问题中，路径记录一般有邻接矩阵和邻接表两种方式，少数会用前向星去记录。邻接矩阵空间消耗大，但是可以快速判断两个点是否可以到达，邻接表则与之相反。</p><h4 id="_2-1-4-1-回溯" tabindex="-1"><a class="header-anchor" href="#_2-1-4-1-回溯" aria-hidden="true">#</a> 2.1.4.1 回溯</h4><p>​ 回溯常用vis数组标记是否出现，后面还有会专门的专题记录非图问题的回溯算法，下面为模板。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        存放结果<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        处理节点<span class="token punctuation">;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>
        回溯，撤销处理结果
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Sn={href:"https://leetcode.cn/problems/all-paths-from-source-to-target/",target:"_blank",rel:"noopener noreferrer"},An=p('<h4 id="_2-1-4-2-拓扑排序" tabindex="-1"><a class="header-anchor" href="#_2-1-4-2-拓扑排序" aria-hidden="true">#</a> 2.1.4.2 拓扑排序</h4><p>​ 拓扑排序常用来判断一个图是不是有向无环图。<strong>看到依赖问题，首先想到的就是把问题转化成「有向图」这种数据结构，只要图中存在环，那就说明存在循环依赖</strong>。<strong>发现这幅有向图中存在环，那就说明存在循环依赖</strong>。常见的实现方式有dfs和bfs两种。</p><p>​ bfs的思路如下：</p><ol><li>构建邻接表，和之前一样，边的方向表示「被依赖」关系。</li><li>构建一个 <code>indegree</code> 数组记录每个节点的入度，即 <code>indegree[i]</code> 记录节点 <code>i</code> 的入度。</li><li>对 BFS 队列进行初始化，将入度为 0 的节点首先装入队列。</li><li><strong>开始执行 BFS 循环，不断弹出队列中的节点，减少相邻节点的入度，并将入度变为 0 的节点加入队列</strong>。</li><li><strong>如果最终所有节点都被遍历过（count 等于节点数），则说明不存在环，反之则说明存在环</strong>。(或者存在度大于1的点也证明存在环)。</li></ol>',4),Nn={href:"https://leetcode.cn/problems/course-schedule-ii/",target:"_blank",rel:"noopener noreferrer"},En={href:"https://leetcode.cn/problems/find-eventual-safe-states/",target:"_blank",rel:"noopener noreferrer"},Mn=p(`<h4 id="_2-1-4-3-二分图" tabindex="-1"><a class="header-anchor" href="#_2-1-4-3-二分图" aria-hidden="true">#</a> 2.1.4.3 二分图</h4><p>​ 二分图的顶点集可分割为两个互不相交的子集，图中每条边依附的两个顶点都分属于这两个子集，且两个子集内的顶点不相邻。</p><p>​ 说的简单一点，就是<strong>给你一幅「图」，请你用两种颜色将图中的所有顶点着色，且使得任意一条边的两个端点的颜色都不相同</strong>。常见的解决办法有染色法（BFS/DFS），或者并查集。并查集放在其他地方写，这里只写bfs和dfs的写法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//BFS</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//0未访问 1 -1为颜色</span>
	<span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//访问过</span>
		queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">int</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token comment">//下一个颜色和当前相同</span>
 				<span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">==</span> vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
				<span class="token comment">//下一个点没有被访问过</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//染上相反的颜色</span>
                    vis<span class="token punctuation">[</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>vis<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>
					queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
 		<span class="token punctuation">}</span>
 	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//DFS</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis<span class="token punctuation">;</span>
<span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBipartite</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//0未访问 1 -1为颜色</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//访问过</span>
        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>graph <span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>flag <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> vis<span class="token punctuation">[</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            vis<span class="token punctuation">[</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>vis<span class="token punctuation">[</span> v <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//先染色</span>
            <span class="token function">dfs</span><span class="token punctuation">(</span> graph <span class="token punctuation">,</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Bn={href:"https://leetcode.cn/problems/is-graph-bipartite/",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://leetcode.cn/problems/possible-bipartition/",target:"_blank",rel:"noopener noreferrer"},Vn=p(`<h4 id="_2-1-4-4-并查集" tabindex="-1"><a class="header-anchor" href="#_2-1-4-4-并查集" aria-hidden="true">#</a> 2.1.4.4 并查集</h4><p>​ 并查集主要是解决图论中**「动态连通性」**问题的。<strong>如果某两个节点被连通，则让其中的（任意）一个节点的根节点接到另一个节点的根节点上</strong>：<strong>因为如果节点 p 和 q 连通的话，它们一定拥有相同的根节点</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//连通分量个数</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    count <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    
    <span class="token keyword">return</span> n <span class="token operator">==</span> pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token punctuation">(</span> pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> <span class="token keyword">int</span> u <span class="token punctuation">,</span> <span class="token keyword">int</span> v <span class="token punctuation">)</span><span class="token punctuation">{</span>    
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> y <span class="token punctuation">)</span> pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//连通分量个数减少</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span> <span class="token keyword">int</span> p <span class="token punctuation">,</span> <span class="token keyword">int</span> q <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rootP <span class="token operator">==</span> rootQ<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Fn={href:"https://leetcode.cn/problems/number-of-provinces/",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://leetcode.cn/problems/redundant-connection/",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://leetcode.cn/problems/number-of-connected-components-in-an-undirected-graph/",target:"_blank",rel:"noopener noreferrer"},Kn=p(`<h3 id="_2-1-5-最小生成树" tabindex="-1"><a class="header-anchor" href="#_2-1-5-最小生成树" aria-hidden="true">#</a> 2.1.5 最小生成树</h3><p>​ <strong>先说「树」和「图」的根本区别：树不会包含环，图可以包含环</strong>。<strong>所有可能的生成树中，权重和最小的那棵生成树就叫「最小生成树」</strong>。一般有两种算法，Kruskal 算法和 Prim 算法。</p><h4 id="_2-1-5-1-kruskal" tabindex="-1"><a class="header-anchor" href="#_2-1-5-1-kruskal" aria-hidden="true">#</a> 2.1.5.1 Kruskal</h4><p>​ Kruskal 算法的一个难点是保证生成树的合法性，因为在构造生成树的过程中，你首先得保证生成的是棵树（不包含环），所以需要用到并查集，并查集见1.1.4部分，<strong>对于添加的这条边，如果该边的两个节点本来就在同一连通分量里，那么添加这条边会产生环；反之，如果该边的两个节点不在同一连通分量里，则添加这条边不会产生环</strong>。</p><p>​ <strong>将所有边按照权重从小到大排序，从权重最小的边开始遍历，如果这条边和 mst（已经构建的边集合） 中的其它边不会形成环，则这条边是最小生成树的一部分，将它加入 mst 集合；否则，这条边不是最小生成树的一部分，不要把它加入 mst 集合</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//连通分量个数</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    count <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    
    <span class="token keyword">return</span> n <span class="token operator">==</span> pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token punctuation">(</span> pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span> <span class="token keyword">int</span> u <span class="token punctuation">,</span> <span class="token keyword">int</span> v <span class="token punctuation">)</span><span class="token punctuation">{</span>    
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> y <span class="token punctuation">)</span> pre<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//连通分量个数减少</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span> <span class="token keyword">int</span> p <span class="token punctuation">,</span> <span class="token keyword">int</span> q <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> rootP <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rootQ <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rootP <span class="token operator">==</span> rootQ<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kruskal</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges <span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//points 为路线 [1 , 2]表示1 和 2连接  w数组为每条边的权重</span>
    <span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//权值和</span>
    <span class="token comment">// 根据权值 w 降序</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>points <span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Kruskal需要对所有的边进行排序，然后从小到大，依次遍历每条边.</span>
    <span class="token comment">//同时判断每条边是否同源，如果同源，跳过；</span>
    <span class="token comment">// 如果不同源，将两个连通分量合并，直到所有顶点属于同一个连通分量，算法结束</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges <span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">int</span> u <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> v <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> val <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">merge</span><span class="token punctuation">(</span> u <span class="token punctuation">,</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span>
            sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//这里的count的数量得看0节点没有用 若没用0 则会有两个连通分量</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> count <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//无法构成最小生成树</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-5-2-prim" tabindex="-1"><a class="header-anchor" href="#_2-1-5-2-prim" aria-hidden="true">#</a> 2.1.5.2 Prim</h4><p>​ <strong>Prim 算法使用 BFS 算法思想 和 visited 布尔数组避免成环</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// [起点，终点，权重]</span>
    <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>e1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>e2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 为了统一初始操作和其后的操作，预先放入一个值</span>
    pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用布尔数组代替HashSet可以提高50%性能</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 已经访问的节点数量</span>
    <span class="token keyword">int</span> visitedCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 总权重</span>
    <span class="token keyword">int</span> costs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> next <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果没有访问过</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 那么把终点加入到以访问清单中，同时累加权重</span>
            visited<span class="token punctuation">[</span>next<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            visitedCnt<span class="token operator">++</span><span class="token punctuation">;</span>
            costs <span class="token operator">+=</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 当全部节点都访问过时结束</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> visitedCnt <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// 把当前节点连向所有其他未访问节点的边加入堆</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> <span class="token keyword">to</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span><span class="token keyword">to</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//System.out.println(visitedCnt);</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> visitedCnt <span class="token operator">!=</span> n <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> costs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),Hn={href:"https://leetcode.cn/problems/min-cost-to-connect-all-points/",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://leetcode.cn/problems/connecting-cities-with-minimum-cost/",target:"_blank",rel:"noopener noreferrer"},Un=n("h3",{id:"_2-1-6-最短路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-6-最短路","aria-hidden":"true"},"#"),s(" 2.1.6 最短路")],-1),Rn=n("p",null,"​ 各种算法都可以过下面这题。",-1),Qn={href:"https://leetcode.cn/problems/network-delay-time/",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://leetcode.cn/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/",target:"_blank",rel:"noopener noreferrer"},Wn=p(`<h4 id="_2-1-6-1-floyd" tabindex="-1"><a class="header-anchor" href="#_2-1-6-1-floyd" aria-hidden="true">#</a> 2.1.6.1 Floyd</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> poiont_num <span class="token punctuation">,</span> edg_num <span class="token punctuation">;</span><span class="token comment">//点数量 和边数量</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化权值  i是本身就是0  不然就初始化为最大</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">!=</span> j <span class="token punctuation">)</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> 
            <span class="token comment">// 两个int 相加要爆int范围 所以要除以2</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 添加转折点k</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poiont_num <span class="token operator">=</span> n<span class="token punctuation">;</span> edg_num <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">:</span> points <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新完w数组为最短路</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ans <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-6-2-dijkstra" tabindex="-1"><a class="header-anchor" href="#_2-1-6-2-dijkstra" aria-hidden="true">#</a> 2.1.6.2 dijkstra</h4><p>​ 有两种版本，一种堆优化版本，一种邻接矩阵版本。<strong>该算法无法处理负权边</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//O(n^2)  邻接矩阵  朴素版本  常用稠密图  m == n^2</span>
<span class="token keyword">int</span> poiont_num <span class="token punctuation">,</span> edg_num <span class="token punctuation">;</span><span class="token comment">//点数量 和边数量</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//邻接矩阵 w[a][b] = c   a -&gt; b权重为c</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录点 是否被更新过</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// dist[x] = y 表示从起点 到点x 的最短距离为y</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化权值  i是本身就是0  不然就初始化为最大</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">!=</span> j <span class="token punctuation">)</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> 
            <span class="token comment">// 两个int 相加要爆int范围 所以要除以2</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span> <span class="token keyword">int</span> beg <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单源起点</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> vis <span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刚开始所有的点都没更新过</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> dist <span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//起点为0        </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到  最短距离最小  且没被更新过的点t</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> t <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//点t已经被更新</span>
        <span class="token comment">//用t当中转点  更新其他点的距离</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poiont_num <span class="token operator">=</span> n<span class="token punctuation">;</span> edg_num <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">:</span> points <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        w<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dijkstra</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新完是dist数组是起点到i的最短路</span>

    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ans <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//堆优化版本  常用稀疏图  m == n</span>
<span class="token keyword">int</span> poiont_num <span class="token punctuation">,</span> edg_num <span class="token punctuation">;</span><span class="token comment">//点数量 和边数量</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录点 是否被更新过</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// dist[x] = y 表示从起点 到点x 的最短距离为y</span>
<span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span> <span class="token keyword">int</span> beg <span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单源起点</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> vis <span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刚开始所有的点都没更新过</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> dist <span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//起点为0</span>
    <span class="token comment">//优先队列存储可以更新的所有点  ( 点编号 , 起点到该点的距离 ) 所以按距离最小建立堆</span>
    <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>beg <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加起点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dis <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//这个点被更新过</span>
        vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//开始更新该点            </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> nextNodeID <span class="token operator">=</span> neighbor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> distToNextNode <span class="token operator">=</span> dist<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">+</span> neighbor<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新 dp table</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> dist<span class="token punctuation">[</span>nextNodeID<span class="token punctuation">]</span> <span class="token operator">&gt;</span> distToNextNode <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dist<span class="token punctuation">[</span>nextNodeID<span class="token punctuation">]</span> <span class="token operator">=</span> distToNextNode<span class="token punctuation">;</span>
                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>nextNodeID<span class="token punctuation">,</span> distToNextNode<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poiont_num <span class="token operator">=</span> n<span class="token punctuation">;</span> edg_num <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">:</span> points <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>v <span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dijkstra</span><span class="token punctuation">(</span>k <span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新完是dist数组是起点到i的最短路</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ans <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 还有一种链式前向星版本，大数据范围下可以优化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//O(mlogn+n)  链式前向星  堆优化版本  常用稀疏图  m == n</span>
<span class="token keyword">int</span> poiont_num <span class="token punctuation">,</span> edg_num <span class="token punctuation">;</span><span class="token comment">//点数量 和边数量</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录点 是否被更新过</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// dist[x] = y 表示从起点 到点x 的最短距离为y    </span>
<span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//第 id 条边</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//head[a] = id 起点是a的边的最大编号是 id</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 第 id 条边a -&gt; b 去的终点 to[id] = b;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//next[id] = idx 表示和第 id 条边 起点相同的 下一条边的编号是idx</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//权重</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>
    next<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">to</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
    w<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    id<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span> <span class="token keyword">int</span> beg <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单源起点</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> vis <span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刚开始所有的点都没更新过</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> dist <span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    dist<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//起点为0</span>

    <span class="token comment">//优先队列存储可以更新的所有点  ( 点编号 , 起点到该点的距离 ) 所以按距离最小建立堆</span>
    <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>beg <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加起点</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dis <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//这个点被更新过</span>
        vis<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//开始更新该点</span>

        <span class="token comment">//head一开始初始化成了 -1</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 该边要去的点;</span>
            <span class="token comment">//起点去点t的距离 大于 起点去点id的距离 + 当前id -&gt; t代表的这条边的权重 id -&gt; t = w[i]</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> t <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poiont_num <span class="token operator">=</span> n<span class="token punctuation">;</span> edg_num <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> head <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">:</span> points <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span> u <span class="token punctuation">,</span> v <span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dijkstra</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新完是dist数组是起点到i的最短路</span>

    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ans <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-6-3-spfa和bellman-ford-负权边" tabindex="-1"><a class="header-anchor" href="#_2-1-6-3-spfa和bellman-ford-负权边" aria-hidden="true">#</a> 2.1.6.3 Spfa和bellman_ford(负权边)</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//O(mlogn+n)  链式前向星  堆优化版本  常用稀疏图  m == n</span>
<span class="token keyword">int</span> poiont_num <span class="token punctuation">,</span> edg_num <span class="token punctuation">;</span><span class="token comment">//点数量 和边数量</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录点 是否在队列中</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// dist[x] = y 表示从起点 到点x 的最短距离为y    </span>
<span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//第 id 条边</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//head[a] = id 起点是a的边的最大编号是 id</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 第 id 条边a -&gt; b 去的终点 to[id] = b;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//next[id] = idx 表示和第 id 条边 起点相同的 下一条边的编号是idx</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//权重</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>
    next<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">to</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
    w<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    id<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span> <span class="token keyword">int</span> beg <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 解决带有 负数权的最短路  优化Bellman Ford</span>
    <span class="token comment">// 起始先将所有的点标记为「距离为正无穷」</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 只有起点最短距离为 0</span>
    dist<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储 点的 编号</span>
    deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>beg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vis<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> point_id <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>point_id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//出队了 不在队列</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>point_id<span class="token punctuation">]</span> <span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>point_id<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>point_id<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span> vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//已经在队列了</span>
                deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>
                vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//入队了</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poiont_num <span class="token operator">=</span> n<span class="token punctuation">;</span> edg_num <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> head <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">:</span> points <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span> u <span class="token punctuation">,</span> v <span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">spfa</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新完是dist数组是起点到i的最短路</span>

    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ans <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//O(mlogn+n)  链式前向星  堆优化版本  常用稀疏图  m == n</span>
<span class="token keyword">int</span> poiont_num <span class="token punctuation">,</span> edg_num <span class="token punctuation">;</span><span class="token comment">//点数量 和边数量</span>
<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录点 是否被更新过</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// dist[x] = y 表示从起点 到点x 的最短距离为y    </span>
<span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//第 id 条边</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//head[a] = id 起点是a的边的最大编号是 id</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">to</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 第 id 条边a -&gt; b 去的终点 to[id] = b;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//next[id] = idx 表示和第 id 条边 起点相同的 下一条边的编号是idx</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//权重</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>
    next<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token keyword">to</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
    w<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
    id<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">bf</span><span class="token punctuation">(</span> <span class="token keyword">int</span> beg <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 解决带有 负数权的最短路</span>
    <span class="token comment">// 起始先将所有的点标记为「距离为正无穷」</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 只有起点最短距离为 0</span>
    dist<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 迭代 n 次</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> poiont_num<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prev <span class="token operator">=</span> dist<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 每次都使用上一次迭代的结果，执行松弛操作</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> poiont_num <span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token keyword">to</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> prev<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cul</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poiont_num <span class="token operator">=</span> n<span class="token punctuation">;</span> edg_num <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span> head <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">:</span> points <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> v <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span> u <span class="token punctuation">,</span> v <span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">bf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新完是dist数组是起点到i的最短路</span>

    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> ans <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-7-前缀树" tabindex="-1"><a class="header-anchor" href="#_2-1-7-前缀树" aria-hidden="true">#</a> 2.1.7 前缀树</h3><p>​ 这里只给出最简单的实现，复杂的个人觉得可以没必要掌握。常用来匹配字符串的前缀，字符串是否存在等问题。 ​</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> val<span class="token punctuation">;</span>
    <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span><span class="token comment">//ASCII的最大为256</span>
    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   	<span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Trie</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        root<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Trie</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">//求最短前缀</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">shortestPrefixOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">Trie</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">// 从节点 node 开始搜索 key</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> query<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> root <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 无法向下搜索</span>
                <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 找到一个键是 query 的前缀</span>
                <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">,</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 向下搜索</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span> root <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">!=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 如果 query 本身就是一个键</span>
            <span class="token keyword">return</span> query<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Trie</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span><span class="token punctuation">(</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>children<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),On={href:"https://leetcode.cn/problems/replace-words/",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://leetcode.cn/problems/design-add-and-search-words-data-structure/",target:"_blank",rel:"noopener noreferrer"},Jn=n("li",null,null,-1),Yn=n("h3",{id:"_2-1-8-设计数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-8-设计数据结构","aria-hidden":"true"},"#"),s(" 2.1.8 设计数据结构")],-1),Zn=n("p",null,"​ 都是一些设计题，要求实现一个数据结构，实现一些函数，而且空间复杂度和时间复杂度都要最优。很多题目不能使用自带的数据结构，要自己实现，比如实现双向链表等。",-1),$n={href:"https://leetcode.cn/problems/lru-cache/",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://leetcode.cn/problems/lfu-cache/",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://leetcode.cn/problems/find-median-from-data-stream/",target:"_blank",rel:"noopener noreferrer"},as={href:"https://labuladong.gitee.io/algo/2/23/65/",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://labuladong.gitee.io/algo/2/23/67/",target:"_blank",rel:"noopener noreferrer"},ps=n("p",null,"还包括前面的用队列实现栈，用栈实现队列。",-1),es=n("h3",{id:"_2-1-9-队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-9-队列","aria-hidden":"true"},"#"),s(" 2.1.9 队列")],-1),os=n("h4",{id:"_2-1-9-1-单调队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-9-1-单调队列","aria-hidden":"true"},"#"),s(" 2.1.9.1 单调队列")],-1),cs={href:"https://leetcode.cn/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},ls=n("h4",{id:"_2-1-9-2-优先队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-9-2-优先队列","aria-hidden":"true"},"#"),s(" 2.1.9.2 优先队列")],-1),is={href:"https://leetcode.cn/problems/sort-characters-by-frequency/",target:"_blank",rel:"noopener noreferrer"},us={href:"https://leetcode.cn/problems/meeting-rooms-ii/",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://leetcode.cn/problems/top-k-frequent-elements/",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://leetcode.cn/problems/meeting-rooms-iii/",target:"_blank",rel:"noopener noreferrer"},ds=p('<h2 id="_2-2-双指针" tabindex="-1"><a class="header-anchor" href="#_2-2-双指针" aria-hidden="true">#</a> 2.2 双指针</h2><p>​ 双指针是一种很常见的算法，可以节约很多时间，也需要掌握。</p><h3 id="_2-2-1-链表" tabindex="-1"><a class="header-anchor" href="#_2-2-1-链表" aria-hidden="true">#</a> 2.2.1 链表</h3><p>​ 详情见1.1.1.2部分</p><h3 id="_2-2-2-数组-或字符串" tabindex="-1"><a class="header-anchor" href="#_2-2-2-数组-或字符串" aria-hidden="true">#</a> 2.2.2 数组(或字符串)</h3>',5),ms={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},vs={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://leetcode.cn/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},hs=p(`<h3 id="_2-2-3-二分" tabindex="-1"><a class="header-anchor" href="#_2-2-3-二分" aria-hidden="true">#</a> 2.2.3 二分</h3><p>​ 下面是常见的二分，就无需多介绍了，主要在于求左边边界和右边边界的时候。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 直接返回</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 找不到直接返回</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//找左边边界</span>
<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 别返回，锁定左侧边界</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断 target 是否存在于 nums 中</span>
    <span class="token comment">// 此时 target 比所有数都大，返回 -1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断一下 nums[left] 是不是 target</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> left <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//找右边边界</span>
<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 别返回，锁定右侧边界</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 此时 left - 1 索引越界</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断一下 nums[left] 是不是 target</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> <span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),fs={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://leetcode.cn/problems/find-peak-element/",target:"_blank",rel:"noopener noreferrer"},ws=n("p",null,"​ 找边界，有时候需要转换问题，找到自变量x，用二分求符合条件的x的值，一般此种类型的题目，需要找到符合条件的函数，约束的target，和x的取值范围。",-1),ys={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},gs={href:"https://leetcode.cn/problems/koko-eating-bananas/",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://leetcode.cn/problems/split-array-largest-sum/",target:"_blank",rel:"noopener noreferrer"},xs=p(`<h2 id="_2-3-前缀和-差分" tabindex="-1"><a class="header-anchor" href="#_2-3-前缀和-差分" aria-hidden="true">#</a> 2.3 前缀和 差分</h2><p>​ 前缀和和差分在有些求和区间查询问题上十分常见，更难一些的题目是利用前缀和和差分去构建树状数组，但是这里首先需要了解前缀和和差分的做法。</p><p>​ 下面就是一个前缀和代码，<strong>前缀和主要适用的场景是原始数组不会被修改的情况下，频繁查询某个区间的累加和。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sum<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//计算前缀和</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//区间求和</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	<span class="token keyword">return</span> sum<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Cs={href:"https://leetcode.cn/problems/range-sum-query-2d-immutable/",target:"_blank",rel:"noopener noreferrer"},js={href:"https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/",target:"_blank",rel:"noopener noreferrer"},qs=p(`<p>​ <strong>差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减</strong>，通过构建差分数组就可以快速的得到所有操作完成后的最终数组。下面就是差分数组对于在[left , rigth]对整个区间增加或减少val的操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token punctuation">,</span> <span class="token keyword">int</span> right <span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    diff<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> dff<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diff<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 而使用如下代码可以得到最终的数组。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> diff<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),Is={href:"https://leetcode.cn/problems/range-addition/",target:"_blank",rel:"noopener noreferrer"},Ss={href:"https://leetcode.cn/problems/corporate-flight-bookings/",target:"_blank",rel:"noopener noreferrer"},As={href:"https://leetcode.cn/problems/car-pooling/",target:"_blank",rel:"noopener noreferrer"},Ns=n("h2",{id:"_2-4-奇怪的逻辑题-包含螺旋数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-4-奇怪的逻辑题-包含螺旋数组","aria-hidden":"true"},"#"),s(" 2.4 奇怪的逻辑题(包含螺旋数组)")],-1),Es=n("p",null,"​ 这种题目比较考验你的代码能力，还有思考能力，一般细节比较多，笔试中要是遇到了写不出来可能会花大量时间，得不偿失。",-1),Ms=n("h3",{id:"_2-4-1-代码能力",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-4-1-代码能力","aria-hidden":"true"},"#"),s(" 2.4.1 代码能力")],-1),Bs={href:"https://leetcode.cn/problems/spiral-matrix-ii/",target:"_blank",rel:"noopener noreferrer"},Ts={href:"https://leetcode.cn/problems/spiral-matrix/",target:"_blank",rel:"noopener noreferrer"},Vs={href:"https://leetcode.cn/problems/rotate-image/",target:"_blank",rel:"noopener noreferrer"},Fs={href:"https://leetcode.cn/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},zs={href:"https://leetcode.cn/problems/multiply-strings/",target:"_blank",rel:"noopener noreferrer"},Ds=p(`<h3 id="_2-4-2-思维数学递推" tabindex="-1"><a class="header-anchor" href="#_2-4-2-思维数学递推" aria-hidden="true">#</a> 2.4.2 思维数学递推</h3><p>​ 下面放一些常见的数学或者思维题，还是要掌握的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// a b 最大公约数</span>
    <span class="token keyword">return</span> b <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span> b <span class="token punctuation">,</span>a <span class="token operator">%</span> b <span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">qpower</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">,</span> <span class="token keyword">int</span> mod <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//快速幂取模</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    a <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> b <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Ks={href:"https://leetcode.cn/problems/factorial-trailing-zeroes/",target:"_blank",rel:"noopener noreferrer"},Hs={href:"https://leetcode.cn/problems/advantage-shuffle/",target:"_blank",rel:"noopener noreferrer"},Ps={href:"https://leetcode.cn/problems/count-primes/",target:"_blank",rel:"noopener noreferrer"},Us={href:"https://leetcode.cn/problems/super-pow/",target:"_blank",rel:"noopener noreferrer"},Rs={href:"https://leetcode.cn/problems/bulb-switcher/",target:"_blank",rel:"noopener noreferrer"},Qs={href:"https://leetcode.cn/problems/nim-game/",target:"_blank",rel:"noopener noreferrer"},Xs=p(`<h2 id="_2-5-滑动窗口" tabindex="-1"><a class="header-anchor" href="#_2-5-滑动窗口" aria-hidden="true">#</a> 2.5 滑动窗口</h2><p>​ 滑动窗口一般就是维护一个窗口，遍历的时候，不断有新的元素从窗口右边进来，同时为了保持窗口的合法性，要不断从窗口左边去弹出。滑动窗口的框架如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">slidingWindow</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unordered_map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> window<span class="token punctuation">;</span>
	<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// c 是将移入窗口的字符</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 增大窗口</span>
        right<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行窗口内数据的一系列更新</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token doc-comment comment">/*** debug 输出的位置 ***/</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;window: [%d, %d)\\n&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token doc-comment comment">/********************/</span>

        <span class="token comment">// 判断左侧窗口是否要收缩</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window needs shrink<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//保证窗口的合法性</span>
            <span class="token comment">// d 是将移出窗口的字符</span>
            <span class="token keyword">char</span> d <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 缩小窗口</span>
            left<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">// 进行窗口内数据的一系列更新</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Ws={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},Os={href:"https://leetcode.cn/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},Gs={href:"https://leetcode.cn/problems/minimum-size-subarray-sum/",target:"_blank",rel:"noopener noreferrer"},Js={href:"https://leetcode.cn/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},Ys={href:"https://leetcode.cn/problems/subarray-product-less-than-k/",target:"_blank",rel:"noopener noreferrer"},Zs=p(`<h2 id="_2-6-字符串" tabindex="-1"><a class="header-anchor" href="#_2-6-字符串" aria-hidden="true">#</a> 2.6 字符串</h2><h3 id="_2-6-1-kmp" tabindex="-1"><a class="header-anchor" href="#_2-6-1-kmp" aria-hidden="true">#</a> 2.6.1 kmp</h3><p>​ 寻找needle在haystack第一次出现的位置，用kmp算法，构造一个最长公共前后缀，这样就可以不用每次从头开始匹配，节约时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
	<span class="token keyword">if</span><span class="token punctuation">(</span> needle <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    
	<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
	<span class="token function">getNext</span><span class="token punctuation">(</span>next <span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        
		<span class="token comment">//不相等找前缀表        </span>
		<span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        		 <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        
		<span class="token keyword">if</span><span class="token punctuation">(</span> j <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> i <span class="token operator">-</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    
	<span class="token punctuation">}</span>    
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//前缀表 最长公共前后缀</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
	next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        
		<span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        
		<span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        
		next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),$s={href:"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/",target:"_blank",rel:"noopener noreferrer"},na=p(`<h3 id="_2-6-2-字符串hash" tabindex="-1"><a class="header-anchor" href="#_2-6-2-字符串hash" aria-hidden="true">#</a> 2.6.2 字符串hash</h3><p>​ 维护一个滑动窗口，在字符串匹配的时候可以节约时间。<strong>也叫Rabin-Karp算法，运用滑动哈希算法一边滑动一边计算窗口中字符串的哈希值，拿这个哈希值去和模式串的哈希值比较，这样就可以避免截取子串，从而把匹配算法降低为 O(N)，这就是 Rabin-Karp 指纹字符串查找算法的核心逻辑</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 文本串</span>
<span class="token class-name">String</span> txt<span class="token punctuation">;</span>
<span class="token comment">// 模式串</span>
<span class="token class-name">String</span> pat<span class="token punctuation">;</span>
<span class="token comment">// 需要寻找的子串长度为模式串 pat 的长度</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 仅处理 ASCII 码字符串，可以理解为 256 进制的数字</span>
<span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
<span class="token comment">// 存储 R^(L - 1) 的结果</span>
<span class="token keyword">int</span> <span class="token constant">RL</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 维护滑动窗口中字符串的哈希值</span>
<span class="token keyword">int</span> windowHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 计算模式串的哈希值</span>
<span class="token keyword">long</span> patHash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    patHash <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> patHash <span class="token operator">+</span> pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 滑动窗口代码框架</span>
<span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 扩大窗口，移入字符（在最低位添加数字）</span>
    windowHash <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> windowHash <span class="token operator">+</span> txt<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
    right<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token comment">// 当子串的长度达到要求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据哈希值判断窗口中的子串是否匹配模式串 pat</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>patHash <span class="token operator">==</span> windowHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 找到模式串</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;找到模式串，起始索引为&quot;</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 缩小窗口，移出字符（删除最高位数字）</span>
        windowHash <span class="token operator">=</span> windowHash <span class="token operator">-</span> txt<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token constant">RL</span><span class="token punctuation">;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 没有找到模式串</span>
<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),sa={href:"https://leetcode.cn/problems/repeated-dna-sequences/",target:"_blank",rel:"noopener noreferrer"},aa=n("h2",{id:"_2-7-随机算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-7-随机算法","aria-hidden":"true"},"#"),s(" 2.7 随机算法")],-1),ta=n("h3",{id:"_2-7-1-蓄水池抽样",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-7-1-蓄水池抽样","aria-hidden":"true"},"#"),s(" 2.7.1 蓄水池抽样")],-1),pa=n("p",null,"​ 总的样本数量未知，从所有样本中抽取若干个，要求每个样本被抽到的概率相等",-1),ea={href:"https://leetcode.cn/problems/linked-list-random-node/solution/gong-shui-san-xie-xu-shui-chi-chou-yang-1lp9d/",target:"_blank",rel:"noopener noreferrer"},oa={href:"https://leetcode.cn/problems/linked-list-random-node/",target:"_blank",rel:"noopener noreferrer"},ca={href:"https://leetcode.cn/problems/random-pick-index/",target:"_blank",rel:"noopener noreferrer"},la=p(`<h3 id="_2-7-2-带权重随机" tabindex="-1"><a class="header-anchor" href="#_2-7-2-带权重随机" aria-hidden="true">#</a> 2.7.2 带权重随机</h3><p>​ 带权重的数字可以转换成为前缀和数组，将每个权重转为长度为权重的线段，然后用二分查找优化时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
        <span class="token comment">// 前缀和数组</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preSum<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> w<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token comment">// 构建前缀和数组，偏移一位留给 preSum[0]</span>
            preSum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            preSum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// preSum[i] = sum(w[0..i-1])</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                preSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> preSum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pickIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> preSum<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token comment">// 在闭区间 [1, preSum[n - 1]] 中随机选择一个数字</span>
            <span class="token keyword">int</span> target <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>preSum<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取 target 在前缀和数组 preSum 中的索引</span>
            <span class="token comment">// 别忘了前缀和数组 preSum 和原始数组 w 有一位索引偏移</span>
            <span class="token keyword">return</span> <span class="token function">left_bound</span><span class="token punctuation">(</span>preSum<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 搜索左侧边界的二分搜索</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span> left <span class="token operator">&lt;=</span> right <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span> right <span class="token operator">-</span> left <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target <span class="token punctuation">)</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 判断 target 是否存在于 nums 中</span>
            <span class="token comment">// 此时 target 比所有数都大，返回 -1</span>
            <span class="token keyword">return</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ia={href:"https://leetcode.cn/problems/random-pick-with-weight/",target:"_blank",rel:"noopener noreferrer"},ua=n("h3",{id:"_2-7-3-普通随机-o-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-7-3-普通随机-o-1","aria-hidden":"true"},"#"),s(" 2.7.3 普通随机(O(1))")],-1),ra=n("p",null,"​ 这类问题需要在常数空间，O(1)时间内解决。",-1),ka={href:"https://leetcode.cn/problems/insert-delete-getrandom-o1/",target:"_blank",rel:"noopener noreferrer"},da={href:"https://leetcode.cn/problems/random-pick-with-blacklist/",target:"_blank",rel:"noopener noreferrer"},ma=n("h3",{id:"_2-7-4-洗牌算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-7-4-洗牌算法","aria-hidden":"true"},"#"),s(" 2.7.4 洗牌算法")],-1),va={href:"https://leetcode.cn/problems/shuffle-an-array/solution/gong-shui-san-xie-xi-pai-suan-fa-yun-yon-0qmy/",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://leetcode.cn/problems/shuffle-an-array/",target:"_blank",rel:"noopener noreferrer"},ha=n("h2",{id:"_2-8-排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-8-排序","aria-hidden":"true"},"#"),s(" 2.8 排序")],-1),fa=n("p",null,"​ 排序算法很重要，不仅要知道稳定性，还要知道时间复杂度，空间复杂度，对于常见的排序还需要会自己实现。对于这些基础东西直接去看下面的链接。总结的很好。快排、堆排、归并等是重点。",-1),_a=n("p",null,"​ 对于序列中的相同元素，如果排序之后它们的相对位置没有发生改变，则称该排序算法为「稳定排序」，反之则为「不稳定排序」。",-1),wa={href:"https://javaguide.cn/cs-basics/algorithms/10-classical-sorting-algorithms.html#%E7%AE%80%E4%BB%8B",target:"_blank",rel:"noopener noreferrer"},ya=n("p",null,"可以用各种排序代码过下面这个题：",-1),ga={href:"https://leetcode.cn/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"},La=n("h3",{id:"_2-8-1-归并排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-8-1-归并排序","aria-hidden":"true"},"#"),s(" 2.8.1 归并排序")],-1),xa=n("p",null,[s("​ 归并排序常用来解决"),n("strong",null,"逆序对"),s("问题，常见的计算逆序对的总和，某一点有多少个逆序等等等。先把左半边数组排好序，再把右半边数组排好序，然后把两半数组合并。")],-1),Ca={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self/",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://leetcode.cn/problems/count-of-range-sum/",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://leetcode.cn/problems/reverse-pairs/",target:"_blank",rel:"noopener noreferrer"},Ia=n("h3",{id:"_2-8-2-快速排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-8-2-快速排序","aria-hidden":"true"},"#"),s(" 2.8.2 快速排序")],-1),Sa=n("p",null,[s("​ "),n("strong",null,"快速排序是先将一个元素排好序，然后再将剩下的元素排好序"),s("。"),n("strong",null,"快速排序的过程是一个构造二叉搜索树的过程"),s("。")],-1),Aa=n("p",null,"​ 快速选择排序比快排更优，见下题。",-1),Na={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/",target:"_blank",rel:"noopener noreferrer"},Ea=p('<h2 id="_2-9-动态规划" tabindex="-1"><a class="header-anchor" href="#_2-9-动态规划" aria-hidden="true">#</a> 2.9 动态规划</h2><ol><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><p>​ 遍历方向要遵循如下要求。</p><ol><li><strong>遍历的过程中，所需的状态必须是已经计算出来的</strong>。</li><li><strong>遍历结束后，存储结果的那个位置必须已经被计算出来</strong></li></ol><h3 id="_2-9-1-经典dp" tabindex="-1"><a class="header-anchor" href="#_2-9-1-经典dp" aria-hidden="true">#</a> 2.9.1 经典DP</h3>',5),Ma={href:"https://leetcode.cn/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},Ba={href:"https://leetcode.cn/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"},Ta={href:"https://leetcode.cn/problems/dungeon-game/",target:"_blank",rel:"noopener noreferrer"},Va={href:"https://leetcode.cn/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram/",target:"_blank",rel:"noopener noreferrer"},za={href:"https://leetcode.cn/problems/integer-break/",target:"_blank",rel:"noopener noreferrer"},Da=n("h3",{id:"_2-9-2-子序列问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-9-2-子序列问题","aria-hidden":"true"},"#"),s(" 2.9.2 子序列问题")],-1),Ka={href:"https://leetcode.cn/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"},Ha={href:"https://leetcode.cn/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"},Pa={href:"https://leetcode.cn/problems/longest-common-subsequence/",target:"_blank",rel:"noopener noreferrer"},Ua={href:"https://leetcode.cn/problems/delete-operation-for-two-strings/",target:"_blank",rel:"noopener noreferrer"},Ra={href:"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/",target:"_blank",rel:"noopener noreferrer"},Qa={href:"https://leetcode.cn/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"},Xa={href:"https://leetcode.cn/problems/maximum-length-of-repeated-subarray/",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://leetcode.cn/problems/is-subsequence/",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://leetcode.cn/problems/distinct-subsequences/",target:"_blank",rel:"noopener noreferrer"},Ga=n("h3",{id:"_2-9-3-背包问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-9-3-背包问题","aria-hidden":"true"},"#"),s(" 2.9.3 背包问题")],-1),Ja=n("p",null,"01 背包",-1),Ya={href:"https://leetcode.cn/problems/partition-equal-subset-sum/",target:"_blank",rel:"noopener noreferrer"},Za={href:"https://leetcode.cn/problems/last-stone-weight-ii/",target:"_blank",rel:"noopener noreferrer"},$a={href:"https://leetcode.cn/problems/target-sum/",target:"_blank",rel:"noopener noreferrer"},nt={href:"https://leetcode.cn/problems/ones-and-zeroes/",target:"_blank",rel:"noopener noreferrer"},st=n("p",null,"完全背包",-1),at={href:"https://leetcode.cn/problems/coin-change-ii/",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://leetcode.cn/problems/combination-sum-iv/",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://leetcode.cn/problems/word-break/",target:"_blank",rel:"noopener noreferrer"},et=n("h3",{id:"_2-9-4-打家劫舍问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-9-4-打家劫舍问题","aria-hidden":"true"},"#"),s(" 2.9.4 打家劫舍问题")],-1),ot=n("p",null,"​ 面试或者笔试常考。",-1),ct={href:"https://leetcode.cn/problems/house-robber/",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://leetcode.cn/problems/house-robber-ii/",target:"_blank",rel:"noopener noreferrer"},it={href:"https://leetcode.cn/problems/house-robber-iii/",target:"_blank",rel:"noopener noreferrer"},ut=p(`<h3 id="_2-9-5-股票问题" tabindex="-1"><a class="header-anchor" href="#_2-9-5-股票问题" aria-hidden="true">#</a> 2.9.5 股票问题</h3><p>​ 面试或者笔试常考。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>n 为天数，大 <span class="token class-name">K</span> 为交易数的上限，<span class="token number">0</span> 和 <span class="token number">1</span> 代表是否持有股票。
base <span class="token keyword">case</span>：
dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>infinity

状态转移方程：
dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),rt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/",target:"_blank",rel:"noopener noreferrer"},vt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/",target:"_blank",rel:"noopener noreferrer"},ht=p('<h2 id="_2-10-贪心问题" tabindex="-1"><a class="header-anchor" href="#_2-10-贪心问题" aria-hidden="true">#</a> 2.10 贪心问题</h2><p>​ 贪心问题是步步最优，需要证明最优解。常见的就是区间问题和跳跃问题。</p><ul><li>将问题分解为若干个子问题</li></ul><ul><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>​ <strong>贪心没有套路</strong>，推不出来就举反例。</p>',5),ft={href:"https://leetcode.cn/problems/non-overlapping-intervals/",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/",target:"_blank",rel:"noopener noreferrer"},wt={href:"https://leetcode.cn/problems/merge-intervals/",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://leetcode.cn/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"},gt={href:"https://leetcode.cn/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://leetcode.cn/problems/candy/",target:"_blank",rel:"noopener noreferrer"},xt={href:"https://leetcode.cn/problems/gas-station/",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://leetcode.cn/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"},jt={href:"https://leetcode.cn/problems/interval-list-intersections/",target:"_blank",rel:"noopener noreferrer"},qt=p(`<h2 id="_2-11-bfs" tabindex="-1"><a class="header-anchor" href="#_2-11-bfs" aria-hidden="true">#</a> 2.11 BFS</h2><p>​ BFS其实就是暴力枚举，把每种符合情况的放入队列中。</p><h3 id="_2-11-1-岛屿问题" tabindex="-1"><a class="header-anchor" href="#_2-11-1-岛屿问题" aria-hidden="true">#</a> 2.11.1 岛屿问题</h3><p>​ 基本都是板子题，个别地方不一样稍微改一下即可通过。下面的板子要根据具体题目和注释改一些if判断。</p><p>​ 可以题目可以确定起点的则不需要双重循环里面去bfs，直接将起点加入队列然后开始bfs，代码差不多。给出计算岛屿数量的模板，其他题目差不多。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dx <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//没有被访问过 且grid的值符合条件的 &#39;1&#39;是可改值</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span> <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i <span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记访问</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">int</span> x <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> y <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">int</span> n_x <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> n_y <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span> n_x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n_x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> n_y <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n_y <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">[</span>n_x<span class="token punctuation">]</span><span class="token punctuation">[</span>n_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>n_x<span class="token punctuation">]</span><span class="token punctuation">[</span>n_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//符合条件的</span>
                            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>n_x <span class="token punctuation">,</span> n_y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            vis<span class="token punctuation">[</span>n_x<span class="token punctuation">]</span><span class="token punctuation">[</span>n_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//标记访问</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span>
                ans<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),It={href:"https://leetcode.cn/problems/max-area-of-island/",target:"_blank",rel:"noopener noreferrer"},St={href:"https://leetcode.cn/problems/number-of-islands/",target:"_blank",rel:"noopener noreferrer"},At={href:"https://leetcode.cn/problems/count-sub-islands/",target:"_blank",rel:"noopener noreferrer"},Nt={href:"https://leetcode.cn/problems/making-a-large-island/",target:"_blank",rel:"noopener noreferrer"},Et=p(`<h3 id="_2-11-2-双向bfs" tabindex="-1"><a class="header-anchor" href="#_2-11-2-双向bfs" aria-hidden="true">#</a> 2.11.2 双向bfs</h3><p>​ 朴素的 BFS 可能会带来**「搜索空间爆炸」**的情况。有时候可以双向bfs，<strong>同时从两个方向开始搜索，一旦搜索到相同的值，意味着找到了一条联通起点和终点的最短路径。</strong></p><p>​ 「双向 BFS」的基本实现思路如下：</p><ol><li>创建「两个队列」分别用于两个方向的搜索；</li><li>创建「两个哈希表」用于「解决相同节点重复搜索」和「记录转换次数」；</li><li>为了尽可能让两个搜索方向“平均”，每次从队列中取值进行扩展时，先判断哪个队列容量较少；</li><li>如果在搜索过程中「搜索到对方搜索过的节点」，说明找到了最短路径。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>d1、d2 为两个方向的队列
m1、m2 为两个方向的哈希表，记录每个节点距离起点的
<span class="token comment">// 只有两个队列都不空，才有必要继续往下搜索</span>
<span class="token comment">// 如果其中一个队列空了，说明从某个方向搜到底都搜不到该方向的目标节点</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>d1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>d2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> d2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">update</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">update</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> m1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// update 为将当前队列 d 中包含的元素取出，进行「一次完整扩展」的逻辑（按层拓展）</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Deque</span> d<span class="token punctuation">,</span> <span class="token class-name">Map</span> cur<span class="token punctuation">,</span> <span class="token class-name">Map</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 直接给出127代码为例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
        <span class="token comment">//双向bfs  可以节约时间  一般用两个队列同时搜</span>
    <span class="token class-name">String</span> beg <span class="token punctuation">,</span> end<span class="token punctuation">;</span>
    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">ladderLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> beginWord<span class="token punctuation">,</span> <span class="token class-name">String</span> endWord<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        beg <span class="token operator">=</span> beginWord<span class="token punctuation">;</span>
        end <span class="token operator">=</span> endWord<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> word <span class="token operator">:</span> wordList <span class="token punctuation">)</span> dict<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> word <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>dict<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//vis不包含最终的单词则无解</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1表示不可以到达</span>
        <span class="token keyword">return</span> ans <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> ans <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// + 1是起点的单词数量为1</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deque_beg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从起点开始搜</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deque_end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从终点反向搜</span>
        <span class="token comment">//map_beg 和 map_end 分别记录两个方向出现的单词是经过多少次转换而来</span>
        <span class="token comment">//map_beg = {&quot;abc&quot;:1} 代表 abc 由 beginWord 替换 1 次字符而来</span>
        <span class="token comment">//map_end = {&quot;xyz&quot;:3} 代表 xyz 由 endWord 替换 3 次字符而来</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map_beg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> map_end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        map_beg<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> beg <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        deque_beg<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>beg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map_end<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span> end <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        deque_end<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         * 只有两个队列都不空，才有必要继续往下搜索
         * 如果其中一个队列空了，说明从某个方向搜到底都搜不到该方向的目标节点
         * e.g.
         * 例如，如果 d1 为空了，说明从 beginWord 搜索到底都搜索不到 endWord，反向搜索也没必要进行了
         */</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>deque_beg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>deque_end<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">// 为了让两个方向的搜索尽可能平均，优先拓展队列内元素少的方向</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> deque_beg<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> deque_end<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span> deque_beg <span class="token punctuation">,</span> map_beg <span class="token punctuation">,</span> map_end <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span> deque_end <span class="token punctuation">,</span> map_end <span class="token punctuation">,</span> map_beg <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span> t <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// update 代表从 deque 中取出一个单词进行扩展，</span>
    <span class="token comment">// cur 为当前方向的距离字典；other 为另外一个方向的距离字典</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deque <span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cur <span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> other <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里只能用m--才可以回到上面去调用新的update 平衡两个队列中的元素大小</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span> m<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 获取当前需要扩展的原字符串</span>
            <span class="token class-name">String</span> curStr <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> curStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> curStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">char</span> temp <span class="token operator">=</span> ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前i位置的字符</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span> <span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换 i 位置的字符;</span>
                    <span class="token class-name">String</span> next <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>dict<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">// 因为转换一个字母后必须出现在单词字典中</span>
                    <span class="token comment">// 如果该字符串在「当前方向」被记录过（拓展过），跳过即可</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span> cur<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token comment">// 如果该字符串在「另一方向」出现过，说明找到了联通两个方向的最短路</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span> other<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> cur<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> other<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 否则加入 deque 队列</span>
                        deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        cur<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> cur<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Mt={href:"https://leetcode.cn/problems/word-ladder/",target:"_blank",rel:"noopener noreferrer"},Bt={href:"https://leetcode.cn/problems/minimum-genetic-mutation/",target:"_blank",rel:"noopener noreferrer"},Tt=n("h3",{id:"_2-11-3-状态压缩bfs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-11-3-状态压缩bfs","aria-hidden":"true"},"#"),s(" 2.11.3 状态压缩BFS")],-1),Vt=n("p",null,"​ 遇到了好多题，了解一下。",-1),Ft={href:"https://leetcode.cn/problems/shortest-path-to-get-all-keys/solution/by-ac_oier-5gxc/",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://leetcode.cn/problems/shortest-path-to-get-all-keys/",target:"_blank",rel:"noopener noreferrer"},Dt=n("h3",{id:"_2-11-4-其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-11-4-其他","aria-hidden":"true"},"#"),s(" 2.11.4 其他")],-1),Kt={href:"https://leetcode.cn/problems/open-the-lock/",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Pt=p(`<h2 id="_2-12-回溯问题" tabindex="-1"><a class="header-anchor" href="#_2-12-回溯问题" aria-hidden="true">#</a> 2.12 回溯问题</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        存放结果<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        处理节点<span class="token punctuation">;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>
        回溯，撤销处理结果
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-12-1-经典回溯" tabindex="-1"><a class="header-anchor" href="#_2-12-1-经典回溯" aria-hidden="true">#</a> 2.12.1 经典回溯</h3>`,3),Ut={href:"https://leetcode.cn/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"},Rt={href:"https://leetcode.cn/problems/sudoku-solver/",target:"_blank",rel:"noopener noreferrer"},Qt={href:"https://leetcode.cn/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"},Xt=p(`<p>​ 常见的就是排列组合和子集问题，一般分为可不可以重复选取，涉及到去重问题。</p><p>​ 在dfs中常用如下代码去重。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> vis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 在dfs中常用控制下标的方式看能不能取到重复值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>元素无重不可复选，即 nums 中的元素都是唯一的，每个元素最多只能被使用一次</strong>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 组合/子集问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回溯算法标准框架</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意参数</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 撤销选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 排列问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 剪枝逻辑</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 做选择</span>
        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">// 撤销选择</span>
    	track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>元素可重不可复选，即 nums 中的元素可以存在重复，每个元素最多只能被使用一次</strong>。要先排序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 组合/子集问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回溯算法标准框架</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 剪枝逻辑，跳过值相同的相邻树枝</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意参数</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 撤销选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 排列问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 剪枝逻辑</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 剪枝逻辑，固定相同的元素在排列中的相对位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 做选择</span>
        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 撤销选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>元素无重可复选，即 nums 中的元素都是唯一的，每个元素可以被使用若干次</strong>，只要删掉上面去重逻辑即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* 组合/子集问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回溯算法标准框架</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意参数</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 撤销选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 排列问题回溯算法框架 */</span>
<span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 做选择</span>
        track<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 撤销选择</span>
        track<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-12-2-子集问题" tabindex="-1"><a class="header-anchor" href="#_2-12-2-子集问题" aria-hidden="true">#</a> 2.12.2 子集问题</h3>`,12),Wt={href:"https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/",target:"_blank",rel:"noopener noreferrer"},Ot={href:"https://leetcode.cn/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},Gt={href:"https://leetcode.cn/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},Jt=n("h3",{id:"_2-12-2-排列问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-12-2-排列问题","aria-hidden":"true"},"#"),s(" 2.12.2 排列问题")],-1),Yt={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},Zt={href:"https://leetcode.cn/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},$t=n("h3",{id:"_2-12-2-组合问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-12-2-组合问题","aria-hidden":"true"},"#"),s(" 2.12.2 组合问题")],-1),np={href:"https://leetcode.cn/problems/combination-sum-iii/",target:"_blank",rel:"noopener noreferrer"},sp={href:"https://leetcode.cn/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},ap={href:"https://leetcode.cn/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"},tp={href:"https://leetcode.cn/problems/combinations/",target:"_blank",rel:"noopener noreferrer"},pp=n("h2",{id:"_2-13-位运算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-13-位运算","aria-hidden":"true"},"#"),s(" 2.13 位运算")],-1),ep=n("p",null,"​ 都是一些骚操作，要是知道的话可以很快解决一些问题，详情直接见题目然后去看题解的公式和证明。",-1),op={href:"https://leetcode.cn/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},cp={href:"https://leetcode.cn/problems/number-of-1-bits/",target:"_blank",rel:"noopener noreferrer"},lp={href:"https://leetcode.cn/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"},ip={href:"https://leetcode.cn/problems/reverse-bits/",target:"_blank",rel:"noopener noreferrer"},up={href:"https://leetcode.cn/problems/bitwise-and-of-numbers-range/",target:"_blank",rel:"noopener noreferrer"},rp={href:"https://leetcode.cn/problems/missing-number/",target:"_blank",rel:"noopener noreferrer"},kp={href:"https://leetcode.cn/problems/counting-bits/",target:"_blank",rel:"noopener noreferrer"};function dp(mp,vp){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("ul",null,[n("li",null,[n("p",null,[n("a",k,[s("第零章、核心框架汇总 :: labuladong的算法小抄 (gitee.io)"),t(a)])])]),n("li",null,[n("p",null,[n("a",d,[s("代码随想录 (programmercarl.com)"),t(a)])])]),n("li",null,[n("p",null,[n("a",m,[s("Home · SharingSource/LogicStack-LeetCode Wiki (github.com)"),t(a)]),s("（宫水三叶的模板）")])])]),v,n("ul",null,[b,n("li",null,[n("p",null,[n("a",h,[s("206. 反转链表 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",f,[s("92. 反转链表 II - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",_,[s("25. K 个一组翻转链表 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",w,[s("234. 回文链表 - 力扣（LeetCode）"),t(a)])])])]),y,g,L,n("ul",null,[n("li",null,[n("p",null,[n("a",x,[s("142. 环形链表 II - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",C,[s("160. 相交链表 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",j,[s("19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",q,[s("876. 链表的中间结点 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",I,[s("83. 删除排序链表中的重复元素 - 力扣（LeetCode）"),t(a)])])])]),S,n("ul",null,[n("li",null,[n("a",A,[s("23. 合并K个升序链表 - 力扣（LeetCode）"),t(a)])])]),N,E,M,n("ul",null,[n("li",null,[n("a",B,[s("739. 每日温度 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",T,[s("503. 下一个更大元素 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",V,[s("316. 去除重复字母 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",F,[s("42. 接雨水 - 力扣（LeetCode）"),t(a)]),s("（用dp做简单）")])]),z,D,n("ul",null,[n("li",null,[n("p",null,[n("a",K,[s("224. 基本计算器 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",H,[s("1106. 解析布尔表达式 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",P,[s("32. 最长有效括号 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",U,[s("150. 逆波兰表达式求值 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",R,[s("678. 有效的括号字符串 - 力扣（LeetCode）"),t(a)])]),Q]),n("li",null,[n("p",null,[n("a",X,[s("232. 用栈实现队列 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",W,[s("225. 用队列实现栈 - 力扣（LeetCode）"),t(a)])])])]),O,n("ul",null,[n("li",null,[n("a",G,[s("104. 二叉树的最大深度 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",J,[s("144. 二叉树的前序遍历 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Y,[s("107. 二叉树的层序遍历 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Z,[s("543. 二叉树的直径 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",$,[s("114. 二叉树展开为链表 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",nn,[s("116. 填充每个节点的下一个右侧节点指针 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",sn,[s("226. 翻转二叉树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",an,[s("101. 对称二叉树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",tn,[s("222. 完全二叉树的节点个数 - 力扣（LeetCode）"),t(a)]),s("（选择题可能考 要记住公式）")])]),pn,n("ul",null,[n("li",null,[n("a",en,[s("105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",on,[s("106. 从中序与后序遍历序列构造二叉树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",cn,[s("654. 最大二叉树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ln,[s("889. 根据前序和后序遍历构造二叉树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",un,[s("297. 二叉树的序列化与反序列化 - 力扣（LeetCode）"),t(a)])])]),rn,kn,n("ul",null,[n("li",null,[n("a",dn,[s("538. 把二叉搜索树转换为累加树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",mn,[s("230. 二叉搜索树中第K小的元素 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",vn,[s("701. 二叉搜索树中的插入操作 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",bn,[s("450. 删除二叉搜索树中的节点 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",hn,[s("98. 验证二叉搜索树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",fn,[s("108. 将有序数组转换为二叉搜索树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",_n,[s("96. 不同的二叉搜索树 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",wn,[s("95. 不同的二叉搜索树 II - 力扣（LeetCode）"),t(a)])])]),yn,gn,n("ul",null,[n("li",null,[n("a",Ln,[s("235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",xn,[s("236. 二叉树的最近公共祖先 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Cn,[s("1676. 二叉树的最近公共祖先 IV - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",jn,[s("1644. 二叉树的最近公共祖先 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",qn,[s("1650. 二叉树的最近公共祖先 III - 力扣（LeetCode）"),t(a)])])]),In,n("ul",null,[n("li",null,[n("a",Sn,[s("797. 所有可能的路径 - 力扣（LeetCode）"),t(a)])])]),An,n("ul",null,[n("li",null,[n("a",Nn,[s("210. 课程表 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",En,[s("802. 找到最终的安全状态 - 力扣（LeetCode）"),t(a)])])]),Mn,n("ul",null,[n("li",null,[n("p",null,[n("a",Bn,[s("785. 判断二分图 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Tn,[s("886. 可能的二分法 - 力扣（LeetCode）"),t(a)])])])]),Vn,n("ul",null,[n("li",null,[n("p",null,[n("a",Fn,[s("547. 省份数量 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",zn,[s("684. 冗余连接 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Dn,[s("323. 无向图中连通分量的数目 - 力扣（LeetCode）"),t(a)])])])]),Kn,n("ul",null,[n("li",null,[n("a",Hn,[s("1584. 连接所有点的最小费用 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Pn,[s("1135. 最低成本联通所有城市 - 力扣（LeetCode）"),t(a)]),s("（无向图）")])]),Un,Rn,n("ul",null,[n("li",null,[n("p",null,[n("a",Qn,[s("743. 网络延迟时间 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Xn,[s("1334. 阈值距离内邻居最少的城市 - 力扣（LeetCode）"),t(a)]),s("（无向图）")])])]),Wn,n("ul",null,[n("li",null,[n("a",On,[s("648. 单词替换 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Gn,[s("211. 添加与搜索单词 - 数据结构设计 - 力扣（LeetCode）"),t(a)])]),Jn]),Yn,Zn,n("ul",null,[n("li",null,[n("a",$n,[s("146. LRU 缓存 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ns,[s("460. LFU 缓存 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ss,[s("295. 数据流的中位数 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",as,[s("二叉堆详解实现优先级队列 :: labuladong的算法小抄 (gitee.io)"),t(a)])]),n("li",null,[n("a",ts,[s("设计朋友圈时间线功能 :: labuladong的算法小抄 (gitee.io)"),t(a)])])]),ps,es,os,n("ul",null,[n("li",null,[n("a",cs,[s("239. 滑动窗口最大值 - 力扣（LeetCode）"),t(a)])])]),ls,n("ul",null,[n("li",null,[n("a",is,[s("451. 根据字符出现频率排序 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",us,[s("253. 会议室 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",rs,[s("347. 前 K 个高频元素 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ks,[s("2402. 会议室 III - 力扣（LeetCode）"),t(a)])])]),ds,n("ul",null,[n("li",null,[n("a",ms,[s("167. 两数之和 II - 输入有序数组 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",vs,[s("5. 最长回文子串 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",bs,[s("344. 反转字符串 - 力扣（LeetCode）"),t(a)])])]),hs,n("ul",null,[n("li",null,[n("a",fs,[s("33. 搜索旋转排序数组 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",_s,[s("162. 寻找峰值 - 力扣（LeetCode）"),t(a)])])]),ws,n("ul",null,[n("li",null,[n("a",ys,[s("34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",gs,[s("875. 爱吃香蕉的珂珂 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ls,[s("410. 分割数组的最大值 - 力扣（LeetCode）"),t(a)])])]),xs,n("ul",null,[n("li",null,[n("a",Cs,[s("304. 二维区域和检索 - 矩阵不可变 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",js,[s("862. 和至少为 K 的最短子数组 - 力扣（LeetCode）"),t(a)])])]),qs,n("ul",null,[n("li",null,[n("a",Is,[s("370. 区间加法 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ss,[s("1109. 航班预订统计 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",As,[s("1094. 拼车 - 力扣（LeetCode）"),t(a)])])]),Ns,Es,Ms,n("ul",null,[n("li",null,[n("a",Bs,[s("59. 螺旋矩阵 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ts,[s("54. 螺旋矩阵 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Vs,[s("48. 旋转图像 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Fs,[s("151. 反转字符串中的单词 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",zs,[s("43. 字符串相乘 - 力扣（LeetCode）"),t(a)]),s("（还有一些高精度的加法等）")])]),Ds,n("ul",null,[n("li",null,[n("p",null,[n("a",Ks,[s("172. 阶乘后的零 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Hs,[s("870. 优势洗牌 - 力扣（LeetCode）"),t(a)]),s("（田忌赛马策略）")])]),n("li",null,[n("p",null,[n("a",Ps,[s("204. 计数质数 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Us,[s("372. 超级次方 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Rs,[s("319. 灯泡开关 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Qs,[s("292. Nim 游戏 - 力扣（LeetCode）"),t(a)])])])]),Xs,n("ul",null,[n("li",null,[n("a",Ws,[s("3. 无重复字符的最长子串 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Os,[s("76. 最小覆盖子串 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Gs,[s("209. 长度最小的子数组 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Js,[s("239. 滑动窗口最大值 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ys,[s("713. 乘积小于 K 的子数组 - 力扣（LeetCode）"),t(a)])])]),Zs,n("ul",null,[n("li",null,[n("a",$s,[s("28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）"),t(a)])])]),na,n("ul",null,[n("li",null,[n("a",sa,[s("187. 重复的DNA序列 - 力扣（LeetCode）"),t(a)])])]),aa,ta,pa,n("ul",null,[n("li",null,[n("a",ea,[s("【宫水三叶】蓄水池抽样运用题 - 链表随机节点 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",oa,[s("382. 链表随机节点 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ca,[s("398. 随机数索引 - 力扣（LeetCode）"),t(a)])])]),la,n("ul",null,[n("li",null,[n("a",ia,[s("528. 按权重随机选择 - 力扣（LeetCode）"),t(a)])])]),ua,ra,n("ul",null,[n("li",null,[n("a",ka,[s("380. O(1) 时间插入、删除和获取随机元素 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",da,[s("710. 黑名单中的随机数 - 力扣（LeetCode）"),t(a)])])]),ma,n("ul",null,[n("li",null,[n("a",va,[s("【宫水三叶】洗牌算法模板题 - 打乱数组 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ba,[s("384. 打乱数组 - 力扣（LeetCode）"),t(a)])])]),ha,fa,_a,n("ul",null,[n("li",null,[n("p",null,[n("a",wa,[s("十大经典排序算法总结 | JavaGuide"),t(a)])]),ya]),n("li",null,[n("p",null,[n("a",ga,[s("912. 排序数组 - 力扣（LeetCode）"),t(a)])])])]),La,xa,n("ul",null,[n("li",null,[n("a",Ca,[s("315. 计算右侧小于当前元素的个数 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ja,[s("327. 区间和的个数 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",qa,[s("493. 翻转对 - 力扣（LeetCode）"),t(a)])])]),Ia,Sa,Aa,n("ul",null,[n("li",null,[n("a",Na,[s("215. 数组中的第K个最大元素 - 力扣（LeetCode）"),t(a)])])]),Ea,n("ul",null,[n("li",null,[n("a",Ma,[s("322. 零钱兑换 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ba,[s("64. 最小路径和 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ta,[s("174. 地下城游戏 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Va,[s("42. 接雨水 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Fa,[s("84. 柱状图中最大的矩形 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",za,[s("343. 整数拆分 - 力扣（LeetCode）"),t(a)])])]),Da,n("ul",null,[n("li",null,[n("a",Ka,[s("72. 编辑距离 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ha,[s("53. 最大子数组和 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Pa,[s("1143. 最长公共子序列 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ua,[s("583. 两个字符串的删除操作 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ra,[s("1312. 让字符串成为回文串的最少插入次数 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Qa,[s("300. 最长递增子序列 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Xa,[s("718. 最长重复子数组 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Wa,[s("392. 判断子序列 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Oa,[s("115. 不同的子序列 - 力扣（LeetCode）"),t(a)])])]),Ga,Ja,n("ul",null,[n("li",null,[n("a",Ya,[s("416. 分割等和子集 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Za,[s("1049. 最后一块石头的重量 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",$a,[s("494. 目标和 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",nt,[s("474. 一和零 - 力扣（LeetCode）"),t(a)])])]),st,n("ul",null,[n("li",null,[n("a",at,[s("518. 零钱兑换 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",tt,[s("377. 组合总和 Ⅳ - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",pt,[s("139. 单词拆分 - 力扣（LeetCode）"),t(a)])])]),et,ot,n("ul",null,[n("li",null,[n("a",ct,[s("198. 打家劫舍 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",lt,[s("213. 打家劫舍 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",it,[s("337. 打家劫舍 III - 力扣（LeetCode）"),t(a)])])]),ut,n("ul",null,[n("li",null,[n("a",rt,[s("121. 买卖股票的最佳时机 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",kt,[s("122. 买卖股票的最佳时机 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",dt,[s("123. 买卖股票的最佳时机 III - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",mt,[s("188. 买卖股票的最佳时机 IV - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",vt,[s("309. 最佳买卖股票时机含冷冻期 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",bt,[s("714. 买卖股票的最佳时机含手续费 - 力扣（LeetCode）"),t(a)])])]),ht,n("ul",null,[n("li",null,[n("a",ft,[s("435. 无重叠区间 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",_t,[s("452. 用最少数量的箭引爆气球 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",wt,[s("56. 合并区间 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",yt,[s("45. 跳跃游戏 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",gt,[s("55. 跳跃游戏 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Lt,[s("135. 分发糖果 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",xt,[s("134. 加油站 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ct,[s("11. 盛最多水的容器 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",jt,[s("986. 区间列表的交集 - 力扣（LeetCode）"),t(a)])])]),qt,n("ul",null,[n("li",null,[n("a",It,[s("695. 岛屿的最大面积 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",St,[s("200. 岛屿数量 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",At,[s("1905. 统计子岛屿 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Nt,[s("827. 最大人工岛 - 力扣（LeetCode）"),t(a)])])]),Et,n("ul",null,[n("li",null,[n("a",Mt,[s("127. 单词接龙 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Bt,[s("433. 最小基因变化 - 力扣（LeetCode）"),t(a)])])]),Tt,Vt,n("ul",null,[n("li",null,[n("a",Ft,[s("【宫水三叶】常规「BFS + 状态压缩」运用题 - 获取所有钥匙的最短路径 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",zt,[s("864. 获取所有钥匙的最短路径 - 力扣（LeetCode）"),t(a)])])]),Dt,n("ul",null,[n("li",null,[n("a",Kt,[s("752. 打开转盘锁 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ht,[s("111. 二叉树的最小深度 - 力扣（LeetCode）"),t(a)])])]),Pt,n("ul",null,[n("li",null,[n("p",null,[n("a",Ut,[s("51. N 皇后 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Rt,[s("37. 解数独 - 力扣（LeetCode）"),t(a)])])]),n("li",null,[n("p",null,[n("a",Qt,[s("22. 括号生成 - 力扣（LeetCode）"),t(a)])])])]),Xt,n("ul",null,[n("li",null,[n("a",Wt,[s("698. 划分为k个相等的子集 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Ot,[s("78. 子集 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Gt,[s("90. 子集 II - 力扣（LeetCode）"),t(a)])])]),Jt,n("ul",null,[n("li",null,[n("a",Yt,[s("46. 全排列 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",Zt,[s("47. 全排列 II - 力扣（LeetCode）"),t(a)])])]),$t,n("ul",null,[n("li",null,[n("a",np,[s("216. 组合总和 III - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",sp,[s("39. 组合总和 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ap,[s("40. 组合总和 II - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",tp,[s("77. 组合 - 力扣（LeetCode）"),t(a)])])]),pp,ep,n("ul",null,[n("li",null,[n("a",op,[s("136. 只出现一次的数字 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",cp,[s("191. 位1的个数 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",lp,[s("231. 2 的幂 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",ip,[s("190. 颠倒二进制位 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",up,[s("201. 数字范围按位与 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",rp,[s("268. 丢失的数字 - 力扣（LeetCode）"),t(a)])]),n("li",null,[n("a",kp,[s("338. 比特位计数 - 力扣（LeetCode）"),t(a)])])])])}const fp=e(i,[["render",dp],["__file","LeetCode.html.vue"]]);export{fp as default};
