import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as u,e as t,w as p,a as n,b as s,f as a}from"./app-_dQeDwys.js";const r="/assets/image-20200312103237718-GTt3pXl2.png",k="/assets/image-20200312110242221-MPncruVC.png",d="/assets/image-20230217185142507-O8uN__ZC.png",m={},v=a(`<h2 id="_1、java8-lambda表达式" tabindex="-1"><a class="header-anchor" href="#_1、java8-lambda表达式" aria-hidden="true">#</a> 1、Java8 Lambda表达式</h2><hr><p>Lambda表达式也称为<strong>闭包</strong>，它允许我们把函数当作参数一样传递给某个方法，或者把代码本身当作数据处理。</p><p>早期Java开发者只能使用<strong>匿名内部类</strong>来实现Lambda表达式。</p><p>最简单的可以由<strong>逗号分隔的参数列表</strong>、<strong><code>-&gt;</code>符号</strong>、<strong>语句块</strong>三部分组成。</p><p>例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 例子1</span>
<span class="token comment">// 参数e的类型是编译器推理出来的</span>
Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> e <span class="token operator">-&gt;</span> System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 例子2</span>
<span class="token comment">// 当然也可以将执行参数的类型写上</span>
Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span> e<span class="token punctuation">)</span><span class="token operator">-&gt;</span> System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 例子3</span>
<span class="token comment">// 当有多个参数时</span>
Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">-&gt;</span> e1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 例子4</span>
<span class="token comment">// 当Lambda的语句块只有一行时，可以不使用return语句。</span>
Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span><span class="token operator">-&gt;</span> e1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ps:</strong> 切记当有多个参数，或需要指定参数类型的时候，<strong>参数列表要加括号</strong>。</p><hr><h2 id="_2、-函数式接口" tabindex="-1"><a class="header-anchor" href="#_2、-函数式接口" aria-hidden="true">#</a> 2、 函数式接口</h2><p>函数式接口(<code>Functional Interface</code>)就是一个<strong>有且仅有一个</strong>抽象方法，但是可以有多个非抽象方法的接口。</p><p>**作用：**这样的接口可以隐式转换为Lambda表达式。</p><blockquote><p>只要某个开发者在该接口中添加一个函数，则该接口就不再是函数式接口，进而导致编译失败。为了客服这种问题，并显式说明某个接口是函数式接口，Java8提供了一个特殊的注解**@FunctionalInterface**Java 库中的所有相关接口都已经带有这个注解了。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">Addtions</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我是核心</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我不会影响到函数式接口的定义&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我也不会影响到函数式接口的定义&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK 1.8 之前已有的函数式接口:</p><ul><li>java.lang.Runnable</li><li>java.util.concurrent.Callable</li><li>java.security.PrivilegedAction</li><li>java.util.Comparator</li><li>java.io.FileFilter</li><li>java.nio.file.PathMatcher</li><li>java.lang.reflect.InvocationHandler</li><li>java.beans.PropertyChangeListener</li><li>java.awt.event.ActionListener</li><li>javax.swing.event.ChangeListener</li></ul><p>JDK 1.8 新增加的函数接口：</p><ul><li>java.util.function</li></ul><h2 id="_3、接口的默认方法和静态方法" tabindex="-1"><a class="header-anchor" href="#_3、接口的默认方法和静态方法" aria-hidden="true">#</a> 3、接口的默认方法和静态方法</h2><p>Java 8允许我们给接口添加一个<strong>非抽象的方法实现</strong>，只需要使用 <code>default</code>关键字即可，这个特征又叫做扩展方法，示例如下：</p><ul><li>默认方法可以被实现类<strong>重写Override</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">FunctionalInterfaceTest</span> <span class="token keyword">implements</span> <span class="token class-name">Formula</span><span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 可以重写sqrt方法。</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">Formula</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">Formula</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">// 该方法(默认方法)可以被实现类重写</span>
    <span class="token keyword">default</span> <span class="token keyword">double</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我是新来的(JAVA8)，我叫静态方法，&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、方法引用" tabindex="-1"><a class="header-anchor" href="#_4、方法引用" aria-hidden="true">#</a> 4、方法引用</h2><p>方法引用使得开发者可以<strong>直接引用现存的方法、Java类的构造方法或者实例对象</strong>。方法引用和Lambda表达式配合使用，使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码。</p><p>可见使用Lambda表达式的写法和使用方法引用的写法的效果是一样的，但是使用方法引用有时会更加简化代码</p><ul><li>构造器引用 <ul><li><code>类名::new</code></li></ul></li><li>静态方法引用 <ul><li><code>类名::静态方法</code></li></ul></li><li>对象方法引用 <ul><li><code>类名::方法</code></li><li>当Lambda表达式的参数列表第一个参数为实例方法的调用者，第二个参数(或无参)是实例方法的参数时，可以使用这种方法。</li></ul></li><li>实例方法引用 <ul><li><code>实例对象::成员方法</code></li><li>要先获取一个实例对象</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;我是静态方法！&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Test</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// Lambda表达式</span>
		<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> func1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> test1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Lambda表达式测试:&quot;</span> <span class="token operator">+</span> func1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 实例方法引用</span>
		<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> func2 <span class="token operator">=</span> test1<span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;方法引用方式测试:&quot;</span> <span class="token operator">+</span> func2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 静态方法引用</span>
		<span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> func3 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token operator">::</span><span class="token function">staticMethod</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态方法引用测试:&quot;</span> <span class="token operator">+</span> func3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 构造方法引用(构造器引用) </span>
		<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Test</span><span class="token punctuation">&gt;</span></span> func4 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
		<span class="token class-name">Test</span> test2 <span class="token operator">=</span> func4<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造方法引用测试:&quot;</span> <span class="token operator">+</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 对象方法引用</span>
        <span class="token comment">// Test为类名，getName为成员方法。</span>
		<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> func5 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;对象方法测试引用:&quot;</span> <span class="token operator">+</span> func5<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、optional" tabindex="-1"><a class="header-anchor" href="#_5、optional" aria-hidden="true">#</a> 5、Optional</h2><p>Java应用中最常见的bug就是<strong>NullPointerException</strong>，</p><p>就比如比较两个字符串是否相等</p><p><code>s1.equals(s2)</code>，如果<code>s1==null</code>，那么一运行，console\`立马就爆红了。</p><p>所以Java8提供了Optional来解决这问题。</p><ul><li>**isPresent()：**如果Optional实例持有一个非空值，方法返回true，否则返回false</li><li><strong>orElseGet()：</strong>，Optional实例持有null，则可以接受一个lambda表达式生成的默认值</li><li>**map()：**可以将现有的Opetional实例的值转换成新的值</li><li><strong>orElse()：</strong> Opetional 实例持有null的时候返回传入的默认值， 方法与**orElseGet()**方法类似。</li><li>**filter()：**如果optional实例不为null，并且filter中lambda表达式返回true，就返回一个Optional实例;反之返回一个空optional。 <ul><li>If a value is present, and the value matches the given predicate,return an {@code Optional} describing the value, otherwise return an empty {@code Optional}.</li></ul></li></ul><ol><li><strong>当optional实例为null时</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span> fullName <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;Full Name is set? &quot;</span> <span class="token operator">+</span> fullName<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;Full Name: &quot;</span> <span class="token operator">+</span> fullName<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;[none]&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> fullName<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> s <span class="token operator">-&gt;</span> <span class="token string">&quot;Hey &quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span> <span class="token string">&quot;Hey Stranger!&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 下面为输出结果</span>
<span class="token class-name">Full</span> <span class="token class-name">Name</span> is set<span class="token operator">?</span> <span class="token boolean">false</span>
<span class="token class-name">Full</span> <span class="token class-name">Name</span><span class="token operator">:</span> <span class="token punctuation">[</span>none<span class="token punctuation">]</span>
<span class="token class-name">Hey</span> <span class="token class-name">Stranger</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>当optional实例不为null时</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">String</span> <span class="token punctuation">&gt;</span></span> firstName <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span> <span class="token string">&quot;Tom&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;First Name is set? &quot;</span> <span class="token operator">+</span> firstName<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;First Name: &quot;</span> <span class="token operator">+</span> firstName<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;[none]&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> firstName<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> s <span class="token operator">-&gt;</span> <span class="token string">&quot;Hey &quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span> <span class="token string">&quot;Hey Stranger!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出结果</span>
<span class="token class-name">First</span> <span class="token class-name">Name</span> is set<span class="token operator">?</span> <span class="token boolean">true</span>
<span class="token class-name">First</span> <span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Tom</span>
<span class="token class-name">Hey</span> <span class="token class-name">Tom</span><span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、streams" tabindex="-1"><a class="header-anchor" href="#_6、streams" aria-hidden="true">#</a> 6、Streams</h2><h3 id="_1、是什么" tabindex="-1"><a class="header-anchor" href="#_1、是什么" aria-hidden="true">#</a> 1、是什么？</h3><p>是能让你装X的东西。废话少说，先上DJ，先上DJ。</p><p><strong>普通过滤数据:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>用Streams过滤数据:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Stream操作分为中间操作和最终操作，<strong>中间操作会返回一个新的stream，只是把要做的操作记录起来而已，并不会真的执行</strong>，晚期操作才会真的遍历列表并执行所有操作。</p><p><strong>流计算的一个共同结构：</strong></p><p><mark>具有一个流来源、0个或多个中间操作，以及一个终止操作。</mark></p><p>当且仅当存在终端操作时，中间操作才会被执行。</p><p>当调用终端操作时，一系列元素会一个个单独地执行，或者可以说当一个元素走完整条链(链式调用)时，下一个元素才会执行。</p><h3 id="_2、-好处" tabindex="-1"><a class="header-anchor" href="#_2、-好处" aria-hidden="true">#</a> 2、 好处？</h3><p>另外Streams上的一个<strong>优点</strong>就是：</p><blockquote><p>原来的代码只能让我们看到的是一个一次性中间结果的声明，要阅读此代码，需要在头脑中缓存大量上下文，然后才能明白代码的实际用途。而采用Streams之后，代码变得异常清晰，并且我们不需要再被&quot;变量&quot;分心，也不需要在阅读代码的同时跟踪记录大量上下文。可读性非常强，这样也利于维护者一眼能够看出来代码在做什么。</p></blockquote><h3 id="_3、如何使用" tabindex="-1"><a class="header-anchor" href="#_3、如何使用" aria-hidden="true">#</a> 3、如何使用？</h3><p>在<a href="##1、是什么？">是什么?&gt;</a>这个章节中说过，一个流计算是具有一个流来源、0或多个中间操作，以及一个终止操作。</p><p>流的元素可以是对象引用，也可以是原始数据类型。</p><figure><img src="`+r+'" alt="image-20200312103237718" tabindex="0" loading="lazy"><figcaption>image-20200312103237718</figcaption></figure>',56),g=a(`<p>因为我们平时的数据大多存放在<strong>数组</strong>和<strong>集合</strong>中。</p><p>所以Java8JDK中对Collection、Arrays的实现都增强了。但是流的元素不至于这些(即我们可以在很多情况下用流计算)</p><p>所以你经常能看到别人花里胡哨的数组转List方法(赶快学起来，秀翻她们)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.1 基本数据类型数组转list</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1.2 对象数组</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JDK中流来源：</strong></p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Collection.stream()</code></td><td style="text-align:left;">使用一个集合的元素创建一个流。</td></tr><tr><td style="text-align:left;"><code>Stream.of(T...)</code></td><td style="text-align:left;">使用传递给工厂方法的参数创建一个流。</td></tr><tr><td style="text-align:left;"><code>Stream.of(T[])</code></td><td style="text-align:left;">使用一个数组的元素创建一个流。</td></tr><tr><td style="text-align:left;"><code>Stream.empty()</code></td><td style="text-align:left;">创建一个空流。</td></tr><tr><td style="text-align:left;"><code>Stream.iterate(T first, BinaryOperator f)</code></td><td style="text-align:left;">创建一个包含序列 <code>first, f(first), f(f(first)), ...</code> 的无限流</td></tr><tr><td style="text-align:left;"><code>Stream.iterate(T first, Predicate test, BinaryOperator f)</code></td><td style="text-align:left;">（仅限 Java 9）类似于 <code>Stream.iterate(T first, BinaryOperator f)</code>，但流在测试预期返回 <code>false</code> 的第一个元素上终止。</td></tr><tr><td style="text-align:left;"><code>Stream.generate(Supplier f)</code></td><td style="text-align:left;">使用一个生成器函数创建一个无限流。</td></tr><tr><td style="text-align:left;"><code>IntStream.range(lower, upper)</code></td><td style="text-align:left;">创建一个由下限到上限（不含）之间的元素组成的 <code>IntStream</code>。</td></tr><tr><td style="text-align:left;"><code>IntStream.rangeClosed(lower, upper)</code></td><td style="text-align:left;">创建一个由下限到上限（含）之间的元素组成的 <code>IntStream</code>。</td></tr><tr><td style="text-align:left;"><code>BufferedReader.lines()</code></td><td style="text-align:left;">创建一个有来自 <code>BufferedReader</code> 的行组成的流。</td></tr><tr><td style="text-align:left;"><code>BitSet.stream()</code></td><td style="text-align:left;">创建一个由 <code>BitSet</code> 中的设置位的索引组成的 <code>IntStream</code>。</td></tr><tr><td style="text-align:left;"><code>Stream.chars()</code></td><td style="text-align:left;">创建一个与 <code>String</code> 中的字符对应的 <code>IntStream</code>。</td></tr></tbody></table>`,6),f=a(`<p><strong>中间操作负责将一个流转换为另一个流</strong>，常见中间操作：</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:left;"><code>filter(Predicate)</code></td><td style="text-align:left;">与预期匹配的流的元素</td></tr><tr><td style="text-align:left;"><code>map(Function)</code></td><td style="text-align:left;">将提供的函数应用于流的元素的结果</td></tr><tr><td style="text-align:left;"><code>flatMap(Function&gt;</code></td><td style="text-align:left;">将提供的流处理函数应用于流元素后获得的流元素</td></tr><tr><td style="text-align:left;"><code>distinct()</code></td><td style="text-align:left;">已删除了重复的流元素</td></tr><tr><td style="text-align:left;"><code>sorted()</code></td><td style="text-align:left;">按自然顺序排序的流元素</td></tr><tr><td style="text-align:left;"><code>Sorted(Comparator)</code></td><td style="text-align:left;">按提供的比较符排序的流元素</td></tr><tr><td style="text-align:left;"><code>limit(long)</code></td><td style="text-align:left;">截断至所提供长度的流元素</td></tr><tr><td style="text-align:left;"><code>skip(long)</code></td><td style="text-align:left;">丢弃了前 N 个元素的流元素</td></tr><tr><td style="text-align:left;"><code>takeWhile(Predicate)</code></td><td style="text-align:left;">（仅限 Java 9）在第一个提供的预期不是 <code>true</code> 的元素处阶段的流元素</td></tr><tr><td style="text-align:left;"><code>dropWhile(Predicate)</code></td><td style="text-align:left;">（仅限 Java 9）丢弃了所提供的预期为 <code>true</code> 的初始元素分段的流元素</td></tr></tbody></table><blockquote><p>如果你对上边方法中的参数有疑问的话，那就说明<strong>函数式接口</strong>没掌握好，</p><p>有几个常用的：<strong>Predicate</strong>、<strong>Function</strong>、<strong>Supplier</strong>、<strong>Consumer</strong>，用Lambda做几个案例或者直接看源码就知道她们是用来干啥的。</p></blockquote><p><strong>中间操作始终是惰性的：</strong> 调用中间操作只会设置流管道的下一个阶段，不会启动任何操作。</p><p>中间操作又可划分为<strong>无状态</strong>和<strong>有状态</strong>操作。</p><ul><li><strong>无状态</strong><ul><li>可单独处理每个元素</li></ul></li><li><strong>有状态</strong></li></ul><p><strong>数据集的处理在<mark>执行终止操作时开始</mark></strong>，终止操作执行后，会终止流管道，如果您想再次遍历同一个数据集，可以设置一个新的流管道。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="image-20200312110242221" tabindex="0" loading="lazy"><figcaption>image-20200312110242221</figcaption></figure>',9),b=a(`<p>常见的终止流操作：</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>forEach(Consumer action)</code></td><td style="text-align:left;">将提供的操作应用于流的每个元素。</td></tr><tr><td style="text-align:left;"><code>toArray()</code></td><td style="text-align:left;">使用流的元素创建一个数组。</td></tr><tr><td style="text-align:left;"><code>reduce(...)</code></td><td style="text-align:left;">将流的元素聚合为一个汇总值。</td></tr><tr><td style="text-align:left;"><code>collect(...)</code></td><td style="text-align:left;">将流的元素聚合到一个汇总结果容器中。</td></tr><tr><td style="text-align:left;"><code>min(Comparator)</code></td><td style="text-align:left;">通过比较符返回流的最小元素。</td></tr><tr><td style="text-align:left;"><code>max(Comparator)</code></td><td style="text-align:left;">通过比较符返回流的最大元素。</td></tr><tr><td style="text-align:left;"><code>count()</code></td><td style="text-align:left;">返回流的大小。</td></tr><tr><td style="text-align:left;"><code>{any,all,none}Match(Predicate)</code></td><td style="text-align:left;">返回流的任何/所有元素是否与提供的预期相匹配。</td></tr><tr><td style="text-align:left;"><code>findFirst()</code></td><td style="text-align:left;">返回流的第一个元素（如果有）。</td></tr><tr><td style="text-align:left;"><code>findAny()</code></td><td style="text-align:left;">返回流的任何元素（如果有）。</td></tr></tbody></table><p>管道由封装成Spliterator的stream、一个或多个中间操作以及最终生成结果的终端操作组成。</p><blockquote><p>A pipeline consists of a stream source encapsulating a spliterator, one or more intermediate operations, and finally a terminal operation that produces a result.</p></blockquote><p>Stream 的另一个价值就是<strong>支持了并行处理 <code>parallel</code> 方法。</strong></p><ul><li><p>forEach 遍历 Map 数据</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;key:&quot;</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">&quot;,value:&quot;</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>forEach 遍历Collection 数据</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>vehicles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>vehicle <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//这样就可以遍历打印</span>
vehicles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>filter数据过滤</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vehicle</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> vehicles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>vehicle <span class="token operator">-&gt;</span> vehicle<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>map对象映射</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 取出所有的车架号列表</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> vins <span class="token operator">=</span> vehicles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token operator">::</span><span class="token function">getVin</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>GroupBy按照某个属性进行分组</p><ul><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 按照公司 Id 进行分组</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Vehicle</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> companyVehicles <span class="token operator">=</span> vehicles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token operator">::</span><span class="token function">getCompanyId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 按照公司分组求司机打分和</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> vehicles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token operator">::</span><span class="token function">getCompanyId</span><span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingDouble</span><span class="token punctuation">(</span><span class="token class-name">Vehicle</span><span class="token operator">::</span><span class="token function">getScore</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>sort按照某个属性排序 ，及多列排序</p></li><li><p>mapReduce 数据处理</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 对所有司机的总分求和
Double reduce = vehicles.stream().parallel().map(Vehicle::getScore).reduce(0d, Double::sum);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4、streams原理" tabindex="-1"><a class="header-anchor" href="#_4、streams原理" aria-hidden="true">#</a> 4、Streams原理</h3><p>在性能至关重要时，了解Streams的内部工作原理是很重要的。</p><p>上边说过<strong>一个<em>流来源</em>、0 或多个<em>中间操作</em>，以及一个<em>终止操作</em>。</strong></p><h4 id="_4-1-stream-sources流来源" tabindex="-1"><a class="header-anchor" href="#_4-1-stream-sources流来源" aria-hidden="true">#</a> 4.1 Stream Sources流来源</h4><p>Stream Source有一种称为<code>Spliterator</code>(注意这个)的抽象来描述，</p><p>顾名思义，他组合了两种行为</p><p>Spliterator还可以将其某些元素（使用<code>trySplit</code>）分割为另一个拆分器，以便在可能的<strong>并行操作</strong>中使用。</p><blockquote><p>A Spliterator may also partition off some of its elements (using trySplit) as another Spliterator, to be used in possibly-parallel operations.</p></blockquote><p><strong>PS</strong>：注意这个Spliterator</p><p><code>fromCharacteristics</code>方法将spliterator特征转换为流标志(Stream flags)</p><p><code>StatelessOp</code>通过给存在的流加一个无状态的中间操作，从而构造出一个新流。</p><blockquote><p>Construct a new Stream by appending a stateless intermediate operation to an existing stream.</p></blockquote>`,18),h=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"流标志"),n("th",{style:{"text-align":"left"}},"解释"),n("th",null,"大小")])],-1),y=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"SIZED")]),n("td",{style:{"text-align":"left"}},"流的大小已知。"),n("td",null,"0x00000040")],-1),x=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"DISTINCT")]),n("td",{style:{"text-align":"left"}},[s("依据用于对象流的 "),n("code",null,"Object.equals()"),s(" 或用于原语流的 "),n("code",null,"=="),s("，流的元素将有所不同。")]),n("td",null,"0x00000001")],-1),q=n("tr",null,[n("td",{style:{"text-align":"left"}},[n("code",null,"SORTED")]),n("td",{style:{"text-align":"left"}},"流的元素按自然顺序排序。"),n("td",null,"0x00000004")],-1),S=n("td",{style:{"text-align":"left"}},[n("code",null,"ORDERED")],-1),_={style:{"text-align":"left"}},w={href:"https://www.ibm.com/developerworks/cn/java/j-java-streams-3-brian-goetz/index.html?ca=drs-#eo",target:"_blank",rel:"noopener noreferrer"},j=n("td",null,"0x00000010",-1),N=a('<p>每个特征需要占用2个比特位</p><h3 id="streamsupport" tabindex="-1"><a class="header-anchor" href="#streamsupport" aria-hidden="true">#</a> StreamSupport</h3><p>用于创建和操作流的低级实用方法。</p><p>这个类主要用于呈现数据结构流视图的库编写器，大多数面向最终用户的静态流方法都在不同的流类中。</p><p>源码中还提到：强烈建议我们指定<code>spliterator</code>不可变(<code>IMMUTABLE</code>)、并发(<code>CONCURRENT</code>)或者其他后期绑定的特性。</p><p>所以，他推荐我们指定特性<code>characteristics</code>。</p><p>Spliterator</p><p><strong>先介绍一下位运算(characteristics需要用)：</strong></p><p><code>(a|b|c|d|e)&amp;a == a</code></p><p>先说一下该式子为啥成立：</p><p>拿A、B来举个例子：</p><ul><li><p>或运算<code>A|B</code></p><p>对于每一位来说，A、B两者若至少有一个<code>1</code>，那么该位位运算结果就是<code>1</code>，否则结果为<code>0</code>。</p></li><li><p>与运算<code>A|B</code></p><p>对于每一位来说，若两者有一个不为<code>1</code>，那么该位位运算结果就是<code>0</code>，否则结果为<code>1</code>。</p></li></ul><p>基于我们需要用的式子，我们再来研究一下：</p><p>所以，</p><h2 id="_7、时间类" tabindex="-1"><a class="header-anchor" href="#_7、时间类" aria-hidden="true">#</a> 7、时间类</h2><h1 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h1><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h2><h3 id="_1、parallel-流有什么缺点" tabindex="-1"><a class="header-anchor" href="#_1、parallel-流有什么缺点" aria-hidden="true">#</a> 1、parallel()流有什么缺点？</h3><ol><li>并行流有时会出现线程安全问题，慎用。</li></ol><figure><img src="'+d+`" alt="image-20230217185142507" tabindex="0" loading="lazy"><figcaption>image-20230217185142507</figcaption></figure><h3 id="_2、arrays-stream-不支持boolean数组-只支持int、long、double" tabindex="-1"><a class="header-anchor" href="#_2、arrays-stream-不支持boolean数组-只支持int、long、double" aria-hidden="true">#</a> 2、Arrays.Stream()不支持boolean数组(只支持int、long、double)</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function C(L,T){const e=o("center"),c=o("ExternalLinkIcon");return i(),u("div",null,[v,t(e,null,{default:p(()=>[s("都是BaseStream的子类")]),_:1}),g,t(e,null,{default:p(()=>[s("看几个常用的就行了(或者把表保存下来)")]),_:1}),f,t(e,null,{default:p(()=>[s("第一次正常执行，第二次就报错(stream已经关闭)")]),_:1}),b,n("table",null,[h,n("tbody",null,[y,x,q,n("tr",null,[S,n("td",_,[s("流有一个有意义的遇到顺序（请参阅 “"),n("a",w,[s("遇到顺序"),t(c)]),s("” 部分）")]),j])])]),N])}const A=l(m,[["render",C],["__file","Java8新特性.html.vue"]]);export{A as default};
