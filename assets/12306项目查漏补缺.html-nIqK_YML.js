const n=JSON.parse('{"key":"v-6a8edd87","path":"/interview/A6-%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3/12306%E9%A1%B9%E7%9B%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA.html","title":"","lang":"zh-CN","frontmatter":{"description":"一些不懂得点 lock.lock()需要写在try外边 当lock.lock()报错时也会进入finally释放锁，根据Lock.unlock()文档，当非锁持有线程调用该方法时会抛出unchecked异常： 缓存未命中，从数据库中加载数据时，使用分布式锁上锁。 防止多个线程同时从数据库加载数据。 展示用户信息时，对身份证等信息进行脱敏处理 hutools -- &gt;DesensitizedUtil 日常 Coding 过程中，设计模式三板斧：模版、构建者、策略 @SneakyThrows：这是一个Lombok注解，用于自动处理受检异常。它表示该方法可能会抛出受检异常。 @RestController等同于 @Controller 加上 @ResponseBody maven相关命令 **package：**该命令完成了项目编译、单元测试、打包功能三个过程。 **install：**在 package 命令的前提下新增一个步骤，将新打好的包部署到本地 Maven 仓库。 **deploy：**在 install 命令的前提下新增一个步骤，将新打的包部署到远端仓库（相当于本地和远端仓库同时部署一份）。 Spring使用条件注解定义可插拔Starter @ConditionalOnBean 补充：@ConditionalOnMissingBean用于在特定的 Bean 不存在时才加载和配置相关的组件。 配置元数据 通过建立 META-INF/spring-configuration-metadata.json 文件，开发者手动配置。 还有一种是通过注解 @ConfigurationProperties 方式自动生成。 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;/dependency&gt; @Data @Configuration @ConfigurationProperties(prefix = \\"swagger\\") public class SwaggerProperties { /** * 文档扫描包路径 */ private String basePackage = \\"\\"; /** * title 示例: 订单创建接口 */ private String title = \\"平台系统接口详情\\"; /** * 服务条款网址 */ private String termsOfServiceUrl = \\"https://www.xxxx.com/\\"; /** * 版本号 */ private String version = \\"V_1.0.0\\"; } mvn clean install FilterRegistrationBean是 Spring Framework 提供的一个用于注册和配置 Servlet 过滤器的工具类。 @Import(ApplicationContextHolder.class) 是 Spring 框架中的注解，用于导入指定的配置类或组件类，以使其成为 Spring 应用上下文的一部分。 @Around(\\"@within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)||@annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)\\") 表示切点将匹配所有标有@ILog注解的类或者带有@ILog注解的方法。 @Around是切点表达式，用于定义切点，即在哪些地方应用切面。用于包装目标方法，可以在方法执行前后添加额外的逻辑。 @within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)：这是切点表达式的一部分，它定义了一种切点匹配规则。这部分表示切点将匹配所有标有@ILog注解的类。 ||：这是逻辑或运算符，用于组合两个条件， @annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)：这是切点表达式的另一部分，它定义了另一种切点匹配规则。这部分表示切点将匹配所有带有@ILog注解的方法。 SpringBoot项目读取系统环境变量 通过@Value(${...})不仅可以读取配置文件中的属性，还可以读取系统环境变量。 通过@ConfigurationProperties注解还可以将配置文件中的属性反推到对象上 配置文件中通过${...}定义的环境变量在加载配置文件的时候也可以进行填充。 run方法运行的时候，会调用prepareEnvironment方法来装配相关的属性 image-20231020123307713 @Bean对应的方法在SpringBoot项目启动时(BeanDefinition创建之后,初始化单例Bean时)执行。 @Value对应的属性会在该属性对应的对象被创建时进行填充。 在Java项目中，如何使用-D命令行参数 image-20231020124158084 SpringBoot第一次请求很慢的问题： dispatcherServlet 是懒加载的 servlet配置load-on-startup的作用–配置spring.mvc.servlet.load-on-startup=1 数据库链接是懒加载的 指定配置文件中spring.datasource.druid.initial-size=1,即启动时会初始化1个数据库连接,按自己需求更改数值 linux 下真随机数生成器 JDK优化之熵池策略–加启动参数-Djava.security.egd=file:/dev/./urandom Spring中使用@RequiredArgsConstructor注解注入bean @RequiredArgsConstructor is a Lombok annotation that generates constructors for all final and non-null fields. @RequiredArgsConstructor注解是lombok包下的，可以让spring完成bean自动装配的工作。 用法：标注在类上，可以省略@Autowired注解，但是一定要加final修饰符否则注入失败。 问：@AllArgsConstructor和@RequiredArgsConstructor区别？ 答：以上两个注解都是通过自动生成构造函数注入bean，区别就在于@AllArgsConstructor会将类中所有的属性都生成构造函数，而@RequiredArgsConstructor只会生成final修饰的字段或者标有@NonNull的字段。","head":[["meta",{"property":"og:url","content":"https://yuejinzhao.cn/interview/A6-%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3/12306%E9%A1%B9%E7%9B%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA.html"}],["meta",{"property":"og:site_name","content":"Honyelchak\'s Blog"}],["meta",{"property":"og:description","content":"一些不懂得点 lock.lock()需要写在try外边 当lock.lock()报错时也会进入finally释放锁，根据Lock.unlock()文档，当非锁持有线程调用该方法时会抛出unchecked异常： 缓存未命中，从数据库中加载数据时，使用分布式锁上锁。 防止多个线程同时从数据库加载数据。 展示用户信息时，对身份证等信息进行脱敏处理 hutools -- &gt;DesensitizedUtil 日常 Coding 过程中，设计模式三板斧：模版、构建者、策略 @SneakyThrows：这是一个Lombok注解，用于自动处理受检异常。它表示该方法可能会抛出受检异常。 @RestController等同于 @Controller 加上 @ResponseBody maven相关命令 **package：**该命令完成了项目编译、单元测试、打包功能三个过程。 **install：**在 package 命令的前提下新增一个步骤，将新打好的包部署到本地 Maven 仓库。 **deploy：**在 install 命令的前提下新增一个步骤，将新打的包部署到远端仓库（相当于本地和远端仓库同时部署一份）。 Spring使用条件注解定义可插拔Starter @ConditionalOnBean 补充：@ConditionalOnMissingBean用于在特定的 Bean 不存在时才加载和配置相关的组件。 配置元数据 通过建立 META-INF/spring-configuration-metadata.json 文件，开发者手动配置。 还有一种是通过注解 @ConfigurationProperties 方式自动生成。 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;/dependency&gt; @Data @Configuration @ConfigurationProperties(prefix = \\"swagger\\") public class SwaggerProperties { /** * 文档扫描包路径 */ private String basePackage = \\"\\"; /** * title 示例: 订单创建接口 */ private String title = \\"平台系统接口详情\\"; /** * 服务条款网址 */ private String termsOfServiceUrl = \\"https://www.xxxx.com/\\"; /** * 版本号 */ private String version = \\"V_1.0.0\\"; } mvn clean install FilterRegistrationBean是 Spring Framework 提供的一个用于注册和配置 Servlet 过滤器的工具类。 @Import(ApplicationContextHolder.class) 是 Spring 框架中的注解，用于导入指定的配置类或组件类，以使其成为 Spring 应用上下文的一部分。 @Around(\\"@within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)||@annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)\\") 表示切点将匹配所有标有@ILog注解的类或者带有@ILog注解的方法。 @Around是切点表达式，用于定义切点，即在哪些地方应用切面。用于包装目标方法，可以在方法执行前后添加额外的逻辑。 @within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)：这是切点表达式的一部分，它定义了一种切点匹配规则。这部分表示切点将匹配所有标有@ILog注解的类。 ||：这是逻辑或运算符，用于组合两个条件， @annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)：这是切点表达式的另一部分，它定义了另一种切点匹配规则。这部分表示切点将匹配所有带有@ILog注解的方法。 SpringBoot项目读取系统环境变量 通过@Value(${...})不仅可以读取配置文件中的属性，还可以读取系统环境变量。 通过@ConfigurationProperties注解还可以将配置文件中的属性反推到对象上 配置文件中通过${...}定义的环境变量在加载配置文件的时候也可以进行填充。 run方法运行的时候，会调用prepareEnvironment方法来装配相关的属性 image-20231020123307713 @Bean对应的方法在SpringBoot项目启动时(BeanDefinition创建之后,初始化单例Bean时)执行。 @Value对应的属性会在该属性对应的对象被创建时进行填充。 在Java项目中，如何使用-D命令行参数 image-20231020124158084 SpringBoot第一次请求很慢的问题： dispatcherServlet 是懒加载的 servlet配置load-on-startup的作用–配置spring.mvc.servlet.load-on-startup=1 数据库链接是懒加载的 指定配置文件中spring.datasource.druid.initial-size=1,即启动时会初始化1个数据库连接,按自己需求更改数值 linux 下真随机数生成器 JDK优化之熵池策略–加启动参数-Djava.security.egd=file:/dev/./urandom Spring中使用@RequiredArgsConstructor注解注入bean @RequiredArgsConstructor is a Lombok annotation that generates constructors for all final and non-null fields. @RequiredArgsConstructor注解是lombok包下的，可以让spring完成bean自动装配的工作。 用法：标注在类上，可以省略@Autowired注解，但是一定要加final修饰符否则注入失败。 问：@AllArgsConstructor和@RequiredArgsConstructor区别？ 答：以上两个注解都是通过自动生成构造函数注入bean，区别就在于@AllArgsConstructor会将类中所有的属性都生成构造函数，而@RequiredArgsConstructor只会生成final修饰的字段或者标有@NonNull的字段。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T06:45:03.000Z"}],["meta",{"property":"article:author","content":"Honyelchak"}],["meta",{"property":"article:modified_time","content":"2023-12-02T06:45:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T06:45:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Honyelchak\\",\\"url\\":\\"https://yuejinzhao.cn\\"}]}"]]},"headers":[{"level":2,"title":"一些不懂得点","slug":"一些不懂得点","link":"#一些不懂得点","children":[]},{"level":2,"title":"ShortLink","slug":"shortlink","link":"#shortlink","children":[{"level":3,"title":"BloomFilter","slug":"bloomfilter","link":"#bloomfilter","children":[]},{"level":3,"title":"代码问题","slug":"代码问题","link":"#代码问题","children":[]},{"level":3,"title":"分库分表","slug":"分库分表","link":"#分库分表","children":[]}]}],"git":{"createdTime":1701499503000,"updatedTime":1701499503000,"contributors":[{"name":"honyelchak","email":"554417388@qq.com","commits":1}]},"readingTime":{"minutes":4.78,"words":1433},"filePathRelative":"interview/A6-高并发相关/12306项目查漏补缺.md","localizedDate":"2023年12月2日","excerpt":"<h2> 一些不懂得点</h2>\\n<ol>\\n<li>\\n<p><code>lock.lock()</code>需要写在try外边</p>\\n<ol>\\n<li>当lock.lock()报错时也会进入finally释放锁，根据<a href=\\"https://github.com/juggernaut0425/jdk8u_jdk/blob/511d7c8ae09a74b15f28b0d7030cdcc05c9aac3b/src/share/classes/java/util/concurrent/locks/Lock.java#L335\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Lock.unlock()</a>文档，当非锁持有线程调用该方法时会抛出unchecked异常：</li>\\n</ol>\\n</li>\\n<li>\\n<p>缓存未命中，从数据库中加载数据时，使用分布式锁上锁。</p>\\n<ol>\\n<li>防止多个线程同时从数据库加载数据。</li>\\n</ol>\\n</li>\\n<li>\\n<p>展示用户信息时，对身份证等信息进行脱敏处理</p>\\n<ol>\\n<li>hutools -- &gt;DesensitizedUtil</li>\\n</ol>\\n</li>\\n<li>\\n<p>日常 Coding 过程中，<code>设计模式三板斧：模版、构建者、策略</code></p>\\n</li>\\n<li>\\n<p><code>@SneakyThrows</code>：这是一个Lombok注解，用于自动处理受检异常。它表示该方法可能会抛出受检异常。</p>\\n</li>\\n<li>\\n<p>@RestController等同于 @Controller 加上 @ResponseBody</p>\\n</li>\\n<li>\\n<p>maven相关命令</p>\\n<ol>\\n<li>**package：**该命令完成了项目编译、单元测试、打包功能三个过程。</li>\\n<li>**install：**在 package 命令的前提下新增一个步骤，<strong>将新打好的包部署到本地 Maven 仓库</strong>。</li>\\n<li>**deploy：**在 install 命令的前提下新增一个步骤，<strong>将新打的包部署到远端仓库</strong>（相当于本地和远端仓库同时部署一份）。</li>\\n</ol>\\n</li>\\n<li>\\n<p>Spring使用条件注解定义可插拔Starter</p>\\n<ol>\\n<li>\\n<p><code>@ConditionalOnBean</code></p>\\n<blockquote>\\n<p>补充：@ConditionalOnMissingBean用于在特定的 Bean 不存在时才加载和配置相关的组件。</p>\\n</blockquote>\\n</li>\\n</ol>\\n</li>\\n<li>\\n<p>配置元数据</p>\\n<ol>\\n<li>\\n<p>通过建立 <code>META-INF/spring-configuration-metadata.json</code> 文件，开发者手动配置。</p>\\n</li>\\n<li>\\n<p>还有一种是通过注解 <code>@ConfigurationProperties</code> 方式自动生成。</p>\\n<ol>\\n<li>\\n<div class=\\"language-XML line-numbers-mode\\" data-ext=\\"XML\\"><pre class=\\"language-XML\\"><code>&lt;dependency&gt;\\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\\n    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;\\n&lt;/dependency&gt;\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li></li>\\n</ol>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Data</span>\\n<span class=\\"token annotation punctuation\\">@Configuration</span>\\n<span class=\\"token annotation punctuation\\">@ConfigurationProperties</span><span class=\\"token punctuation\\">(</span>prefix <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"swagger\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">SwaggerProperties</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 文档扫描包路径\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> basePackage <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * title 示例: 订单创建接口\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> title <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"平台系统接口详情\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 服务条款网址\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> termsOfServiceUrl <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"https://www.xxxx.com/\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 版本号\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> version <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"V_1.0.0\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ol start=\\"3\\">\\n<li>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>mvn clean <span class=\\"token function\\">install</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ol>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ol>\\n</li>\\n<li>\\n<p><code>FilterRegistrationBean</code>是 Spring Framework 提供的一个用于注册和配置 Servlet 过滤器的工具类。</p>\\n</li>\\n<li>\\n<p><code>@Import(ApplicationContextHolder.class)</code> 是 Spring 框架中的注解，用于导入指定的配置类或组件类，以使其成为 Spring 应用上下文的一部分。</p>\\n</li>\\n<li>\\n<p><code>@Around(\\"@within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)||@annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)\\") </code>表示切点将匹配所有标有<code>@ILog</code>注解的类或者带有<code>@ILog</code>注解的方法。</p>\\n<ol>\\n<li><code>@Around</code>是切点表达式，用于定义切点，即在哪些地方应用切面。用于包装目标方法，可以在方法执行前后添加额外的逻辑。</li>\\n<li><code>@within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)</code>：这是切点表达式的一部分，它定义了一种切点匹配规则。这部分表示切点将匹配所有标有<code>@ILog</code>注解的类。</li>\\n<li><code>||</code>：这是逻辑或运算符，用于组合两个条件，</li>\\n<li><code>@annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)</code>：这是切点表达式的另一部分，它定义了另一种切点匹配规则。这部分表示切点将匹配所有带有<code>@ILog</code>注解的方法。</li>\\n</ol>\\n</li>\\n<li>\\n<p>SpringBoot项目读取系统环境变量</p>\\n<ol>\\n<li>通过<code>@Value(${...})</code>不仅可以读取配置文件中的属性，还可以读取系统环境变量。\\n<ol>\\n<li>通过<code>@ConfigurationProperties</code>注解还可以将配置文件中的属性反推到对象上</li>\\n</ol>\\n</li>\\n<li>配置文件中通过<code>${...}</code>定义的环境变量在加载配置文件的时候也可以进行填充。</li>\\n</ol>\\n<blockquote>\\n<ul>\\n<li><code>run方法</code>运行的时候，会调用<code>prepareEnvironment</code>方法来装配相关的属性\\n<ul>\\n<li><figcaption>image-20231020123307713</figcaption></li>\\n</ul>\\n</li>\\n<li>@Bean对应的方法在SpringBoot项目启动时(BeanDefinition创建之后,初始化单例Bean时)执行。</li>\\n<li>@Value对应的属性会在该属性对应的对象被创建时进行填充。</li>\\n</ul>\\n</blockquote>\\n</li>\\n<li>\\n<p>在Java项目中，如何使用<code>-D</code>命令行参数</p>\\n<figure><figcaption>image-20231020124158084</figcaption></figure>\\n</li>\\n<li>\\n<p>SpringBoot第一次请求很慢的问题：</p>\\n<ol>\\n<li>dispatcherServlet 是懒加载的\\n<ol>\\n<li>servlet配置load-on-startup的作用–配置<code>spring.mvc.servlet.load-on-startup=1</code></li>\\n</ol>\\n</li>\\n<li>数据库链接是懒加载的\\n<ol>\\n<li>指定配置文件中<code>spring.datasource.druid.initial-size=1,</code>即启动时会初始化1个数据库连接,按自己需求更改数值</li>\\n</ol>\\n</li>\\n<li>linux 下真随机数生成器\\n<ol>\\n<li>JDK优化之熵池策略–加启动参数<code>-Djava.security.egd=file:/dev/./urandom</code></li>\\n</ol>\\n</li>\\n</ol>\\n</li>\\n<li>\\n<p>Spring中使用<code>@RequiredArgsConstructor</code>注解注入bean</p>\\n<ol>\\n<li>\\n<p><code>@RequiredArgsConstructor</code> is a Lombok annotation that generates constructors for all final and non-null fields.</p>\\n</li>\\n<li>\\n<p><code>@RequiredArgsConstructor</code>注解是lombok包下的，可以让spring完成bean自动装配的工作。</p>\\n</li>\\n<li>\\n<p>用法：标注在类上，可以省略@Autowired注解，但是一定要加final修饰符否则注入失败。</p>\\n</li>\\n<li>\\n<blockquote>\\n<p>问：@AllArgsConstructor和@RequiredArgsConstructor区别？</p>\\n<p>答：以上两个注解都是通过自动生成构造函数注入bean，区别就在于@AllArgsConstructor会将类中所有的属性都生成构造函数，而@RequiredArgsConstructor只会生成final修饰的字段或者标有<code>@NonNull</code>的字段。</p>\\n</blockquote>\\n</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}');export{n as data};
