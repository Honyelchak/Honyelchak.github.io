import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-XffPLay1.js";const e={},p=t(`<h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h1><h2 id="判断beandefinition的checkcandidate方法" tabindex="-1"><a class="header-anchor" href="#判断beandefinition的checkcandidate方法" aria-hidden="true">#</a> 判断BeanDefinition的checkCandidate方法</h2><p>Spring框架在扫描类创建BeanDefinition之后，为什么checkCandidate方法需要判断这么多？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">checkCandidate</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">BeanDefinition</span> existingDef <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanDefinition</span> originatingDef <span class="token operator">=</span> existingDef<span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>originatingDef <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        existingDef <span class="token operator">=</span> originatingDef<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 是否兼容，如果兼容返回false表示不会重新注册到Spring容器中，如果不冲突则会抛异常。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCompatible</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> existingDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConflictingBeanDefinitionException</span><span class="token punctuation">(</span><span class="token string">&quot;Annotation-specified bean name &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
            <span class="token string">&quot;&#39; for bean class [&quot;</span> <span class="token operator">+</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] conflicts with existing, &quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;non-compatible bean definition of same name and class [&quot;</span> <span class="token operator">+</span> existingDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的方法是为了防止下边这种情况：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AnnotationApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Config1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">fresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>Config.class</code>和<code>Config1.class</code>指定了相同的扫描路径，那就意味着Spring将会扫描两次，但是又不需要添加两次BeanDefinition，所以checkCandidate会判断两个BeanDefinition指向的Bean是不是同一个？如果是的，那就不需要抛出异常，直接返回false，不添加到BeanDefinitionMap中。否则，抛出异常。</li></ol><h2 id="属性文件中的账号密码加密如何实现" tabindex="-1"><a class="header-anchor" href="#属性文件中的账号密码加密如何实现" aria-hidden="true">#</a> 属性文件中的账号密码加密如何实现？</h2>`,8),o=[p];function i(c,l){return a(),s("div",null,o)}const r=n(e,[["render",i],["__file","奇奇怪怪的Spring问题.html.vue"]]);export{r as default};
