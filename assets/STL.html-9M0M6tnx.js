import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-XffPLay1.js";const p={},t=e(`<h1 id="c-stl" tabindex="-1"><a class="header-anchor" href="#c-stl" aria-hidden="true">#</a> C++ STL</h1><ul><li>C++中读取单个字符，最好用读入字符串的方式。<code>scanf(&quot;%s&quot;)</code></li><li><code>0x3f3f3f3f</code>是一个大于1e9的数。</li><li><code>memset()</code>是按照字节赋值的，int是4个字节。所以<code>memset(h, 0x3f, sizeof h)</code>就是把数组都置为<code>0x3f3f3f3f</code>。 <ul><li><code>memset(h, -1, sizeof h)</code> 每个位置都</li></ul></li><li></li></ul><h2 id="algorithm" tabindex="-1"><a class="header-anchor" href="#algorithm" aria-hidden="true">#</a> Algorithm</h2><h3 id="unique" tabindex="-1"><a class="header-anchor" href="#unique" aria-hidden="true">#</a> unique</h3><p>将数组中重复的元素放到最后。</p><blockquote><p>准确来说是将不重复的元素移到前面。</p></blockquote><ul><li>一般和<code>erase</code>组合使用，删除重复元素。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it1<span class="token punctuation">;</span>
    
    it1 <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 结果：</span>
<span class="token comment">// 1 3 3 4 5 6 6 7 </span>
<span class="token comment">// 1 3 4 5 6 7 6 7 </span>
<span class="token comment">// 1 3 4 5 6 7 </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h3><blockquote><p>sort(start, end)</p></blockquote><p>将数组中[start, end)范围内的元素排序。</p><ul><li>默认是升序</li><li>不稳定排序，稳定可选择<code>stable_sort(start, end)</code></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 1. 使用STL提供的比较规则进行降序</span>
<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 默认升序</span>
<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 3. 自定义比较规则</span>
<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// 自定义的比较规则cmp()</span>
<span class="token keyword">bool</span> <span class="token function">mycomp</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h2><p>倍增变长数组，支持随机寻址。</p><blockquote><p>倍增：每一次数组长度不够的时候，就分配当前数组长度一倍的空间。</p><p>系统为某一个程序分配空间时，所需时间，基本上与空间大小无关，与申请次数有关。</p></blockquote><h3 id="基本api" tabindex="-1"><a class="header-anchor" href="#基本api" aria-hidden="true">#</a> 基本API</h3><p><code>size()</code></p><p><code>empty()</code></p><p><code>clear()</code>：清空</p><p><code>front()/back()</code>：返回第(最后)一个数</p><p><code>push_back()/pop_back()</code>：在队尾插入(删除)一个数</p><p><code>begin()/end()</code>：迭代指针</p><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 1. 数组下标</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 迭代器遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span>i<span class="token punctuation">;</span>
<span class="token comment">// 3. C++ 11 基于范围的for遍历(http://c.biancheng.net/view/3738.html)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> num <span class="token operator">:</span> v<span class="token punctuation">)</span> num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="支持比较运算" tabindex="-1"><a class="header-anchor" href="#支持比较运算" aria-hidden="true">#</a> 支持比较运算</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 如果两个容器具有相同的长度而且所有元素都相等，那么这两个容器就相等；否则，不等</span>

<span class="token comment">// 如果两个容器长度不相同，但较短的容器中所有元素都等于较长容器中对应的元素，则称较短的容器小于另一个容器。</span>

<span class="token comment">// 如果两个容器都不是对方的初始子序列，则它们的比较结果取决于所比较的第一个不相等的元素。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pair-int-int" tabindex="-1"><a class="header-anchor" href="#pair-int-int" aria-hidden="true">#</a> <code>pair&lt;int,int&gt;</code></h2><p>存储一个二元组。</p><ul><li><p><code>p.first</code>第一个元素</p></li><li><p><code>p.second</code>第二个元素</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 两种初始化方式：</span>
\`pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>string<span class="token operator">&gt;</span> p<span class="token punctuation">;</span>\`

<span class="token comment">// 1. p = make_pair(10,&quot;abc&quot;);</span>
<span class="token comment">// 2. p = {10,&quot;abc&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="支持比较排序" tabindex="-1"><a class="header-anchor" href="#支持比较排序" aria-hidden="true">#</a> 支持比较排序</h3><p>按照字典序，以first为第一个关键字，以second为第二个关键字。</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h2><p>字符串， 支持随机寻址。</p><p><code>size()/length()</code>：返回字符串长度</p><p><code>substr(起始下标，(字串长度))</code>：返回子串</p><p><code>c_str()</code> ：返回字符串所在字符数组的起始地址</p><p><code>empty()</code>: Test if string is empty</p><p><code>clear()</code>: clear() 之后，size() 变成 0，capacity() 不变</p><h2 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> queue</h2><p>普通队列</p><p><code>size()</code></p><p><code>empty()</code></p><p><code>push()</code>：向队尾插入一个元素。</p><p><code>front()</code>：返回队头元素</p><p><code>back()</code>：返回队尾元素</p><p><code>pop()</code>：弹出队头元素</p><p><strong>Ps:</strong></p><ul><li>队列没有<code>clear()</code>函数，清空 <code>q = queue&lt;int&gt; ()</code>;</li></ul><h2 id="priority-queue" tabindex="-1"><a class="header-anchor" href="#priority-queue" aria-hidden="true">#</a> priority_queue</h2><p>优先队列</p><ul><li>默认是大根堆：<code>priority_queue&lt;int&gt; q</code></li><li>定义为小根堆：<code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q</code></li></ul><p><code>push()</code></p><p><code>top()</code></p><p><code>pop()</code></p><p><code>size()</code></p><p><code>empty()</code></p><p><strong>Ps:</strong></p><ul><li>没有<code>clear()</code>函数</li></ul><h2 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h2><p>栈</p><p><code>push()</code></p><p><code>top()</code></p><p><code>pop()</code></p><p><code>empty()</code></p><p><code>size()</code></p><h2 id="deque" tabindex="-1"><a class="header-anchor" href="#deque" aria-hidden="true">#</a> deque</h2><p>双端队列，支持随机寻址。</p><p><code>size()</code></p><p><code>clear()</code></p><p><code>empty()</code></p><p><code>front()/back()</code></p><p><code>push_back()/pop_back()</code></p><p><code>push_front()/pop_front()</code></p><p><code>begin()/end()</code></p><h2 id="set、map、multiset、multimap" tabindex="-1"><a class="header-anchor" href="#set、map、multiset、multimap" aria-hidden="true">#</a> set、map、multiset、multimap</h2><p>基于平衡二叉树(红黑树)，动态维护有序序列。</p><ul><li>set不允许元素重复，如果有重复就会被忽略，但<code>multiset</code>允许</li></ul><p><code>size()</code></p><p><code>empty()</code></p><p><code>clear()</code></p><p><code>begin()/end()</code></p><h3 id="set-multiset" tabindex="-1"><a class="header-anchor" href="#set-multiset" aria-hidden="true">#</a> set/multiset</h3><blockquote><p>​ c++语言中，multiset是<code>&lt;set&gt;</code>库中一个非常有用的类型，它可以看成一个序列，<strong>插入一个数，删除一个数都能够在O(logn)的时间</strong>内完成，而且他<strong>能时刻保证序列中的数是有序的</strong>，而且序列中可以存在重复的数。</p></blockquote><p><code>insert()</code></p><p><code>find()</code></p><p><code>count()</code>：返回某一个数的个数</p><p><code>erase()</code>:</p><ul><li>输入是一个数x， 删除所有x。<code>O(k + logn)</code></li><li>输入一个迭代器，删除这个迭代器。</li></ul><p><code>lower_bound()/upper_bound()</code>:</p><ul><li><code>lower_bound(x)</code> 返回大于等于x的最小的数的迭代器</li><li><code>upper_bound(x)</code> 返回大于x的最小的数的迭代器</li></ul><h3 id="map-multimap" tabindex="-1"><a class="header-anchor" href="#map-multimap" aria-hidden="true">#</a> map/multimap</h3><p><code>insert()</code> ：插入的数是一个pair <code>erase()</code> ：输入的参数是pair或者迭代器 <code>find()</code> 随机寻址[]：时间复杂度是 <code>O(logn)</code>， 注意multimap不支持此操作。 <code>lower_bound()</code>/<code>upper_bound()</code></p><h2 id="unordered-set、unordered-map、unordered-multiset、unordered-multimap" tabindex="-1"><a class="header-anchor" href="#unordered-set、unordered-map、unordered-multiset、unordered-multimap" aria-hidden="true">#</a> unordered_set、unordered_map、unordered_multiset、unordered_multimap</h2><p>哈希表</p><ul><li><p>和上面类似，但增删改查的时间复杂度是O(1)</p></li><li><p>不支持lower_bound()和upper_bound()</p></li></ul><h2 id="bitset" tabindex="-1"><a class="header-anchor" href="#bitset" aria-hidden="true">#</a> bitset</h2><p>压位</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p><code>bitset &lt;个数&gt; 变量名;</code></p><h3 id="支持" tabindex="-1"><a class="header-anchor" href="#支持" aria-hidden="true">#</a> 支持</h3><p><code>~，&amp;，|，^</code><code>&gt;&gt;，&lt;&lt;</code><code>==，!=</code><code>[]</code></p><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h3><p><code>count();</code> 返回某一个数的个数 <code>any();</code> 判断是否至少有一个1 <code>none();</code> 判断是否全为0 <code>set();</code> 把所有位置赋值为1 <code>set(k,v); </code>将第k位变成v <code>reset();</code> 把所有位变成0 <code>flip();</code> 把所有位取反，等价于~ <code>flip(k);</code> 把第k位取反</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p><code>size()</code>、<code>empty()</code>是所有STL都有的，时间复杂度是O(1)的。</p>`,107),o=[t];function c(i,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","STL.html.vue"]]);export{r as default};
