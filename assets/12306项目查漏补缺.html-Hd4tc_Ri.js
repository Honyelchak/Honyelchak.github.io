import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as s,c as t,a as n,b as e,e as r,f as i}from"./app-XffPLay1.js";const c="/assets/image-20231020123307713-i3izuZ2e.png",d="/assets/image-20231020124158084-C8hIFnoS.png",p="/assets/image-20231108161236088-dGdtFDGR.png",u="/assets/image-20231108232618844-9s0_gFUh.png",g={},m=n("h2",{id:"一些不懂得点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一些不懂得点","aria-hidden":"true"},"#"),e(" 一些不懂得点")],-1),v=n("p",null,[n("code",null,"lock.lock()"),e("需要写在try外边")],-1),k={href:"https://github.com/juggernaut0425/jdk8u_jdk/blob/511d7c8ae09a74b15f28b0d7030cdcc05c9aac3b/src/share/classes/java/util/concurrent/locks/Lock.java#L335",target:"_blank",rel:"noopener noreferrer"},b=i(`<li><p>缓存未命中，从数据库中加载数据时，使用分布式锁上锁。</p><ol><li>防止多个线程同时从数据库加载数据。</li></ol></li><li><p>展示用户信息时，对身份证等信息进行脱敏处理</p><ol><li>hutools -- &gt;DesensitizedUtil</li></ol></li><li><p>日常 Coding 过程中，<code>设计模式三板斧：模版、构建者、策略</code></p></li><li><p><code>@SneakyThrows</code>：这是一个Lombok注解，用于自动处理受检异常。它表示该方法可能会抛出受检异常。</p></li><li><p>@RestController等同于 @Controller 加上 @ResponseBody</p></li><li><p>maven相关命令</p><ol><li>**package：**该命令完成了项目编译、单元测试、打包功能三个过程。</li><li>**install：**在 package 命令的前提下新增一个步骤，<strong>将新打好的包部署到本地 Maven 仓库</strong>。</li><li>**deploy：**在 install 命令的前提下新增一个步骤，<strong>将新打的包部署到远端仓库</strong>（相当于本地和远端仓库同时部署一份）。</li></ol></li><li><p>Spring使用条件注解定义可插拔Starter</p><ol><li><p><code>@ConditionalOnBean</code></p><blockquote><p>补充：@ConditionalOnMissingBean用于在特定的 Bean 不存在时才加载和配置相关的组件。</p></blockquote></li></ol></li><li><p>配置元数据</p><ol><li><p>通过建立 <code>META-INF/spring-configuration-metadata.json</code> 文件，开发者手动配置。</p></li><li><p>还有一种是通过注解 <code>@ConfigurationProperties</code> 方式自动生成。</p><ol><li><div class="language-XML line-numbers-mode" data-ext="XML"><pre class="language-XML"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;swagger&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerProperties</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 文档扫描包路径
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> basePackage <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * title 示例: 订单创建接口
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">&quot;平台系统接口详情&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 服务条款网址
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> termsOfServiceUrl <span class="token operator">=</span> <span class="token string">&quot;https://www.xxxx.com/&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 版本号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">&quot;V_1.0.0&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li><li><p><code>FilterRegistrationBean</code>是 Spring Framework 提供的一个用于注册和配置 Servlet 过滤器的工具类。</p></li><li><p><code>@Import(ApplicationContextHolder.class)</code> 是 Spring 框架中的注解，用于导入指定的配置类或组件类，以使其成为 Spring 应用上下文的一部分。</p></li><li><p><code>@Around(&quot;@within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)||@annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)&quot;) </code>表示切点将匹配所有标有<code>@ILog</code>注解的类或者带有<code>@ILog</code>注解的方法。</p><ol><li><code>@Around</code>是切点表达式，用于定义切点，即在哪些地方应用切面。用于包装目标方法，可以在方法执行前后添加额外的逻辑。</li><li><code>@within(org.opengoofy.index12306.framework.starter.log.annotation.ILog)</code>：这是切点表达式的一部分，它定义了一种切点匹配规则。这部分表示切点将匹配所有标有<code>@ILog</code>注解的类。</li><li><code>||</code>：这是逻辑或运算符，用于组合两个条件，</li><li><code>@annotation(org.opengoofy.index12306.framework.starter.log.annotation.ILog)</code>：这是切点表达式的另一部分，它定义了另一种切点匹配规则。这部分表示切点将匹配所有带有<code>@ILog</code>注解的方法。</li></ol></li><li><p>SpringBoot项目读取系统环境变量</p><ol><li>通过<code>@Value(\${...})</code>不仅可以读取配置文件中的属性，还可以读取系统环境变量。 <ol><li>通过<code>@ConfigurationProperties</code>注解还可以将配置文件中的属性反推到对象上</li></ol></li><li>配置文件中通过<code>\${...}</code>定义的环境变量在加载配置文件的时候也可以进行填充。</li></ol><blockquote><ul><li><code>run方法</code>运行的时候，会调用<code>prepareEnvironment</code>方法来装配相关的属性 <ul><li><img src="`+c+'" alt="image-20231020123307713" tabindex="0" loading="lazy"><figcaption>image-20231020123307713</figcaption></li></ul></li><li>@Bean对应的方法在SpringBoot项目启动时(BeanDefinition创建之后,初始化单例Bean时)执行。</li><li>@Value对应的属性会在该属性对应的对象被创建时进行填充。</li></ul></blockquote></li><li><p>在Java项目中，如何使用<code>-D</code>命令行参数</p><figure><img src="'+d+'" alt="image-20231020124158084" tabindex="0" loading="lazy"><figcaption>image-20231020124158084</figcaption></figure></li><li><p>SpringBoot第一次请求很慢的问题：</p><ol><li>dispatcherServlet 是懒加载的 <ol><li>servlet配置load-on-startup的作用–配置<code>spring.mvc.servlet.load-on-startup=1</code></li></ol></li><li>数据库链接是懒加载的 <ol><li>指定配置文件中<code>spring.datasource.druid.initial-size=1,</code>即启动时会初始化1个数据库连接,按自己需求更改数值</li></ol></li><li>linux 下真随机数生成器 <ol><li>JDK优化之熵池策略–加启动参数<code>-Djava.security.egd=file:/dev/./urandom</code></li></ol></li></ol></li><li><p>Spring中使用<code>@RequiredArgsConstructor</code>注解注入bean</p><ol><li><p><code>@RequiredArgsConstructor</code> is a Lombok annotation that generates constructors for all final and non-null fields.</p></li><li><p><code>@RequiredArgsConstructor</code>注解是lombok包下的，可以让spring完成bean自动装配的工作。</p></li><li><p>用法：标注在类上，可以省略@Autowired注解，但是一定要加final修饰符否则注入失败。</p></li><li><blockquote><p>问：@AllArgsConstructor和@RequiredArgsConstructor区别？</p><p>答：以上两个注解都是通过自动生成构造函数注入bean，区别就在于@AllArgsConstructor会将类中所有的属性都生成构造函数，而@RequiredArgsConstructor只会生成final修饰的字段或者标有<code>@NonNull</code>的字段。</p></blockquote></li></ol></li>',15),h=i('<h2 id="shortlink" tabindex="-1"><a class="header-anchor" href="#shortlink" aria-hidden="true">#</a> ShortLink</h2><ul><li>用户id用bigint去存储，因为用户id是用雪花算法(64位)去生成的，所以int(4个字节)存不下，bigint(8个字节)可以。</li><li>通过抛异常的情况来解决重复创建Result对象的问题</li><li>SpringBoot默认使用Jaskson框架将对象序列化为JSON对象。</li></ul><h3 id="bloomfilter" tabindex="-1"><a class="header-anchor" href="#bloomfilter" aria-hidden="true">#</a> BloomFilter</h3><p><code>tryInit</code>有两个核心参数：</p><ul><li><code>expectedInsertions：</code>预估布隆过滤器存储的元素长度。</li><li><code>falseProbability：</code>运行的误判率。</li></ul><figure><img src="'+p+'" alt="image-20231108161236088" tabindex="0" loading="lazy"><figcaption>image-20231108161236088</figcaption></figure><h3 id="代码问题" tabindex="-1"><a class="header-anchor" href="#代码问题" aria-hidden="true">#</a> 代码问题</h3><ul><li><code>lock.tryLock()</code>应该写在外边，否则会导致原始异常丢失。</li></ul><figure><img src="'+u+'" alt="image-20231108232618844" tabindex="0" loading="lazy"><figcaption>image-20231108232618844</figcaption></figure><h3 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表" aria-hidden="true">#</a> 分库分表</h3><h4 id="什么场景下要分表" tabindex="-1"><a class="header-anchor" href="#什么场景下要分表" aria-hidden="true">#</a> 什么场景下要分表？</h4><p>数据量过大或者数据库表对应的磁盘文件过大。</p><p>Q：多少数据分表？</p><ul><li>3000w并且，稳步上升</li></ul><h4 id="什么情况下分库" tabindex="-1"><a class="header-anchor" href="#什么情况下分库" aria-hidden="true">#</a> 什么情况下分库？</h4><p>Q：什么情况下分库？</p><ul><li>数据库连接不够用。</li></ul><h4 id="什么情况下分库又分表" tabindex="-1"><a class="header-anchor" href="#什么情况下分库又分表" aria-hidden="true">#</a> 什么情况下分库又分表？</h4><p>高并发写入或查询场景。</p><p>数据量巨大场景。</p>',20);function f(_,x){const a=l("ExternalLinkIcon");return s(),t("div",null,[m,n("ol",null,[n("li",null,[v,n("ol",null,[n("li",null,[e("当lock.lock()报错时也会进入finally释放锁，根据"),n("a",k,[e("Lock.unlock()"),r(a)]),e("文档，当非锁持有线程调用该方法时会抛出unchecked异常：")])])]),b]),h])}const S=o(g,[["render",f],["__file","12306项目查漏补缺.html.vue"]]);export{S as default};
