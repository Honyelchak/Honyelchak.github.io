import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c as p,a as n,b as l,e as c,f as s}from"./app-XffPLay1.js";const i="/assets/format_png-UmIlEzB6.png",d="/assets/9d736379b2a09d0ed534734cbbf9bf34-r4D4V_UR.png",r={},u=s(`<h2 id="学生成绩表-美团" tabindex="-1"><a class="header-anchor" href="#学生成绩表-美团" aria-hidden="true">#</a> 学生成绩表(美团)</h2><ol><li><p>求出所有同学的平均分，并按照降序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> student_num<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> score <span class="token keyword">group</span> <span class="token keyword">by</span> student_num <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>求出各科成绩均大于80分的同学</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> score <span class="token keyword">group</span> <span class="token keyword">by</span> student_num <span class="token keyword">having</span> <span class="token function">MIN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_1、sql156-各个视频的平均完播率" tabindex="-1"><a class="header-anchor" href="#_1、sql156-各个视频的平均完播率" aria-hidden="true">#</a> 1、SQL156 各个视频的平均完播率</h2><p>计算2021年里有播放记录的每个视频的完播率(结果保留三位小数)，并按完播率降序排序</p><p><strong>注</strong>：视频完播率是指完成播放次数占总播放次数的比例。简单起见，结束观看时间与开始播放时间的差&gt;=视频时长时，视为完成播放。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	t1<span class="token punctuation">.</span>video_id <span class="token keyword">AS</span> video_id<span class="token punctuation">,</span>
	<span class="token function">round</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> TIME_TO_SEC<span class="token punctuation">(</span> TIMEDIFF <span class="token punctuation">(</span> end_time<span class="token punctuation">,</span> start_time <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> duration <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token boolean">NULL</span> <span class="token keyword">END</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span> t1<span class="token punctuation">.</span>video_id <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_comp_play_rate 
<span class="token keyword">FROM</span>
	tb_user_video_log t1
	<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_video_info t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>video_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>video_id 
<span class="token keyword">WHERE</span>
	<span class="token keyword">YEAR</span> <span class="token punctuation">(</span> start_time <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2021</span> 
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
	video_id 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
	avg_comp_play_rate <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><ol><li><p><code>order by</code> 后边可以用别名</p></li><li><p>计算两个时间差<code>TIMESTAMPDIFF(second, start_time, end_time)</code></p></li><li><p>获取年<code>year(start_time)</code></p></li><li><p>保留几位小数<code>round(xxx, 小数位数)</code></p></li><li><p><code>count</code>中还可以写<code>case when .... then 1 else null end</code></p></li><li><p>或者可以用</p><ol><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">second</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time <span class="token punctuation">)</span> <span class="token operator">&gt;=</span> duration<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span>TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">second</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time <span class="token punctuation">)</span> <span class="token operator">&gt;=</span> duration<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="时间函数总结" tabindex="-1"><a class="header-anchor" href="#时间函数总结" aria-hidden="true">#</a> 时间函数总结</h3><h4 id="_1-求两个时间点的差值" tabindex="-1"><a class="header-anchor" href="#_1-求两个时间点的差值" aria-hidden="true">#</a> 1. 求两个时间点的差值</h4><ul><li><p><code>TIMESTAMPDIFF</code>(year/month/day/hour/minute/second, start_time, end_time)</p><ul><li>注意开始时间在前、结束时间在后。</li></ul></li><li><p><code>DATEDIFF</code>(end_date, start_date)：返回值是天数差</p><ul><li><code>00:00:30</code></li></ul></li><li><p><code>TIME_TO_SEC</code>( TIMEDIFF ( end_time, start_time ))</p><ul><li><code>30</code></li></ul></li></ul><h4 id="_2-根据时间获取year、month、day、minute、second" tabindex="-1"><a class="header-anchor" href="#_2-根据时间获取year、month、day、minute、second" aria-hidden="true">#</a> 2.根据时间获取year、month、day、minute、second</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-22 14:15:16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">month</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-22 14:15:16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">day</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-22 14:15:16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">hour</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-22 14:15:16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">minute</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-22 14:15:16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">second</span><span class="token punctuation">(</span><span class="token string">&quot;2022-12-22 14:15:16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql条件判断" tabindex="-1"><a class="header-anchor" href="#sql条件判断" aria-hidden="true">#</a> SQL条件判断</h3><h4 id="case-when" tabindex="-1"><a class="header-anchor" href="#case-when" aria-hidden="true">#</a> case when</h4><p><code>CASE WHEN ... THEN ... ELSE ... END</code>是一种条件表达式，它可以在SQL中使用。这个表达式将根据指定条件返回不同的结果。</p><p><code>CASE</code>表达式可以在多种情况下使用，例如：</p><ol><li><p>根据不同的条件返回不同的值：例如，在SELECT语句中，你可以使用<code>CASE</code>表达式来根据不同的条件返回不同的值，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> 
       <span class="token keyword">CASE</span> 
           <span class="token keyword">WHEN</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token keyword">THEN</span> <span class="token string">&#39;Adult&#39;</span>
           <span class="token keyword">WHEN</span> age <span class="token operator">&gt;=</span> <span class="token number">13</span> <span class="token keyword">THEN</span> <span class="token string">&#39;Teenager&#39;</span>
           <span class="token keyword">ELSE</span> <span class="token string">&#39;Child&#39;</span>
       <span class="token keyword">END</span> <span class="token keyword">AS</span> age_group
<span class="token keyword">FROM</span> users<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，如果用户的年龄大于或等于18岁，则返回&quot;Adult&quot;，如果年龄在13到17岁之间，则返回&quot;Teenager&quot;，否则返回&quot;Child&quot;。</p></li><li><p>过滤数据：你可以使用<code>CASE</code>表达式来过滤数据。例如，在WHERE语句中，你可以使用<code>CASE</code>表达式来过滤出满足特定条件的行，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> users
<span class="token keyword">WHERE</span> <span class="token keyword">CASE</span> 
          <span class="token keyword">WHEN</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token keyword">THEN</span> <span class="token string">&#39;Adult&#39;</span>
          <span class="token keyword">WHEN</span> age <span class="token operator">&gt;=</span> <span class="token number">13</span> <span class="token keyword">THEN</span> <span class="token string">&#39;Teenager&#39;</span>
          <span class="token keyword">ELSE</span> <span class="token string">&#39;Child&#39;</span>
       <span class="token keyword">END</span> <span class="token operator">=</span> <span class="token string">&#39;Adult&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，只返回年龄大于或等于18岁的用户。</p></li></ol><p>使用<code>CASE</code>表达式时，需要注意以下几个方面：</p><ol><li><code>CASE</code>表达式必须以<code>WHEN</code>开始，<strong>以<code>END</code>结束。</strong></li><li><code>WHEN</code>子句后面必须跟一个条件表达式，例如<code>age &gt;= 18</code>。</li><li><code>THEN</code>子句后面必须跟一个结果表达式，例如<code>&#39;Adult&#39;</code>。</li><li><code>ELSE</code>子句后面必须跟一个结果表达式，例如<code>&#39;Child&#39;</code>。</li><li><code>CASE</code>表达式最终返回的结果类型必须相同。</li></ol><h4 id="if判断" tabindex="-1"><a class="header-anchor" href="#if判断" aria-hidden="true">#</a> IF判断</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>IF(condition, value_if_true, value_if_false)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个语法中，<code>condition</code>是一个布尔表达式，如果为真，则返回<code>value_if_true</code>；否则返回<code>value_if_false</code>。</p><h2 id="_2、sql157-平均播放进度大于60-的视频类别" tabindex="-1"><a class="header-anchor" href="#_2、sql157-平均播放进度大于60-的视频类别" aria-hidden="true">#</a> 2、SQL157 平均播放进度大于60%的视频类别</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	tag<span class="token punctuation">,</span>
	concat <span class="token punctuation">(</span> avgg<span class="token punctuation">,</span> <span class="token string">&#39;%&#39;</span> <span class="token punctuation">)</span> 
<span class="token keyword">FROM</span>
	<span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span>
		tag<span class="token punctuation">,</span>
		<span class="token function">round</span><span class="token punctuation">(</span>
			<span class="token function">AVG</span><span class="token punctuation">(</span> <span class="token keyword">IF</span> <span class="token punctuation">(</span>TIMESTAMPDIFF <span class="token punctuation">(</span> <span class="token keyword">SECOND</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time <span class="token punctuation">)</span> <span class="token operator">&gt;</span> duration<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TIMESTAMPDIFF <span class="token punctuation">(</span> <span class="token keyword">SECOND</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time <span class="token punctuation">)</span> <span class="token operator">/</span> duration <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span> 
		<span class="token punctuation">)</span> <span class="token keyword">AS</span> avgg
	<span class="token keyword">FROM</span>
		tb_user_video_log t1
		<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_video_info t2 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>video_id <span class="token operator">=</span> t2<span class="token punctuation">.</span>video_id 
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
		tag 
	<span class="token keyword">HAVING</span>
		avgg <span class="token operator">&gt;</span> <span class="token number">60</span> 
	<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
	avgg <span class="token keyword">DESC</span> 
	<span class="token punctuation">)</span> <span class="token keyword">AS</span> t3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、取出top-k数据" tabindex="-1"><a class="header-anchor" href="#_3、取出top-k数据" aria-hidden="true">#</a> 3、取出Top K数据</h2><h3 id="第二高的薪水" tabindex="-1"><a class="header-anchor" href="#第二高的薪水" aria-hidden="true">#</a> 第二高的薪水</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	<span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> salary <span class="token keyword">FROM</span> Employee <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span> SecondHighestSalary<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>核心问题还是返回0条记录（啥也没返回） 和 返回 null（此时null是个值，是个结果返回） 有什么区别。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>将返回<span class="token number">0</span>条记录转换为返回<span class="token boolean">null</span>值
<span class="token number">1.</span> ifnull<span class="token punctuation">(</span><span class="token keyword">sql</span>语句<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">2.</span> 再套一层<span class="token keyword">select</span>可以处理<span class="token boolean">null</span>值的返回情况
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第n高的薪水" tabindex="-1"><a class="header-anchor" href="#第n高的薪水" aria-hidden="true">#</a> 第N高的薪水</h3><ol start="2"><li>limit后只能写数，不能写表达式。limit()方法中不能参与运算，因为索引从0开始，所以要 - 1，最好在外面就设定好 set N = N - 1</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> getNthHighestSalary<span class="token punctuation">(</span>N <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">INT</span>
<span class="token keyword">BEGIN</span>
  <span class="token keyword">SET</span> N <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">RETURN</span> <span class="token punctuation">(</span>
      <span class="token comment"># Write your MySQL query statement below.</span>
      <span class="token keyword">select</span> ifnull<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> salary <span class="token keyword">from</span> Employee <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span> <span class="token keyword">limit</span> N<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">as</span> getNthHighestSalary
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分数排名-同分-同排名" tabindex="-1"><a class="header-anchor" href="#分数排名-同分-同排名" aria-hidden="true">#</a> 分数排名(同分，同排名)</h3><ol><li><p>窗口函数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> score<span class="token punctuation">,</span> dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">\`</span>rank<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> Scores<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>子关联查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> s1<span class="token punctuation">.</span>score <span class="token keyword">as</span> score<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">\`</span>rank<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> Scores s1<span class="token punctuation">,</span> Scores s2 <span class="token keyword">where</span> s1<span class="token punctuation">.</span>score <span class="token operator">&lt;=</span> s2<span class="token punctuation">.</span>score <span class="token keyword">group</span> <span class="token keyword">by</span> s1<span class="token punctuation">.</span>Id <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token identifier"><span class="token punctuation">\`</span>rank<span class="token punctuation">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_4、部门工资最高的员工" tabindex="-1"><a class="header-anchor" href="#_4、部门工资最高的员工" aria-hidden="true">#</a> 4、部门工资最高的员工</h2><p>有员工表和部门表，</p><ol><li>版本一(三表联查)</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> c<span class="token punctuation">.</span>name Department<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name Employee<span class="token punctuation">,</span> a<span class="token punctuation">.</span>salary Salary 
<span class="token keyword">from</span> Employee a<span class="token punctuation">,</span> 
	<span class="token punctuation">(</span><span class="token keyword">select</span> departmentId id<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> salary <span class="token keyword">from</span> Employee <span class="token keyword">group</span> <span class="token keyword">by</span> departmentId<span class="token punctuation">)</span> b<span class="token punctuation">,</span> 
	Department c 
<span class="token keyword">where</span> 
	a<span class="token punctuation">.</span>departmentId <span class="token operator">=</span> b<span class="token punctuation">.</span>id
    <span class="token operator">and</span> a<span class="token punctuation">.</span>salary <span class="token operator">=</span> b<span class="token punctuation">.</span>salary
    <span class="token operator">and</span> a<span class="token punctuation">.</span>departmentId <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>版本二(<strong>使用in关键字</strong>)<mark>in关键字可以应用于多列</mark></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> c<span class="token punctuation">.</span>name Department<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name Employee<span class="token punctuation">,</span> a<span class="token punctuation">.</span>salary Salary 
<span class="token keyword">from</span> 
    Employee a <span class="token keyword">left</span> <span class="token keyword">join</span> Department c <span class="token keyword">on</span> a<span class="token punctuation">.</span>departmentId <span class="token operator">=</span> c<span class="token punctuation">.</span>id
<span class="token keyword">where</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>departmentId<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> departmentId id<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> salary <span class="token keyword">from</span> Employee <span class="token keyword">group</span> <span class="token keyword">by</span> departmentId<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、部分工资前三高的所有员工-开窗函数" tabindex="-1"><a class="header-anchor" href="#_5、部分工资前三高的所有员工-开窗函数" aria-hidden="true">#</a> 5、部分工资前三高的所有员工(开窗函数)</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> c<span class="token punctuation">.</span>name Department<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name Employee<span class="token punctuation">,</span> a<span class="token punctuation">.</span>salary Salary
<span class="token keyword">from</span> Employee a <span class="token keyword">left</span> <span class="token keyword">join</span>  Department c <span class="token keyword">on</span> a<span class="token punctuation">.</span>departmentId <span class="token operator">=</span> c<span class="token punctuation">.</span>id
 <span class="token keyword">where</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> b<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">from</span> Employee b <span class="token keyword">where</span> b<span class="token punctuation">.</span>salary <span class="token operator">&gt;</span> a<span class="token punctuation">.</span>salary <span class="token operator">and</span> b<span class="token punctuation">.</span>departmentId <span class="token operator">=</span> a<span class="token punctuation">.</span>departmentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> b<span class="token punctuation">.</span>name Department<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name Employee<span class="token punctuation">,</span> a<span class="token punctuation">.</span>salary Salary 
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> departmentId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> departmentId <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> number <span class="token keyword">from</span> Employee<span class="token punctuation">)</span> a<span class="token punctuation">,</span> Department b 
<span class="token keyword">where</span> a<span class="token punctuation">.</span>number <span class="token operator">&lt;=</span>  <span class="token number">3</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>departmentId <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、体育馆的人流量-开窗函数的妙用" tabindex="-1"><a class="header-anchor" href="#_6、体育馆的人流量-开窗函数的妙用" aria-hidden="true">#</a> 6、体育馆的人流量(开窗函数的妙用)</h2><p>简单来说，就是要<strong>求id连续数量大于3的记录</strong></p><ol><li>通过<code>rank() over(order by id) as rk</code>得到新的序号</li><li>通过<code>id - rk</code>进行分组，属于同一组的必定是想要的记录。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># Write your MySQL query statement below</span>
<span class="token keyword">SELECT</span>
	id<span class="token punctuation">,</span>
	visit_date<span class="token punctuation">,</span>
	people 
<span class="token keyword">FROM</span>
	<span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span>
		id<span class="token punctuation">,</span>
		visit_date<span class="token punctuation">,</span>
		people<span class="token punctuation">,</span>
		<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> id_2 <span class="token punctuation">)</span> cnt 
	<span class="token keyword">FROM</span>
		<span class="token punctuation">(</span>
		<span class="token keyword">SELECT</span>
			<span class="token operator">*</span><span class="token punctuation">,</span>
			row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token punctuation">)</span> rk<span class="token punctuation">,</span>
			id <span class="token operator">-</span> <span class="token punctuation">(</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token punctuation">)</span><span class="token punctuation">)</span> id_2 
		<span class="token keyword">FROM</span>
			Stadium s 
		<span class="token keyword">WHERE</span>
			s<span class="token punctuation">.</span>people <span class="token operator">&gt;=</span> <span class="token number">100</span> 
		<span class="token punctuation">)</span> t1 
	<span class="token punctuation">)</span> t2 
<span class="token keyword">WHERE</span>
	cnt <span class="token operator">&gt;=</span> <span class="token number">3</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> 
	visit_date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、最后一个能进入巴士的人-按顺序累计" tabindex="-1"><a class="header-anchor" href="#_7、最后一个能进入巴士的人-按顺序累计" aria-hidden="true">#</a> 7、最后一个能进入巴士的人(按顺序累计)</h2><p>**法一：**使用开创函数</p><ul><li><code>sum(weight) over(order by turn) rk</code>按照&quot;turn&quot;列的顺序进行累加计算&quot;weight&quot;列的总和，并将计算结果命名为&quot;rk&quot;（排名）。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
    person_name
<span class="token keyword">from</span>
    <span class="token punctuation">(</span>
        <span class="token keyword">select</span>
            <span class="token operator">*</span><span class="token punctuation">,</span>
            <span class="token function">sum</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> turn<span class="token punctuation">)</span> rk
        <span class="token keyword">from</span>
            Queue
    <span class="token punctuation">)</span> t1
    <span class="token keyword">where</span>
        t1<span class="token punctuation">.</span>rk <span class="token operator">&lt;=</span> <span class="token number">1000</span>
    <span class="token keyword">order</span> <span class="token keyword">by</span>
        rk <span class="token keyword">desc</span>
    <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**法二：**使用普通函数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
    t1<span class="token punctuation">.</span>person_name
<span class="token keyword">FROM</span> 
    <span class="token punctuation">(</span>
        <span class="token keyword">select</span> 
                t1<span class="token punctuation">.</span>person_name person_name<span class="token punctuation">,</span>
                <span class="token function">sum</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> total
        <span class="token keyword">from</span>
                Queue t1
                <span class="token keyword">left</span> <span class="token keyword">join</span>
                Queue t2
        <span class="token keyword">on</span>
                t1<span class="token punctuation">.</span>turn <span class="token operator">&gt;=</span> t2<span class="token punctuation">.</span>turn
        <span class="token keyword">group</span> <span class="token keyword">by</span> 
                t1<span class="token punctuation">.</span>turn
        <span class="token keyword">order</span> <span class="token keyword">by</span> 
                total
    <span class="token punctuation">)</span> t1
<span class="token keyword">where</span> 
    t1<span class="token punctuation">.</span>total <span class="token operator">&lt;=</span> <span class="token number">1000</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> 
    total <span class="token keyword">desc</span> 
<span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="sql基础知识" tabindex="-1"><a class="header-anchor" href="#sql基础知识" aria-hidden="true">#</a> SQL基础知识</h1><h3 id="一、表自身连接-自己连接自己" tabindex="-1"><a class="header-anchor" href="#一、表自身连接-自己连接自己" aria-hidden="true">#</a> 一、表自身连接[自己连接自己]</h3><ul><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a <span class="token keyword">join</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> a<span class="token punctuation">)</span> <span class="token keyword">where</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Person p1<span class="token punctuation">,</span> Person p2 <span class="token keyword">where</span> p1<span class="token punctuation">.</span>Email <span class="token operator">=</span> p2<span class="token punctuation">.</span>Email<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="二、sql如何判断是否为null" tabindex="-1"><a class="header-anchor" href="#二、sql如何判断是否为null" aria-hidden="true">#</a> 二、SQL如何判断是否为null</h3><ul><li><code>where a is null </code></li><li><code>where a is not null </code></li></ul><blockquote><p>这个地方注意，<code>a != &quot;&quot;</code> 只能判断a不是一个空字符串。</p><ol><li><code>a = &quot;&quot;</code>：空字符串表示一个存在但为空的字符串值</li><li><code>a is null</code>：NULL表示缺失或未知的数据</li></ol></blockquote><h3 id="三、sql去重-三种方式" tabindex="-1"><a class="header-anchor" href="#三、sql去重-三种方式" aria-hidden="true">#</a> 三、SQL去重(三种方式)</h3><ol><li>having ＋聚合函数</li></ol><p><code>select Email from Person group by Email having count(Email) &gt; 1;</code></p><ol start="2"><li>自链接</li></ol><p><code>select DISTINCT p1.Email from Person p1, Person p2 where p1.Email = p2.Email and p1.Id != p2.Id;</code></p><ol start="3"><li>子表查询</li></ol><p><code>select Email from (select count(1) as t, Email from Person group by Email) r where r.t &gt; 1;</code></p><h3 id="四、判空-null-求空值的占比" tabindex="-1"><a class="header-anchor" href="#四、判空-null-求空值的占比" aria-hidden="true">#</a> <mark>四、判空(Null) | 求空值的占比</mark></h3><p><strong>如何判断null</strong></p><ul><li><code>只能采用IS NULL或IS NOT NULL</code>，而不能采用=, &lt;, &lt;&gt;, !=这些操作符来判断NULL。</li></ul><p><strong>求null值得占比</strong></p><ul><li><code>avg(event_date is not null)</code></li><li><code>avg(event_date is null)</code></li></ul><h3 id="五、in查询" tabindex="-1"><a class="header-anchor" href="#五、in查询" aria-hidden="true">#</a> 五、In查询</h3><p><code>in查询能查询多列。</code></p><h3 id="六、开窗函数-mysql-8-0已支持开窗函数" tabindex="-1"><a class="header-anchor" href="#六、开窗函数-mysql-8-0已支持开窗函数" aria-hidden="true">#</a> 六、开窗函数(MySQL 8.0已支持开窗函数)</h3><blockquote><p>开窗函数和聚合函数的区别：</p></blockquote><ul><li>SQL 标准允许将所有聚合函数用作开窗函数，用<code>OVER</code> 关键字区分开窗函数和聚合函数。</li><li>聚合函数每组只返回一个值，开窗函数每组可返回多个值。</li></ul><p>开窗函数与聚合函数一样，也是对<strong>行集组进行聚合计算</strong>，但是它不像普通聚合函数那样<strong>每组只返回一个值</strong>，<strong>开窗函数可以为每组返回多个值</strong>，因为开窗函数所执行聚合计算的行集组是窗口。</p><h4 id="排序函数的区别" tabindex="-1"><a class="header-anchor" href="#排序函数的区别" aria-hidden="true">#</a> 排序函数的区别</h4><blockquote><ul><li><code>row_number() over()</code>：相等的值排名不同</li><li><code>rank() over()</code>：相等的值排名相同，但若有相等的值，则序号从1到n不连续</li><li><code>dense_rank() over()</code>：相等的值排名相同，序号连续</li><li><code>ntile(n) over()</code>：把有序的数据集合平均分配到指定数量n的桶中，将桶号分配给每一行。</li></ul></blockquote><p>在使用 row_number() over()函数时候，<strong>over()里头</strong>的分组以及排序的<strong>执行，*<em>晚于*</em></strong> where 、group by、 order by 的<strong>执行</strong>。</p><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="求前七天的总额和平均值" tabindex="-1"><a class="header-anchor" href="#求前七天的总额和平均值" aria-hidden="true">#</a> 求前七天的总额和平均值</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token keyword">select</span> 
visited_on<span class="token punctuation">,</span>
sum_amount amount<span class="token punctuation">,</span>
<span class="token function">round</span><span class="token punctuation">(</span>sum_amount <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> average_amount
<span class="token keyword">from</span> <span class="token punctuation">(</span>
<span class="token keyword">select</span> 
    <span class="token operator">*</span><span class="token punctuation">,</span>
    <span class="token comment"># 计算在以visited_on列排序的行集合中，每一行及其前面6天内行的sums列的总和</span>
    <span class="token function">sum</span><span class="token punctuation">(</span>sums<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> visited_on range <span class="token operator">between</span> <span class="token keyword">interval</span> <span class="token string">&#39;6&#39;</span> <span class="token keyword">day</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span> sum_amount
<span class="token keyword">from</span> <span class="token punctuation">(</span>
    <span class="token keyword">select</span> 
        visited_on<span class="token punctuation">,</span>
        <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> cnt<span class="token punctuation">,</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> sums
    <span class="token keyword">from</span>
        Customer
    <span class="token keyword">group</span> <span class="token keyword">by</span>
        visited_on
<span class="token punctuation">)</span>t1
<span class="token punctuation">)</span>t2
<span class="token keyword">where</span>
datediff<span class="token punctuation">(</span>visited_on<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>visited_on<span class="token punctuation">)</span> <span class="token keyword">from</span> Customer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="七、删除数据" tabindex="-1"><a class="header-anchor" href="#七、删除数据" aria-hidden="true">#</a> 七、删除数据</h3>`,85),k={href:"https://leetcode.cn/problems/delete-duplicate-emails/",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>删除重复电子邮箱，同一个电子邮箱只保留id最小的那一行。</p><blockquote><p>我的写法：</p><ol><li>注意where后的第一层select语句中不能使用要删除的表(Person)，可以再嵌套一层使用。</li></ol></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> Person
<span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span>  <span class="token punctuation">(</span>
    <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> id <span class="token keyword">from</span> Person <span class="token keyword">group</span> <span class="token keyword">by</span> email<span class="token punctuation">;</span>
<span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>标准答案：</p><ol><li>遇到类似的题目，可以先写出select语句，之后改成delete</li></ol></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> p1 <span class="token keyword">from</span> Person p1<span class="token punctuation">,</span> Person p2 <span class="token keyword">where</span> p1<span class="token punctuation">.</span>email <span class="token operator">=</span> p2<span class="token punctuation">.</span>email <span class="token operator">and</span> p1<span class="token punctuation">.</span>id <span class="token operator">&gt;</span> p2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="八、保留两位小数" tabindex="-1"><a class="header-anchor" href="#八、保留两位小数" aria-hidden="true">#</a> 八、保留两位小数</h3><p><code>round(xxx, 2)</code></p><h3 id="九、sql的一般执行顺序" tabindex="-1"><a class="header-anchor" href="#九、sql的一般执行顺序" aria-hidden="true">#</a> 九、SQL的一般执行顺序</h3><ul><li>from</li><li>where</li><li>group by</li><li>having</li><li>select</li><li>distinct</li><li>order by</li><li>limit</li></ul><figure><img src="`+d+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li>先执行<code>from、join</code>来确定表之间的连接关系，得到初步的数据</li><li>where对数据进行普通的初步的筛选</li><li>group by 分组</li><li>各组分别执行having中的普通筛选或者聚合函数筛选。</li><li>然后把再根据我们要的数据进行select，可以是普通字段查询也可以是获取聚合函数的查询结果，如果是集合函数，select的查询结果会新增一条字段将查询结果去重distinct</li><li>最后合并各组的查询结果，按照order by的 条件进行排序</li></ul></blockquote><h3 id="十、group-by函数的妙用" tabindex="-1"><a class="header-anchor" href="#十、group-by函数的妙用" aria-hidden="true">#</a> 十、Group by函数的妙用</h3><ol><li>group by 之后<strong>进行不重复元素个数的查询</strong></li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> customer_id <span class="token keyword">from</span> Customer <span class="token keyword">group</span> <span class="token keyword">by</span> customer_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> product_key<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>product_key<span class="token punctuation">)</span> <span class="token keyword">from</span> Product<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="十一、order-by可以用聚合函数、union会去重-union-all不会去重" tabindex="-1"><a class="header-anchor" href="#十一、order-by可以用聚合函数、union会去重-union-all不会去重" aria-hidden="true">#</a> 十一、order by可以用聚合函数、union会去重，union all不会去重</h3><p>union、union all都需要列数相同，类型可以不同</p><h3 id="十二、行转列用groupby-sumif-列转行用union-all" tabindex="-1"><a class="header-anchor" href="#十二、行转列用groupby-sumif-列转行用union-all" aria-hidden="true">#</a> 十二、行转列用groupby+sumif，列转行用union all</h3><h3 id="十三、ifnull用来判断是否为null" tabindex="-1"><a class="header-anchor" href="#十三、ifnull用来判断是否为null" aria-hidden="true">#</a> 十三、ifnull用来判断是否为null</h3><p><code>ifnull(xx, 2)</code>若为null的时候替换为2</p><h3 id="十四、字符串长度函数length" tabindex="-1"><a class="header-anchor" href="#十四、字符串长度函数length" aria-hidden="true">#</a> 十四、字符串长度函数<code>LENGTH</code></h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
    tweet_id
<span class="token keyword">from</span>
    Tweets
<span class="token keyword">where</span> 
    LENGTH<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="十五、字符串正则表达式" tabindex="-1"><a class="header-anchor" href="#十五、字符串正则表达式" aria-hidden="true">#</a> 十五、字符串正则表达式</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">regexp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="十六、分组合并字符串" tabindex="-1"><a class="header-anchor" href="#十六、分组合并字符串" aria-hidden="true">#</a> 十六、分组合并字符串</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 
    sell_date<span class="token punctuation">,</span>
    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> product<span class="token punctuation">)</span> num_sold<span class="token punctuation">,</span>
    GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">distinct</span> product <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> product SEPARATOR <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> products
<span class="token keyword">from</span>
    Activities
<span class="token keyword">group</span> <span class="token keyword">BY</span>
    sell_date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function m(b,y){const a=t("ExternalLinkIcon");return o(),p("div",null,[u,n("p",null,[n("a",k,[l("196. 删除重复的电子邮箱"),c(a)])]),v])}const g=e(r,[["render",m],["__file","手撕SQL.html.vue"]]);export{g as default};
