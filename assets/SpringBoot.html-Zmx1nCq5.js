import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as e}from"./app-XffPLay1.js";const t={},o=e(`<h2 id="house管理系统" tabindex="-1"><a class="header-anchor" href="#house管理系统" aria-hidden="true">#</a> house管理系统</h2><h3 id="commandlinerunner的作用" tabindex="-1"><a class="header-anchor" href="#commandlinerunner的作用" aria-hidden="true">#</a> <code>CommandLineRunner</code>的作用</h3><blockquote><p>平常开发中有可能需要实现在<strong>项目启动后执行的功能</strong>，SpringBoot提供的一种简单的实现方案就是添加一个model并实现CommandLineRunner接口，实现功能的代码放在实现的run方法中</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如果有多个类实现commandlinerunner接口-如何保证顺序" tabindex="-1"><a class="header-anchor" href="#如果有多个类实现commandlinerunner接口-如何保证顺序" aria-hidden="true">#</a> 如果有多个类实现CommandLineRunner接口，如何保证顺序?</h4><blockquote><p>SpringBoot在项目启动后会遍历所有实现CommandLineRunner的实体类并执行run方法，如果需要按照一定的顺序去执行，那么就需要在实体类上使用一个@Order注解（或者实现Order接口）来表明顺序</p></blockquote><h3 id="继承springbootservletinitializer" tabindex="-1"><a class="header-anchor" href="#继承springbootservletinitializer" aria-hidden="true">#</a> 继承<code>SpringBootServletInitializer</code></h3><p>启动项目有两种方式：</p><ul><li>默认的Application启动，在创建项目时自动生成application启动类，直接run执行。</li><li>使用外置的tomcat启动 <ul><li>默认的启动类要继承<code>SpringBootServletInitializer</code>类，并重写configure()方法。</li></ul></li></ul><h3 id="注解-bean" tabindex="-1"><a class="header-anchor" href="#注解-bean" aria-hidden="true">#</a> 注解@Bean</h3><ul><li><p>@component注解表明一个类会作为组件类，斌告知spring要为这个类创建bean。</p></li><li><p>@bean注解告诉spring这个方法会返回一个对象，这个对象要注册为Spring应用上下文中的bean。通常方法体中包含了最终产生bean实例的逻辑。</p></li><li><p>如下，有参数connectFactory，若spring容器中只有一个ConnectionFactory 类型的bean，则不论参数取名为何都是按类型取bean ConnectionFactory 为参数，若有多个则参数取名必须为多个bean中的一个，否则报错。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">RabbitAdmin</span> <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;-----------getRabbitAdmin:%s&quot;</span><span class="token punctuation">,</span> connectionFactory<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,11),i=[o];function c(p,l){return a(),s("div",null,i)}const d=n(t,[["render",c],["__file","SpringBoot.html.vue"]]);export{d as default};
